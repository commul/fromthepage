=render({ :partial => '/shared/collection_tabs', :locals => { :selected => 6, :collection_id => @collection.id }})

-if @collection.categories.present?
  -if @page
    -page_link = link_to('click here', { :controller => 'transcribe', :action => 'assign_categories', :page_id => @page.id })
    .category-back-message =="Once you finish editing categories, #{page_link} to return back to &ldquo;#{@page.title}&rdquo; page."

  .collection-categories
    .category-tree
      h3 Categories
      ==display_categories(@collection.categories, nil) do |category|
        -ret = "<a href=\"#category-#{category.id}\" class=\"tree-item\">"
        -if category.children.any?
          -ret << "<span class=\"tree-bullet\"></span>"
        -ret << "<span>#{category.title}</span>"
        -ret << "</a>"
      -if @uncategorized_articles.present?
        ul
          li: a.tree-item(href="#category-none") Uncategorized

    .category-articles
      -@collection.categories.each do |category|
        dl.category-article(id="category-#{category.id}")
          dt
            .headline
              //h3.headline_title ==(category.ancestors.reverse.push(category).map { |c| c.title }).join(" &rarr; ")
              h3.headline_title(data-category-title="#{category.id}") =category.title
              -if user_signed_in? && current_user.like_owner?(@collection)
                .headline_aside
                  dl.dropdown.right
                    dt.h5
                      span Actions
                      =svg_symbol '#big-menu', class: 'icon icon-big'
                    dd
                      =link_to 'Rename Category', { :controller => 'category', :action => 'edit', :collection_id => @collection.id, :category_id => category.id }, 'data-litebox' => ''
                      =link_to 'Add Child Category', { :controller => 'category', :action => 'add_new', :collection_id => @collection.id, :category_id => category.id }, 'data-litebox' => ''
                      =link_to 'Add Root Category', { :controller => 'category', :action => 'add_new', :collection_id => @collection.id }, 'data-litebox' => ''
                      hr
                      =link_to 'Delete Category', { :controller => 'category', :action => 'delete', :collection_id => @collection.id, :category_id => category.id }, class: 'fgred', data: { :confirm => 'Are you sure you want to delete this category and all its subcategories? After deleting you won\'t be able to recover it!' }

                      hr
                      =link_to 'Assign Category Scope', { :controller => 'category', :action => 'assign_category_scope', :collection_id => @collection.id, :category_id => category.id }, 'data-litebox' => ''
                      hr
                      =link_to 'Define Category Style', { :controller => 'category', :action => 'define_style', :collection_id => @collection.id, :category_id => category.id }, 'data-litebox' => ''
                      hr
                      =link_to 'Define Category Attributes', { :controller => 'category', :action => 'define_attributes', :collection_id => @collection.id, :category_id => category.id }, 'data-litebox' => ''
                      hr
                      =link_to 'Define Category Attribute Values', { :controller => 'category', :action => 'define_attribute_values', :collection_id => @collection.id, :category_id => category.id }, 'data-litebox' => ''
                      hr
                      =link_to 'Define Attribute Sequences', { :controller => 'category', :action => 'define_attribute_sequences', :collection_id => @collection.id, :category_id => category.id }, 'data-litebox' => ''
                      hr
                      =link_to 'Apply All Categories Changes', { :controller => 'category', :action => 'apply_all_styles', :collection_id => @collection.id, :category_id => category.id }
                      hr
                      =link_to 'Discard All Styles', { :controller => 'category', :action => 'discard_all_styles', :collection_id => @collection.id, :category_id => category.id }
          dd
            -if category.articles.empty?
              p.acenter.fglight There are no subjects for the category selected
            -else
              -category.articles.each do |article|
                =link_to article.title, { :action => 'show', :article_id => article.id }
      -if @uncategorized_articles.present?
        dl.category-article#category-none
          dt: h3 Uncategorized subjects
          dd
            -@uncategorized_articles.each do |article|
              =link_to article.title, { :action => 'show', :article_id => article.id }
-else
  -add_category = link_to 'Create the first category', { :controller => 'category', :action => 'add_new', :collection_id => @collection.id }, 'data-litebox' => ''
  .nodata
    h4.nodata_title No Categories
    p.nodata_text
      =="There are no subject categories in the collection.<br>"
      =="#{add_category} you'll use to group subjects." if user_signed_in? && current_user.like_owner?(@collection)

=render({ :partial => '/shared/collection_footer' })

-content_for :javascript
  javascript:
    $(function() {
      $(window).on('hashchange', function() {
        var selected = window.location.hash || $('.tree-item:first').attr('href');
        var $tree_item = $('.tree-item[href="'+selected+'"]');

        if($tree_item.length !== 0) {
          $tree_item.parentsUntil('.category-tree', 'li').addClass('expanded');
          $('.tree-item.selected').removeClass('selected');
          $tree_item.addClass('selected');
          $(selected).show().siblings().hide();
        }
      }).trigger('hashchange');

    });

    var numberOfAddedAttributes=0;

    //Functions for the attributes menu
    function addField(style) {
      console.log("style: "+style+"\n");
      
      numberOfAddedAttributes+=1;
      var html = "<input name='attribute[]' class='attribute_input_field' type='text'><br>";
      html+='<div style="'+style+'">';
      html+='<input id="category_new_attr_scope_0" name="new_attr_scope['+numberOfAddedAttributes+']" value="0" type="radio">simple<br>';
      html+='<input id="category_new_attr_scope_1" name="new_attr_scope['+numberOfAddedAttributes+']" value="1" type="radio">advanced<br>';
      html+='<input id="category_new_attr_scope_2" name="new_attr_scope['+numberOfAddedAttributes+']" value="2" type="radio" checked>both<br>';
      html+='</div>';
      $('#fields').append(html);
      
    }

    

    function deleteField(id) {
      var html = "<input type='hidden' name='delete_attribute[]' value='"+id+"'>";
      $('#fields').append(html);
      document.getElementById("delete_attribute_"+id).disabled=true;
    }

    //Function for the category creation menu normalising the category name
    function verifyValue(){
      var value=document.getElementById('category_title').value;
      value=value.replace(/[ ]+/g, "_");
      value=value.replace(/[\-]+/g, "_"); //Hyphen is allowed but not accepted by all the parsers

      if(value.match(/^[^a-zA-Z_]+(.+)$/)!=null){
          value=value.match(/^[^a-zA-Z_]+(.+)$/)[1]; //An attribute name can only begin with a letter or an underscore
        }

      value=value.replace(/[^a-zA-Z0-9_]+/g, "");
      //The values can't be longer than 255
      if(value.length>250){
        value=value.substr(0,250);
      }
      document.getElementById('category_title').value=value;
      return value;
    }

    //Function for the attribute creation menu normalising the attribute name
    function verifyValueType(categoryTitle,hash){
      console.log(categoryTitle);

      console.log("hash: ");
      console.log(hash);

      console.log("gon.categoryattributes: ");
      console.log(gon.categoryattributes);
      
      var categoryAttributesDiv=document.getElementById('categoryAttributesDiv');
      console.log(categoryAttributesDiv);
      var categoriesAttributesText=categoryAttributesDiv.attributes[2].textContent;
      console.log(categoriesAttributesText);
      var categoryAttributesHash=JSON && JSON.parse(categoriesAttributesText) || $.parseJSON(categoriesAttributesText);
      console.log(categoryAttributesHash);

      var val, i;
      var elms=document.getElementsByClassName('attribute_input_field');

      for (i = 0; i < elms.length; i++) {
        val=elms[i].value;
        val=val.replace(/[ ]+/g, "_");
        val=val.replace(/[\-]+/g, "_"); //Hyphen is allowed but not accepted by all the parsers

        if(val.match(/^[^a-zA-Z_]+(.+)$/)!=null){
          val=val.match(/^[^a-zA-Z_]+(.+)$/)[1]; //An attribute name can only begin with a letter or an underscore
        }
        val=val.replace(/[^a-zA-Z0-9_\.]+/g, "");

        //The values can't be longer than 255
        if(val.length>250){
          val=val.substr(0,250);
          console.log(">250      "+val);
        }



        elms[i].value = val; 
      }

      return;
    }

    //Function for the attribute values creation menu normalising the values names
    function verifyValueType2(){
      var val, i;
      var elms=document.getElementsByClassName('attribute_value_input_field');

      for (i = 0; i < elms.length; i++) {
        val=elms[i].value;
        elms[i].value = val.replace(/[<&"'>]+/g, "_");
      }

      return;
    }


    //Functions for the attribute values menu
    var previousAttrId=null;

    //Show the menu for the chosen attribute in the attributes values popup
    function showAttributeValues(attributeId){
      if(previousAttrId!=null){
        $("#show_attribute_values"+previousAttrId).removeClass('show_attribute_values_active');
        $("#show_attribute_values"+previousAttrId).addClass('show_attribute_values');
        $("#one_attribute_div_"+previousAttrId).hide();
        $("#big_new_values_div_"+previousAttrId).hide();
        $("#allow_input_div_"+previousAttrId).hide();
      }
      previousAttrId=attributeId;
      $("#show_attribute_values"+previousAttrId).removeClass('show_attribute_values');
      $("#show_attribute_values"+attributeId).addClass('show_attribute_values_active');
      $("#one_attribute_div_"+attributeId).show();
      $("#big_new_values_div_"+attributeId).show();
      $("#allow_input_div_"+attributeId).show();

      return false;
    }

    var previousSeqAttrId=null;
    var activeValueId=null;

    //Show possible values of the chosen attribute in the sequences menu
    function showSeqAttrValues(attributeId){
      if(previousSeqAttrId!=null){
        $("#set_initial_div_"+previousSeqAttrId).hide();
        $("#seq_attr_name_button"+previousSeqAttrId).removeClass('seq_attr_name_button_active');
        $("#seq_attr_name_button"+previousSeqAttrId).addClass('seq_attr_name_button');
        $("#seq_one_attribute_div_"+previousSeqAttrId).hide();
      }
      previousSeqAttrId=attributeId;

      $("#set_initial_div_"+attributeId).show();

      $("#seq_attr_name_button"+attributeId).removeClass('seq_attr_name_button');
      $("#seq_attr_name_button"+attributeId).addClass('seq_attr_name_button_active');
      $("#seq_one_attribute_div_"+attributeId).show();

      $("#possible_consequent_attrs_div").hide();
      activeValueId=null;

      return false;
    }

    //Delete an existing value of the chosen attribute
    function deleteAttributeValue(attributeValueid,attributeId){
      var html = "<input type='hidden' name='delete_attribute_value[]' value='"+attributeValueid+"'>";
      $('#one_attribute_div_'+attributeId).append(html);
      document.getElementById("delete_attribute_value_"+attributeValueid).disabled=true;

    }

    //Create a new value of the chosen attribute
    function addAttributeValue(attributeId){
      var html = '<input name="add_attribute_value['+attributeId+'][]" class="attribute_value_input_field" type="text"><br>';
      $('#new_values_div_'+attributeId).append(html);
    }

    
    function deleteAttribute(attributeId){
      console.log("in deleteAttribute");
      var html = "<input type='hidden' name='delete_attribute[]' value='"+attributeId+"'>";
      $('#hidden').append(html);
      document.getElementById("delete_attribute_"+attributeId).disabled=true;

    }

    var previousvalueId=null;
    //Sequences functions
    function activateSequence(valueId){
      if (previousvalueId!=null){
        $("#sequences_of_value_"+previousvalueId).hide();
        $("#title_of_value_"+previousvalueId).hide();
      }
      $("#title_of_value_"+valueId).show();
      $("#sequences_of_value_"+valueId).show();
      $("#possible_consequent_attrs_div").show();
      activeValueId=valueId;
      previousvalueId=valueId;

      return false;
    }


    function addToValueSequences(attributeId){
      var attributeName=$("#seq_attr_name_button"+attributeId).html();
      var sequenceButton='<button type="button" id="button_'+activeValueId+'_'+attributeId+'" oncĺick="deleteSequenceFromAttrValue('+activeValueId+','+attributeId+')">'+attributeName+'</button>';
      console.log("sequenceButton: "+sequenceButton);
      //Add the values to a hidden input form field
      var newInput='<input type="hidden" id="seq_'+activeValueId+'_'+attributeId+'" name="seq['+activeValueId+'][]" value="'+attributeId+'"/>';
      $("#sequences").append(newInput);

      $("#sequences_of_value_"+activeValueId).append(sequenceButton);
      return false;
    }

    //Delete the values from the hidden input form field
    function deleteSequenceFromAttrValue(activeValueId,attributeId){
      console.log("activeValueId: "+activeValueId);
      //console.log("attributeId: "+attributeId);
      //var element=document.getElementById("seq_"+activeValueId+"_"+attributeId);
      //var par=element.parentNode;
      //par.removeChild(element);
      //var el=document.getElementById("button_"+activeValueId+"_"+attributeId);
      //var para=el.parentNode;
      //para.removeChild(el);
      //return false;
    }

    function beforeSubmitSequences(){
     
    }

    
