.columns
  article.maincol
    -if @search_string.present?
      h2 =="Search for #{@search_string}"

    -if @pages.size == 0
      .nodata
        h4.nodata_title No pages found
        p.nodata_text We were unable to find any pages matching your request
    -else
      -work_title = nil
      -for page in @pages
        -old_work_title = work_title
        -work_title = page.work.title
        -if !@work && work_title != old_work_title
          h3 =work_title

        .work-page
          .work-page_thumbnail
            -if page.ia_leaf
              =link_to(image_tag(page.ia_leaf.thumb_url), page_params(page) )
            -elsif page.sc_canvas
              =link_to(image_tag(page.sc_canvas.thumbnail_url), page_params(page))
            -elsif page.omeka_file
              =link_to image_tag(page.omeka_file.thumbnail_url), page_params(page)
            -else
              =link_to image_tag(file_to_url(page.thumbnail_image)), page_params(page)

          .work-page_content
            -if page.work.pages_are_meaningful
              h4.work-page_title =link_to page.title, page_params(page)

            .work-page_text
              -transcription = xml_to_html(page.xml_text, false)
              -if current_user
                -action = page_params(page).merge({ :controller => 'transcribe'})
              -else
                -action = page_params(page).merge({ :controller => 'transcribe', :action => 'guest'})
              -if page.status == 'blank'
                p.nodata_text =="This page is blank"
              -elsif transcription.present?
                ==transcription.force_encoding('utf-8')
              -else
                -if page.work.ocr_correction
                  -status = 'corrected'
                  -help = link_to('help correct', action)
                -else
                  -status = 'transcribed'
                  -help = link_to('help transcribe', action)
                p.nodata_text =="This page is not #{status}, please #{help} this page"

            -if page.work.supports_translation
              button.outline.work-page_toggle-view Translation
              .work-page_text(style="display:none")
                -translation = xml_to_html(page.xml_translation, false)
                -if page.translation_status == 'blank'
                  p.nodata_text =="This page is blank"
                -elsif translation.present?
                  ==translation.force_encoding('utf-8')
                -else
                  -help_translate = link_to('help translate', page_params(page).merge({ :controller => 'transcribe', :action => 'translate'}))
                  p.nodata_text =="This page is not translated, please #{help_translate} this page"

            -current_version = page.page_versions[0]
            -if current_version && current_version.page_version > 0
              small.work-page_edited
                -user_link = link_to(current_version.user.display_name, { :controller => 'user', :action => 'profile', :user_id => current_version.user.id })
                -edit_time = distance_of_time_in_words(current_version.created_on, Time.now, include_seconds: true)
                =="Last edit #{edit_time} ago by #{user_link}"

      =render(:partial => 'shared/pagination', :locals => { :model => @pages, :entries_info => true })

  -if @collection || @article
    aside.sidecol

      -if @collection
        =form_tag({:controller => 'display', :action => 'search'}, :method => :get, class: 'collection-search') do
          =hidden_field_tag('collection_id', @collection.id)
          =search_field_tag 'search_string', @search_string, :placeholder => 'Search in collection...'
          </br>
          =check_box_tag 'whole_word','1', (@whole_word=="1" ? 'checked' : nil)
          | &nbsp;
          whole word
          </br>
          </br>
          =check_box_tag 'in_transc','1', (@in_transc=="1" ? 'checked' : nil), 'onclick': "uncheckIncompatible(this)"
          | &nbsp;
          search in transcriptions including tags
          =check_box_tag 'in_transc','1', (@in_transc=="1" ? 'checked' : nil), 'onclick': "uncheckIncompatible(this)"
          </br>
          </br>
          =check_box_tag 'in_text','1', (@in_text=="1" ? 'checked' : nil), 'onclick': "uncheckIncompatible(this)"
          | &nbsp;
          search in transcriptions excluding tags
          </br>
          </br>Search in header category values
          -@headercategories.each do |hc|
            </br>#{hc[1]}
            =check_box_tag "header_cat[]", ["#{hc[0]}","#{hc[1]}"], ("#{hc[2]}"=="1" ? 'checked' : nil), 'onclick': "uncheckIncompatible(this)"
            | &nbsp; #{hc[1]}
            
          =button_tag 'Search'

      -if @work
        -if @total != @count
          =button_to "View All Pages", {action: "read_work", work_id: @work.id}
        -else
          =button_to "Pages That Need Review", {action: "read_work", work_id: @work.id, needs_review: 'review'}
          br
          -if @work.supports_translation
            =button_to "Translations That Need Review", {action: "read_work", work_id: @work.id, translation_review: 'review'}
          


      -if @article
        h4 =@article.title
        -if @article.xml_text != nil && !@article.xml_text.empty?
          =raw(xml_to_html(@article.xml_text))
        =render :partial => 'article/article_links'

      -if @collection && @collection.categories.present?
        -unless @collection.subjects_disabled
          h3 Categories
          .category-tree
            ==display_categories(@collection.categories, nil, true) do |category|
              -link_url = url_for(:controller => 'article', :action => 'list', :collection_id => @collection.id, :anchor => "category-#{category.id}")
              -ret = "<a href=\"#{link_url}\" class=\"tree-item\">"
              -if category.children.any?
                -ret << "<span class=\"tree-bullet\"></span>"
              -ret << "<span>#{category.title}</span>"
              -ret << "</a>"

-content_for :javascript
  javascript:
    $(function() {
      $('.work-page_toggle-view').on('click', function() {
        var button = $(this);
        button.toggleClass('pressed');
        $('.work-page_text', button.parent()).toggle();
      });
    });
