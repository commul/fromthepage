=render({ :partial => '/shared/page_tabs', :locals => { :selected => 3, :page_id => @page.id }})

-editor_class = 'page-editor' + (@auto_fullscreen == 'yes' ? ' fullscreen' : '')

=form_for(@page, :remote=> true, :url => { :action => 'save_transcription'}, :html => { class: editor_class }) do |f|
  =hidden_field_tag(:page_id, @page.id)
  <input type="hidden" name="page[source_text]"/>
  <input type="hidden" name="page[header_text]"/>
  <input type="hidden" name="page[use_advanced_mode]"/>
  <input type="hidden" name="page[finished]"/>
  =validation_summary @page.errors
  .page-toolbar
    .toolbar

      .toolbar_group
        a.button.outline(data-fullscreen-toggle) Fullscreen
      .toolbar_group
        -layout_modes = { 'ltr' => 'Image at the left', 'rtl' => 'Image at the right', 'ttb' => 'Image at the top', 'btt' => 'Image at the bottom' }
        dl.dropdown.page-columns-layout(data-dropdown='{ "selectable": true }')
          dt.button.outline
            =svg_symbol "#icon-layout-#{@layout_mode}", class: 'icon'
            span.hide-l =layout_modes[@layout_mode]
          dd
            -layout_modes.each do |mode, text|
              a(data-layout-set="#{mode}")
                =svg_symbol "#icon-layout-#{mode}", class: 'icon'
                span =text
      .toolbar_group.hide-m
        label.auto-fullscreen
          =check_box_tag 'auto-fullscreen', 'yes', @auto_fullscreen == 'yes'
          |&nbsp;
          span Always show in fullscreen

      .toolbar_group.w100.aright
        -unless @page.status == 'blank'
          span Mark page as blank
          |&nbsp;
          =check_box_tag 'mark_blank', 'yes'
        -else
          span Page is not blank
          |&nbsp;
          =check_box_tag 'mark_blank', 'no'
      .toolbar_group.w100.aright
        span Page Needs Review
        |&nbsp;
        -if @page.status == 'review'
          =f.check_box('needs_review', {checked: true})
        -else
          =f.check_box('needs_review', {checked: false})
      .toolbar_group.w100.aright
        =button_tag 'Save Changes', :name => 'save'


  .page-columns(data-layout-mode="#{@layout_mode}" data-fullheight='{ "bottom": 30, "cssrule": "height" }')
    .page-column
      .page-imagescan
        -if @page.ia_leaf
          =render :partial => '/ia/ia_bookreader_div'
        -elsif @page.sc_canvas
          =render :partial => '/shared/iiif_div'
        -elsif @page.omeka_file
          =render :partial => '/shared/zoom_div', :locals => { :fullsize_url => @page.omeka_file.fullsize_url }
        -else
          =render :partial => '/shared/zoom_div'
    .page-column
      -if @page.status == 'blank'
        .centered
          .centered_content
            p.nodata_text=="This page is marked blank"
        .page-editarea(style=("display:none"))
          =f.text_area :source_text

      -else
        .page-column_actions
          -unless @preview_xml
            =>button_tag 'Preview', :name => 'preview'
          -else
            =>button_tag 'Edit', :name => 'edit'
          -unless @collection.subjects_disabled
            =>button_tag 'Autolink', :name => 'autolink'
        -if @preview_xml
          .page-preview ==xml_to_html(@preview_xml)

        .page-editarea(style=("display:none" if @preview_xml))
          -if @work.scribes_can_edit_titles
            .page-editarea_title
              span =f.label :title, 'Title:', class: 'a50'
              span =f.text_field :title
          .card*{'id'=>'page_source_text', 'contenteditable'=>'true'}
            = @page.source_text

<div id="headerCategories">
  <table id="tableHeaderCat">
  - if @headerCatsHash!=nil
    - @headerCatsHash.each do |c, array|  
      <tr class="trHeaderCat">
        <td class="headerCatLabelTd"><label for ="#{c}" class="labelHeaderCat">#{array[0]}</label></td>
          - existsDefault=0
          - defaultValue=""
          - if array.length==6
            - if array[5].length>1
              <td><select id="#{array[0]}" onchange="putValueInInputField(this)">
                - if array[2]==0
                  <option name="#{array[0]}" value=""  id="#{array[0]}_empty" class="inputHeaderCatOpt" data-categoryid=c selected></option>
                - array[5].each do |valId, valArray|
                  - if valArray[1].to_i==1
                    - existsDefault=1
                    - defaultValue=valArray[0]
                  <option name="#{array[0]}" value="#{valArray[0]}"  id="#{valId}" class="inputHeaderCatOpt" data-categoryid=c "#{valArray[1].to_i==1 ? 'selected':nil}">#{valArray[0]}</option>
              </select>
              </td>
            - if array[5].length==1
              - array[5].each do |valId, valArray|
                - if valArray[1].to_i==1
                  - existsDefault=1
                  - defaultValue=valArray[0]
                -if array[1].to_i==0
                  <td><input id="input_#{array[0]}" name="#{array[0]}" class="inputHeaderCatInp unchangeableInput" type="text" data-only="#{array[3]}" data-length="#{array[4]}" value="#{valArray[0]}" readonly></input></td>
                -else
                  <td>
                    <select id="#{array[0]}" onchange="putValueInInputField(this)">
                      <option value=""></option>
                      <option name="#{array[0]}" value="#{valArray[0]}" id="#{valId}" class="inputHeaderCatOpt" data-categoryid=c "#{valArray[1].to_i==1 ? 'selected':nil}">#{valArray[0]}</option>
                    </select>
                  </td>

            -if array[1].to_i==1
              <td>
                -if existsDefault==1
                  <input id="input_#{array[0]}" name="#{array[0]}" class="inputHeaderCatInp" type="text" data-only="#{array[3]}" data-length="#{array[4]}" value="#{defaultValue}"></input>
                -else
                  <input id="input_#{array[0]}" name="#{array[0]}" class="inputHeaderCatInp" type="text"></input>
              </td>
            -else
              <td></td>
          - else
            -if array[1].to_i==1
              <td>
                -if existsDefault==1
                  <input id="input_#{array[0]}" name="#{array[0]}" class="inputHeaderCatInp" type="text" data-only="#{array[3]}" data-length="#{array[4]}" value="#{defaultValue}"></input>
                -else
                  <input id="input_#{array[0]}" name="#{array[0]}" class="inputHeaderCatInp" type="text" data-only="#{array[3]}" data-length="#{array[4]}"></input>
              </td>
            -else
              <td></td>
      </tr>
  </table>
</div>

<div class="popupBody" id="popupBody" style="display:none;">
<button type="button" class="hide_popup_small" id="hidePopupBody">&#9932;</button>
<select class="chosen-select-no-results" data-placeholder="Choose a category">
  option[ value="" ] = ""
  - if @categories!=nil
    - if @categories.length > 0
      - @categories.each do |c|
        option[ value="#{c.title}_id#{c.id}" data-categoryid=c.id ] =c.title
</select>
</div>

<div class="popupBody2" id="popupBody2" style="display:none;">
<button type="button" class="hide_popup_small" id="hidePopupBody2">&#9932;</button>
<select class="chosen-select-no-results2" data-placeholder="Choose a category">
  option[ value="" ] = ""
  - if @categories!=nil
    - if @categories.length > 0
      - @categories.each do |c|
        option[ value="#{c.title}_id#{c.id}" data-categoryid=c.id ] =c.title
</select>
</div>


<div class="popupBodyAdv" id="popupBodyAdv" style="display:none;">
<button type="button" class="hide_popup_small" title="Alt+R" id="hidePopupBodyAdv">&#9932;</button>
<select class="chosen-adv" data-placeholder="Choose a category">
  option[ value="" ] = ""
  - if @categoriesAdv!=nil
    - if @categoriesAdv.length > 0
      - @categoriesAdv.each do |c|
        option[ value="#{c.title}_id#{c.id}" data-categoryid=c.id ] =c.title
</select>
</div>

<div class="popupBodyAdv2" id="popupBodyAdv2" style="display:none;">
<button type="button" class="hide_popup_small" title="" id="hidePopupBodyAdv2">&#9932;</button>
<select class="chosen-adv2" data-placeholder="Choose a category">
  option[ value="" ] = ""
  - if @categoriesAdv!=nil
    - if @categoriesAdv.length > 0
      - @categoriesAdv.each do |c|
        option[ value="#{c.title}_id#{c.id}" data-categoryid=c.id ] =c.title
</select>
</div>

<div id="newDropdownDiv" style="display:none;">
  <!--<button type="button" class="hide_popup_new" title="Alt+R" id="hideNewDropdownDiv" onclick="hideNewDropdownDiv();">&#9932;</button>-->
  <button type="button" class="hide_popup_new" title="" id="hideNewDropdownDiv">&#9932;</button>
  <div class="select_a_tag" id="select_a_tag"></div>
  <input id="user-type-input" type="text" placeholder="Type the new value" name="user-type-input-name" style="display:none;" autofocus></input>
  <input id="select-type-input" type="text"></input>
  <select id="chosen-select-type">
  </select>
</div>

<div id="deletion_div" style="display:none;">
</div>

<div id="change_div" style="display:none;">
</div>

<div id="change_selected_div" style="display:none;">
</div>

<div id="final_button_div">
  <button type="button" id="transcription_finished">Transcription finished</button>
</div>

<div id="use_advanced_mode_div">
  <label for="use_advanced_mode" id="use_advanced_mode_label">Advanced mode</label>
  =check_box_tag 'use_advanced_mode', @use_advanced_mode, (@use_advanced_mode=='1' ? 'checked' : nil)
</div>

<div id="changeHotkeysMenu" style="display:none;">
  <button type="button" class="hide_popup_changekeys">&#9932;</button>
  <div id="changeHotkeysTitle">Change hot keys</div>  
  <div id="changeHotKeysInternal"></div>
  <button type="button" id="changeHotKeys">Change hot keys</button>
</div>

<div id="changeSavingTimeMenu" style="display:none;">
  <button type="button" id="hide_popup_changetime">&#9932;</button>
  <div id="changeTimeTitle">Change transcription saving frequency</div>  
  <div id="changeSavingTimeInternal">
    <input type="text" id="input_time" class="savingTimeInput" maxlength="2"></input>minutes
  </div>
  <button type="button" id="changeSavingTimeButton">Change</button>
</div>


style #{@buttonsStyles}

div [ id="verticalMediumClickableSpans" ]
  table
    tr
      td [ class="overMediumButtonTD" ]
        <span title="undo" class="undo">&#8630;</span>
    tr
      td [ class="overMediumButtonTD" ]
        <span  title="delete tag(s) at cursor position" class="delete_tag">&#9932;</span>
    tr
      td [ class="overMediumButtonTD" ]
        <span  title="change tag(s) at cursor position" class="change_tag">&#11156;</span>
    tr
      td [ class="overMediumButtonTD" ]
        <span  title="insert lower double quotes at cursor position" class="insert_lower_quote">&#8222;</span>
        <span  title="insert upper double quotes at cursor position" class="insert_upper_quote">&#8221;</span>
    - if @categories!=nil
      - @categories.each do |c|
        tr
          td [ class="overMediumButtonTD" ]
            button[ class="button-#{c.title}_id#{c.id}" class="category_button" data-categoryid=c.id onMouseDown="transcriptionModule.buttonClickFunction('#{c.id}', '#{c.title}',this)"] = c.title
    tr
      td [ class="overMediumButtonTD" ]
        <span title="change hot keys" class="show_change_hotkeys">&#9911;</span>
    tr
      td [ class="overMediumButtonTD" ]
        <span title="change transcription saving frequency" class="show_saving_time">&#8987;</span>

div [ id="verticalMediumClickableSpansAdv" ]
  table
    tr
      td [ class="overMediumButtonTD" ]
        <span title="undo" class="undo">&#8630;</span>
    tr
      td [ class="overMediumButtonTD" ]
        <span  title="delete tag(s) at cursor position" class="delete_tag">&#9932;</span>
    tr
      td [ class="overMediumButtonTD" ]
        <span  title="change tag(s) at cursor position" class="change_tag">&#11156;</span>
    tr
      td [ class="overMediumButtonTD" ]
        <span  title="insert lower double quotes at cursor position" class="insert_lower_quote">&#8222;</span>
        <span  title="insert upper double quotes at cursor position" class="insert_upper_quote">&#8221;</span>
    - if @categoriesAdv!=nil
      - @categoriesAdv.each do |c|
        tr
          td [ class="overMediumButtonTD" ]
            button[ class="button-#{c.title}_id#{c.id}" class="category_button" data-categoryid=c.id onMouseDown="transcriptionModule.buttonClickFunction('#{c.id}', '#{c.title}',this)" ] = c.title
    tr
      td [ class="overMediumButtonTD" ]
        <span title="change hot keys" class="show_change_hotkeys">&#9911;</span>
    tr
      td [ class="overMediumButtonTD" ]
        <span title="change transcription saving frequency" class="show_saving_time">&#8987;</span>

.fgfaded ==@work.set_transcription_conventions

.fgfaded
  =render :partial => 'shared/markup_help'

h2.legend Page Notes
.page-notes
  =render :partial => "notes/notes"


.categoryTypesDiv*{'id'=>'categoryTypesDiv', 'data'=>"#{@categoryTypesHash}"}
.categoryTypesDivAdv*{'id'=>'categoryTypesDivAdv', 'data'=>"#{@categoryTypesHashAdv}"}
.initialAttrIds*{'id'=>'initialAttrIds', 'data'=>"#{@initialAttrIds}"}


script type="text/javascript" src=asset_path("transcription_module_init.js")
/!script type="text/javascript" src="transcription_module_init.js"

-content_for :javascript
  javascript:
    $(function() {
      $('[data-fullscreen-toggle]').on('click', function() {
        $(this).toggleClass('pressed');
        $('.page-editor').toggleClass('fullscreen');
        $(window).trigger('resize.FullHeight');
        $('.zoomer-container').zoomer('resize');
      });
      $('[data-layout-set]').on('click', function() {
        var mode = $(this).data('layout-set');
        Cookies.set('transcribe_layout_mode', mode, { expires: 365 });
        $('[data-layout-mode]').attr('data-layout-mode', mode);
        $('.zoomer-container').zoomer('resize');
      });
      $('#auto-fullscreen').on('change', function() {
        var checked = this.checked ? 'yes' : 'no';
        Cookies.set('auto_fullscreen', checked, { expires: 365 });
      });

    });



    
javascript:  mixpanel.track("Transcribe Page");

