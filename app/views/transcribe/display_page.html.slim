=render({ :partial => '/shared/page_tabs', :locals => { :selected => 3, :page_id => @page.id }})

-editor_class = 'page-editor' + (@auto_fullscreen == 'yes' ? ' fullscreen' : '')

=form_for(@page, :url => { :action => 'save_transcription' }, :html => { class: editor_class, :onsubmit=>'return AddMediumValue()' }) do |f|
  =hidden_field_tag(:page_id, @page.id)
  <input type="hidden" name="page[source_text]"/>
  =validation_summary @page.errors
  .page-toolbar
    .toolbar

      .toolbar_group
        a.button.outline(data-fullscreen-toggle) Fullscreen
      .toolbar_group
        -layout_modes = { 'ltr' => 'Image at the left', 'rtl' => 'Image at the right', 'ttb' => 'Image at the top', 'btt' => 'Image at the bottom' }
        dl.dropdown.page-columns-layout(data-dropdown='{ "selectable": true }')
          dt.button.outline
            =svg_symbol "#icon-layout-#{@layout_mode}", class: 'icon'
            span.hide-l =layout_modes[@layout_mode]
          dd
            -layout_modes.each do |mode, text|
              a(data-layout-set="#{mode}")
                =svg_symbol "#icon-layout-#{mode}", class: 'icon'
                span =text
      .toolbar_group.hide-m
        label.auto-fullscreen
          =check_box_tag 'auto-fullscreen', 'yes', @auto_fullscreen == 'yes'
          |&nbsp;
          span Always show in fullscreen

      .toolbar_group.w100.aright
        -unless @page.status == 'blank'
          span Mark page as blank
          |&nbsp;
          =check_box_tag 'mark_blank', 'yes'
        -else
          span Page is not blank
          |&nbsp;
          =check_box_tag 'mark_blank', 'no'
      .toolbar_group.w100.aright
        span Page Needs Review
        |&nbsp;
        -if @page.status == 'review'
          =f.check_box('needs_review', {checked: true})
        -else
          =f.check_box('needs_review', {checked: false})
      .toolbar_group.w100.aright
        =button_tag 'Save Changes', :name => 'save'


  .page-columns(data-layout-mode="#{@layout_mode}" data-fullheight='{ "bottom": 30, "cssrule": "height" }')
    .page-column
      .page-imagescan
        -if @page.ia_leaf
          =render :partial => '/ia/ia_bookreader_div'
        -elsif @page.sc_canvas
          =render :partial => '/shared/iiif_div'
        -elsif @page.omeka_file
          =render :partial => '/shared/zoom_div', :locals => { :fullsize_url => @page.omeka_file.fullsize_url }
        -else
          =render :partial => '/shared/zoom_div'
    .page-column
      -if @page.status == 'blank'
        .centered
          .centered_content
            p.nodata_text=="This page is marked blank"
        .page-editarea(style=("display:none"))
          =f.text_area :source_text

      -else
        .page-column_actions
          -unless @preview_xml
            =>button_tag 'Preview', :name => 'preview'
          -else
            =>button_tag 'Edit', :name => 'edit'
          -unless @collection.subjects_disabled
            =>button_tag 'Autolink', :name => 'autolink'
        -if @preview_xml
          .page-preview ==xml_to_html(@preview_xml)

        .page-editarea(style=("display:none" if @preview_xml))
          -if @work.scribes_can_edit_titles
            .page-editarea_title
              span =f.label :title, 'Title:', class: 'a50'
              span =f.text_field :title
          .card*{'id'=>'page_source_text', 'contenteditable'=>'true'}
            = @page.source_text

<div class="popupBody">
<p>Select a tag:</p>
<select class="chosen-select-no-results">
  option[ value="" ] = ""
  - @categories.each do |c|
    option[ value=c.title data-categoryid=c.id ] =c.title
</select>
</div>

<div class="popupBody2">
<p>Select a tag:</p>
<select class="chosen-select-no-results2">
  option[ value="" ] = ""
  - @categories.each do |c|
    option[ value=c.title data-categoryid=c.id ] =c.title
</select>
</div>

<div id="newDropdownDiv">
  <input id="select-type-input" type="text" placeholder="Select the category type"></input>
  <select id="chosen-select-type">
  </select>
</div>

<span class="undo">undo</span>
div [ id="mediumClickableSpans" ]
  - @categories.each do |c|
    span[ class="button-#{c.title}" data-categoryid=c.id ] = c.title

table
  tr
    td [ class="overMediumButtonTD" ]
      <span class="undo">undo</span>
  - @categories.each do |c|
    tr
      td [ class="overMediumButtonTD" ]
        span[ class="button-#{c.title}" data-categoryid=c.id ] = c.title



.fgfaded ==@work.set_transcription_conventions

.fgfaded
  =render :partial => 'shared/markup_help'

h2.legend Page Notes
.page-notes
  =render :partial => "notes/notes"


.categoryTypesDiv*{'id'=>'categoryTypesDiv', 'data'=>"#{@categoryTypesHash}"}

-content_for :javascript
  javascript:
    $(function() {
      $('[data-fullscreen-toggle]').on('click', function() {
        $(this).toggleClass('pressed');
        $('.page-editor').toggleClass('fullscreen');
        $(window).trigger('resize.FullHeight');
        $('.zoomer-container').zoomer('resize');
      });
      $('[data-layout-set]').on('click', function() {
        var mode = $(this).data('layout-set');
        Cookies.set('transcribe_layout_mode', mode, { expires: 365 });
        $('[data-layout-mode]').attr('data-layout-mode', mode);
        $('.zoomer-container').zoomer('resize');
      });
      $('#auto-fullscreen').on('change', function() {
        var checked = this.checked ? 'yes' : 'no';
        Cookies.set('auto_fullscreen', checked, { expires: 365 });
      });

    });


    
    var categoryTypesDiv=document.getElementById('categoryTypesDiv');
    var categoriesText=categoryTypesDiv.attributes[2].textContent;
    var categoryTypesHash=JSON && JSON.parse(categoriesText) || $.parseJSON(categoriesText);   

    var offset,focusEl,anchorNode,beginningOfSelection, selection, enableChosen, options, categoryid, whereToPut, newDropdown, categoryTypesTable, i, typedata, optionType, tagWithType, type, varTag, newType, notCollapsedArgsTable;
      
    var l=document.getElementById('page_source_text');
    console.log("l : "+l);
    console.log("l.textContent : "+l.textContent);

    var xml=l.textContent;
    //xml = xml.replace(/<br><\/br>/g, '<br>'); // Esli dobavliaiu eto, to oshibka parsinga
    console.log("xml : "+xml);
    xml = "<div id=\"bigDiv\">"+xml+"</div>";
    xml = xml.replace(/<\/br>/g, '');  // Esli dobavliaiu eto, to oshibka parsinga i voobshe nichego ne pokazyvaet v Transcribe
    //xml = xml.replace(/&nbsp\;/g, '');

    var parser = new DOMParser();
    var doc = parser.parseFromString(xml, "text/html");
    //var doc = parser.parseFromString(xml, "text/xml");
    var allDocContent=doc.childNodes[0];

    var article=l;
    var firstChild=article.firstChild;
    firstChild.parentNode.replaceChild(allDocContent,firstChild);

    var closingElement=article.getElementsByTagName('closing')[0];

    var container = article.parentNode;

    var medium = new Medium({
      element: article,
      mode: Medium.richMode,
      attributes: null,
      placeholder:"",
      tags: null,
      pasteAsText: false
    });
       

    $(".popupBody").hide();
    $(".popupBody2").hide();
    $("#newDropdownDiv").hide();

      
    var config = {
      '.chosen-select-no-results': {width:"95%"},
      '.chosen-select-no-results2': {width:"95%"}
    }

    for (var selector in config) {
      $(selector).chosen(config[selector]);
    }
    

    $(".chosen-select-no-results").chosen();
    $(".chosen-select-no-results2").chosen();
      
    jQuery.fn.chosen_reset = function(n){
      $(this).chosen('destroy');
      $(this).prop('selectedIndex', 0);
      $(this).chosen(n)
    }

    //Go out of the current tag
    jQuery('#page_source_text').bind('keydown', 'alt+x', function(e) {
      offset=medium.returnOffset()[0];
      focusEl=medium.returnOffset()[1];

      if(focusEl.parentNode.id!="page_source_text" && focusEl.parentNode.id!="bigDiv"){
        medium.focus();
        medium.focusNadya(offset,focusEl);
        medium.cursorAfterTag(focusEl);
        console.log("medium.value() : "+medium.value());
        return false;
      }
              
      console.log("medium.value() : "+medium.value());

      return false;

    });

    jQuery('#page_source_text').bind('keydown', 'alt+y', function(e) {

      var m = medium.value();
      console.log(m);
      m = m.replace(/\&nbsp\;/g, '\&#160\;');
      m = m.replace(/<br>(?!\<)/g, "<br></br>");
      m = m.replace(/<br><br>/g, '<br>');
      console.log(m);
      return false;

    });



    //If the user types text in the input field of the category type select box in order to select one of the options
    jQuery.fn.filterByText = function(textbox, medium, varTag, focusOffset,focusNode, notCollapsedArgsTable) {
      var option;
      var select;
      var options;
      var options2;
      var search;
      var regex;

      return this.each(function() {
        select = this;
        options = [];
        $(select).find('option').each(function() {
          options.push({value: $(this).val(), text: $(this).text()});
        });
        $(select).data('options', options);

        $(textbox).off().on('change keyup', function(e) {
        //$(textbox).bind('change keyup', function(e) {
          options2 = $(select).empty().data('options');
          search = $.trim($(this).val());
          if(search!=null && search!=""){
            regex = new RegExp("^"+search,"gi");

            $.each(options2, function(i) {
              option = options2[i];
              if(option.value!="" && option.value.match(regex) !== null) {
                $(select).append(
                  $('<option>').text(option.text).val(option.value)
                );

                //If the user presses enter
                if (e.which == 13) {
                  if(notCollapsedArgsTable==null){
                    addCategoryWithType (medium, varTag, option.value, focusOffset,focusNode)
                  }else{
                    $("#newDropdownDiv").hide();
                    $("#select-type-input").hide();
                    $("#select-type-input")[0].value="";
                    $('#chosen-select-type').empty();
                    medium.tagSelection2(varTag, option.value, notCollapsedArgsTable[0], focusNode, notCollapsedArgsTable[1], focusOffset);
                    aNode=null;
                    fNode=null;
                  }
                }
              }
            });
          }
        });
      });
    };



    function addCategoryWithType (medium, varTag, newType, focusOffset,focusNode) {
      setTimeout(function(){
        $("#newDropdownDiv").hide();

        medium.focus();

        d = new Date();
        milliseconds = d.getTime();
        tagCode=milliseconds.toString();

        tagWithType='<'+varTag+' tagcode="'+tagCode+'" class="medium-'+varTag+'" type="'+newType+'"></'+varTag+'>';


        medium.focusNadya(focusOffset,focusNode);
        medium.insertHtmlNadya(tagWithType, focusOffset, focusNode);
        tagWithType='';

        $('#chosen-select-type').empty();
        console.log("medium.value() : "+medium.value());

        return false;
      }, 100);
    }


    function tagSelectionWithType (categoryid, categoryTypesHash, medium, varTag, focusOffset,focusNode, notCollapsedArgsTable){
      categoryTypesTable=categoryTypesHash[categoryid];

                //Create the new dropdown menu for category types
                newDropdown=addNewDropdown();

                for(i=0; i< categoryTypesTable.length; i++){
                  //Add an option for the category types dropdown menu
                  addAnOption(newDropdown,categoryTypesTable[i]);

                  if(i==(categoryTypesTable.length-1)){

                    $("#newDropdownDiv").show();
                      $('#select-type-input').show();
                    $('#select-type-input').focus();
                    $('#chosen-select-type').filterByText($('#select-type-input'), medium, varTag, focusOffset,focusNode, notCollapsedArgsTable);

                    $("#chosen-select-type").off().change(function(event5){                        
                       $("#select-type-input").hide();
                        $("#select-type-input")[0].value=""; 
                      if(event5.target == this){
                        type=$(this).val();
                        if(type!=null && type!=''){
                          newType=type;
                          type='';
                          console.log("newType: "+newType);
                          medium.tagSelection2(varTag, newType, anchorNode,focusNode,anchorOffset, focusOffset);

                          $("#newDropdownDiv").hide();
                          $("#select-type-input").hide();
                          $("#select-type-input")[0].value="";
                          $('#chosen-select-type').empty();

                          console.log(medium.value());
                          return false;
                        }
                      }
                      
                    });
                  }
                }
    }

    //Create the new dropdown menu for category types
    function addNewDropdown (){
      newDropdown=document.getElementById('chosen-select-type');
      optionType=document.createElement("option");
      optionType.text="Select category type";
      optionType.value="";
      optionType.setAttribute("selected", "selected");
      newDropdown.add(optionType,newDropdown.options[null]);
      return newDropdown;
    }

    //Add an option to the dropdown menu of category types
    function addAnOption(newDropdown,typedata){
      optionType=document.createElement("option");
      optionType.text=typedata;
      optionType.value=typedata;
      newDropdown.add(optionType,newDropdown.options[null]);
    }

    //Add tag
    jQuery('#page_source_text').bind('keydown', 'alt+g', function(e) {

      [focusOffset,focusNode,anchorOffset,anchorNode]=medium.returnOffset();
      notCollapsedArgsTable=[anchorNode,anchorOffset];
      selection = window.getSelection();

      //If the cursor is in the medium, but nothing has been selected
      if(selection.isCollapsed){
        $(".popupBody").show();

        $(".chosen-select-no-results").trigger('chosen:activate');

        $(".chosen-select-no-results").chosen().change(function(event){
          if(event.target == this){
            $tag=$(this).val();
            if($tag!= null && $tag!=''){
              varTag=$tag;
              $tag='';
              options = $( ".chosen-select-no-results option:selected" );
              categoryid=options[0].attributes[1].value;
              $('.chosen-select-no-results').chosen_reset(config);
              $(".popupBody").hide();

              //If the category has types
              if(categoryid in categoryTypesHash){
                categoryTypesTable=categoryTypesHash[categoryid];

                //Create the new dropdown menu for category types
                newDropdown=addNewDropdown();

                for(i=0; i< categoryTypesTable.length; i++){
                  //Add an option for the category types dropdown menu
                  addAnOption(newDropdown,categoryTypesTable[i]);

                  if(i==(categoryTypesTable.length-1)){

                    $("#newDropdownDiv").show();
                    $('#select-type-input').show();
                    $('#select-type-input').focus();
                    $('#chosen-select-type').filterByText($('#select-type-input'), medium, varTag, focusOffset,focusNode);

                    $("#chosen-select-type").off().change(function(event3){                        
                        
                      if(event3.target == this){
                        type=$(this).val();
                        if(type!=null && type!=''){
                          newType=type;
                          type='';

                          addCategoryWithType (medium, varTag, newType, focusOffset,focusNode);

                        }
                      }
                      
                    });
                  }
                }
                  
              }else{ //If the category doesn't have types

                medium.focus();

                d = new Date();
                milliseconds = d.getTime();
                tagCode=milliseconds.toString();


                tagWithType='<'+varTag+' tagcode="'+tagCode+'" class="medium-'+varTag+'"></'+varTag+'>';

                medium.focusNadya(focusOffset,focusNode);
                medium.insertHtmlNadya(tagWithType, focusOffset, focusNode);
                tagWithType='';
                $('.chosen-select-no-results').chosen_reset(config);
                $(".popupBody").hide();
                
                console.log("medium.value() : "+medium.value());

                return false;
              
              }
            }
            return false;
          }
          return false;
        });

      }else{ //If selection is not collapsed: if something has been selected
        $(".popupBody2").show();

        $(".chosen-select-no-results2").trigger('chosen:activate');
          

        $(".chosen-select-no-results2").chosen().change(function(event4){
          if(event4.target == this){
            $tag2=$(this).val();
            if($tag2!= null && $tag2!=''){
              varTag=$tag2;
              $tag2='';
              options = $( ".chosen-select-no-results2 option:selected" );
              categoryid=options[0].attributes[1].value;
              $('.chosen-select-no-results2').chosen_reset(config);
              $(".popupBody2").hide();

              //If the category has types
              if(categoryid in categoryTypesHash){
                tagSelectionWithType(categoryid, categoryTypesHash, medium, varTag, focusOffset,focusNode, notCollapsedArgsTable);
                  
              }else{ //If the category doesn't have types

                medium.tagSelection2(varTag, "",anchorNode,focusNode,anchorOffset, focusOffset);
                console.log(medium.value());
                $('.chosen-select-no-results2').chosen_reset(config);
                $(".popupBody2").hide();
                return false;
              }
            }
            return false;
          }
          return false;
        });

      } // End if selection.isCollapsed

      return false;
    });


    article.highlight = function() {
      if (document.activeElement !== article) {
        medium.select();
      }
    };

    $( ".hyphen" ).mousedown(function() {
      d = new Date();
      article.highlight();
      medium.invokeElement('hyphen', {
        tagcode: d.getTime().toString()
      });
      return false;
    });

    $( ".closing" ).mousedown(function() {
      d = new Date();
      article.highlight();
      medium.invokeElement('closing', {
        tagcode: d.getTime().toString()
      });
      return false;
    });

    $( ".undo" ).mousedown(function() {
      medium.undo();
      return false;
    });


    function AddMediumValue() {
      mediumValue = medium.value();
      console.log(mediumValue);
      mediumValue = mediumValue.replace(/\&nbsp\;/g, '\&#160\;');
      mediumValue = mediumValue.replace(/(<br>)+/g, '<br>');
      mediumValue = mediumValue.replace(/<br>(?!\<)/g, "<br></br>");
      mediumValue = mediumValue.replace(/<div id=\"bigDiv\">/, '');
      mediumValue = mediumValue.replace(/<\/div>/, '');
      console.log(mediumValue);
      document.getElementsByName("page[source_text]")[0].value=mediumValue;
      return true;   // Returns Value
    }
   
javascript:  mixpanel.track("Transcribe Page");
