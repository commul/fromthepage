=render({ :partial => '/shared/page_tabs', :locals => { :selected => 3, :page_id => @page.id }})

-editor_class = 'page-editor' + (@auto_fullscreen == 'yes' ? ' fullscreen' : '')

=form_for(@page, :url => { :action => 'save_transcription' }, :html => { class: editor_class, :onsubmit=>'return AddMediumValue()' }) do |f|
  =hidden_field_tag(:page_id, @page.id)
  <input type="hidden" name="page[source_text]"/>
  =validation_summary @page.errors
  .page-toolbar
    .toolbar

      .toolbar_group
        a.button.outline(data-fullscreen-toggle) Fullscreen
      .toolbar_group
        -layout_modes = { 'ltr' => 'Image at the left', 'rtl' => 'Image at the right', 'ttb' => 'Image at the top', 'btt' => 'Image at the bottom' }
        dl.dropdown.page-columns-layout(data-dropdown='{ "selectable": true }')
          dt.button.outline
            =svg_symbol "#icon-layout-#{@layout_mode}", class: 'icon'
            span.hide-l =layout_modes[@layout_mode]
          dd
            -layout_modes.each do |mode, text|
              a(data-layout-set="#{mode}")
                =svg_symbol "#icon-layout-#{mode}", class: 'icon'
                span =text
      .toolbar_group.hide-m
        label.auto-fullscreen
          =check_box_tag 'auto-fullscreen', 'yes', @auto_fullscreen == 'yes'
          |&nbsp;
          span Always show in fullscreen

      .toolbar_group.w100.aright
        -unless @page.status == 'blank'
          span Mark page as blank
          |&nbsp;
          =check_box_tag 'mark_blank', 'yes'
        -else
          span Page is not blank
          |&nbsp;
          =check_box_tag 'mark_blank', 'no'
      .toolbar_group.w100.aright
        span Page Needs Review
        |&nbsp;
        -if @page.status == 'review'
          =f.check_box('needs_review', {checked: true})
        -else
          =f.check_box('needs_review', {checked: false})
      .toolbar_group.w100.aright
        =button_tag 'Save Changes', :name => 'save'


  .page-columns(data-layout-mode="#{@layout_mode}" data-fullheight='{ "bottom": 30, "cssrule": "height" }')
    .page-column
      .page-imagescan
        -if @page.ia_leaf
          =render :partial => '/ia/ia_bookreader_div'
        -elsif @page.sc_canvas
          =render :partial => '/shared/iiif_div'
        -elsif @page.omeka_file
          =render :partial => '/shared/zoom_div', :locals => { :fullsize_url => @page.omeka_file.fullsize_url }
        -else
          =render :partial => '/shared/zoom_div'
    .page-column
      -if @page.status == 'blank'
        .centered
          .centered_content
            p.nodata_text=="This page is marked blank"
        .page-editarea(style=("display:none"))
          =f.text_area :source_text

      -else
        .page-column_actions
          -unless @preview_xml
            =>button_tag 'Preview', :name => 'preview'
          -else
            =>button_tag 'Edit', :name => 'edit'
          -unless @collection.subjects_disabled
            =>button_tag 'Autolink', :name => 'autolink'
        -if @preview_xml
          .page-preview ==xml_to_html(@preview_xml)

        .page-editarea(style=("display:none" if @preview_xml))
          -if @work.scribes_can_edit_titles
            .page-editarea_title
              span =f.label :title, 'Title:', class: 'a50'
              span =f.text_field :title
          .card*{'id'=>'page_source_text', 'contenteditable'=>'true'}
            = @page.source_text

<div class="popupBody">
<select class="chosen-select-no-results" data-placeholder="Choose a category">
  option[ value="" ] = ""
  - @categories.each do |c|
    option[ value="#{c.title}-id#{c.id}" data-categoryid=c.id ] =c.title
</select>
</div>

<div class="popupBody2">
<select class="chosen-select-no-results2" data-placeholder="Choose a category">
  option[ value="" ] = ""
  - @categories.each do |c|
    option[ value="#{c.title}-id#{c.id}" data-categoryid=c.id ] =c.title
</select>
</div>

<div id="newDropdownDiv">
  <div class="select_a_tag">Select a type:</div>
  <input id="select-type-input" type="text" placeholder="Select the category type"></input>
  <select id="chosen-select-type">
  </select>
</div>

<span class="undo" style="display:none;">undo</span>
div [ id="mediumClickableSpans" ]
  - @categories.each do |c|
    span[ class="button-#{c.title}-id#{c.id}" data-categoryid=c.id ] = c.title

div [ id="verticalMediumClickableSpans" ]
  table
    tr
      td [ class="overMediumButtonTD" ]
        <span class="undo">&#8630;</span>
    - @categories.each do |c|
      tr
        td [ class="overMediumButtonTD" ]
          span[ class="button-#{c.title}-id#{c.id}" data-categoryid=c.id ] = c.title



.fgfaded ==@work.set_transcription_conventions

.fgfaded
  =render :partial => 'shared/markup_help'

h2.legend Page Notes
.page-notes
  =render :partial => "notes/notes"


.categoryTypesDiv*{'id'=>'categoryTypesDiv', 'data'=>"#{@categoryTypesHash}"}

-content_for :javascript
  javascript:
    $(function() {
      $('[data-fullscreen-toggle]').on('click', function() {
        $(this).toggleClass('pressed');
        $('.page-editor').toggleClass('fullscreen');
        $(window).trigger('resize.FullHeight');
        $('.zoomer-container').zoomer('resize');
      });
      $('[data-layout-set]').on('click', function() {
        var mode = $(this).data('layout-set');
        Cookies.set('transcribe_layout_mode', mode, { expires: 365 });
        $('[data-layout-mode]').attr('data-layout-mode', mode);
        $('.zoomer-container').zoomer('resize');
      });
      $('#auto-fullscreen').on('change', function() {
        var checked = this.checked ? 'yes' : 'no';
        Cookies.set('auto_fullscreen', checked, { expires: 365 });
      });

    });


    
    var categoryTypesDiv=document.getElementById('categoryTypesDiv');
    var categoriesText=categoryTypesDiv.attributes[2].textContent;
    var categoryTypesHash=JSON && JSON.parse(categoriesText) || $.parseJSON(categoriesText);

    var catID, attr_name;
    var categoriesInfo={};
    for (catID in categoryTypesHash){
      categoriesInfo[catID]=[];
      console.log(categoryTypesHash[catID]);
      for (attr_name in categoryTypesHash[catID]){
        categoriesInfo[catID].push([attr_name, categoryTypesHash[catID][attr_name]['allow_user_input'], categoryTypesHash[catID][attr_name]['values']]);
      }
    }

    console.log(categoriesInfo);

    var offset,focusEl,anchorNode,beginningOfSelection, selection, enableChosen, options, categoryid, whereToPut, newDropdown, categoryTypesTable, i, typedata, optionType, tagWithType, type, varTag, newType, notCollapsedArgsTable, mouseX, mouseY, nowX, nowY, docF, selF, rangeF, rectF, xF, yF, spanF, spanParentF, rangeChildNodes, rangeLength, da, position, ch, crds, returnOffsetvalues, userChosenAttributesAndValues, attrName, catHashLength, property, caT, caTT;


    var l=document.getElementById('page_source_text');
    console.log("l : "+l);
    console.log("l.textContent : "+l.textContent);

    var xml=l.textContent;
    //xml = xml.replace(/<br><\/br>/g, '<br>'); // Esli dobavliaiu eto, to oshibka parsinga
    console.log("xml : "+xml);
    xml = "<div id=\"bigDiv\">"+xml+"</div>";
    xml = xml.replace(/<\/br>/g, '');  // Esli dobavliaiu eto, to oshibka parsinga i voobshe nichego ne pokazyvaet v Transcribe
    //xml = xml.replace(/&nbsp\;/g, '');

    var parser = new DOMParser();
    var doc = parser.parseFromString(xml, "text/html");
    //var doc = parser.parseFromString(xml, "text/xml");

    //var allDocContent=doc.childNodes[0];
    var allDocContent=doc.childNodes[0].childNodes[1].childNodes[0];

    var article=l;
    var firstChild=article.firstChild;
    firstChild.parentNode.replaceChild(allDocContent,firstChild);

    var closingElement=article.getElementsByTagName('closing')[0];

    var container = article.parentNode;

    var medium = new Medium({
      element: article,
      mode: Medium.richMode,
      attributes: null,
      placeholder:"",
      tags: null,
      pasteAsText: false
    });
       

    $(".popupBody").hide();
    $(".popupBody2").hide();
    $("#newDropdownDiv").hide();

      
    var config = {
      '.chosen-select-no-results': {width:"95%"},
      '.chosen-select-no-results2': {width:"95%"}
    }

    for (var selector in config) {
      $(selector).chosen(config[selector]);
    }
    

    $(".chosen-select-no-results").chosen();
    $(".chosen-select-no-results2").chosen();
      
    jQuery.fn.chosen_reset = function(n){
      $(this).chosen('destroy');
      $(this).prop('selectedIndex', 0);
      $(this).chosen(n)
    }

    //Go out of the current tag
    jQuery('#page_source_text').bind('keydown', 'alt+x', function(e) {
      returnOffsetvalues=medium.returnOffset();
      offset=returnOffsetvalues[0];
      focusEl=returnOffsetvalues[1];

      if(focusEl.parentNode.id!="page_source_text" && focusEl.parentNode.id!="bigDiv" && focusEl.id!="page_source_text" && focusEl.id!="bigDiv"){
        medium.focus();
        medium.focusNadya(offset,focusEl);
        medium.cursorAfterTag(focusEl);
        //console.log("medium.value() : "+medium.value());
        //return false;
      }
              
      //console.log("medium.value() : "+medium.value());

      return false;

    });

    jQuery('#page_source_text').bind('keydown', 'alt+h', function(e) {

      var m = medium.value();
      console.log(m);
      return false;

    });



    //If the user types text in the input field of the category type select box in order to select one of the options
    jQuery.fn.filterByText = function(textbox, medium, varTag, focusOffset,focusNode, notCollapsedArgsTable) {
      var option;
      var select;
      var options;
      var options2;
      var search;
      var regex;

      return this.each(function() {
        select = this;
        var length=$(select).attr("size");
        console.log("length: "+length);
        options = [];
        $(select).find('option').each(function() {
          options.push({value: $(this).val(), text: $(this).text()});
        });
        $(select).data('options', options);

        $(textbox).off().on('change keyup', function(e) {
        //$(textbox).bind('change keyup', function(e) {
          options2 = $(select).empty().data('options');
          $(select).attr("size", 0);
          search = $.trim($(this).val());
          if(search!=null && search!=""){
            regex = new RegExp("^"+search,"gi");

            $.each(options2, function(i) {
              option = options2[i];
              if(option.value!="" && option.value.match(regex) !== null) {
                $(select).append(
                  $('<option>').text(option.text).val(option.value)
                );
                $(select).attr("size", $(select).attr("size")+1);
                //If the user presses enter
                if (e.which == 13) {
                  if(notCollapsedArgsTable==null){
                    addCategoryWithType (medium, varTag, option.value, focusOffset,focusNode)
                  }else{
                    $("#newDropdownDiv").hide();
                    nowX=0;
                    nowY=0;
                    $("#select-type-input").hide();
                    $("#select-type-input")[0].value="";
                    $('#chosen-select-type').empty();
                    medium.tagSelection2(varTag, option.value, notCollapsedArgsTable[0], focusNode, notCollapsedArgsTable[1], focusOffset);
                    aNode=null;
                    fNode=null;
                  }
                }
              }
            });
          }else{ // if search==null || search==""
            $(select).attr("size", length);
            $.each(options2, function(i) {
              option = options2[i];
              if(option.value!="") {
                $(select).append(
                  $('<option>').text(option.text).val(option.value)
                );

              }
            });
          }
        });
      });
    };



    function addCategoryWithType (medium, varTag, newType, focusOffset,focusNode) {
      setTimeout(function(){
        $("#newDropdownDiv").hide();

        medium.focus();

        d = new Date();
        milliseconds = d.getTime();
        tagCode=milliseconds.toString();

        tagWithType='<'+varTag+' tagcode="'+tagCode+'" class="medium-'+varTag+'" type="'+newType+'"></'+varTag+'>';


        medium.focusNadya(focusOffset,focusNode);
        medium.insertHtmlNadya(tagWithType, focusOffset, focusNode);
        tagWithType='';

        $('#chosen-select-type').empty();
        console.log("medium.value() : "+medium.value());

        return false;
      }, 100);
    }


    function addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode){
      var couple;
      var attrString="";

        medium.focus();

        d = new Date();
        milliseconds = d.getTime();
        tagCode=milliseconds.toString();

        for (couple in userChosenAttributesAndValues){
          attrString+=" "+userChosenAttributesAndValues[couple][0]+"=\""+userChosenAttributesAndValues[couple][1]+"\"";
        }

        tagWithType='<'+varTag+' tagcode="'+tagCode+'" class="medium-'+varTag+'" '+attrString+'></'+varTag+'>';


        medium.focusNadya(focusOffset,focusNode);
        medium.insertHtmlNadya(tagWithType, focusOffset, focusNode);
        tagWithType='';

        $('#chosen-select-type').empty();
        console.log("medium.value() : "+medium.value());

        return false;
    }


    function tagSelectionWithType (categoryid, categoryTypesHash, medium, varTag, focusOffset,focusNode, notCollapsedArgsTable){
      categoryTypesTable=categoryTypesHash[categoryid];

                //Create the new dropdown menu for category types
                newDropdown=addNewDropdown(categoryTypesTable.length);

                for(i=0; i< categoryTypesTable.length; i++){
                  //Add an option for the category types dropdown menu
                  addAnOption(newDropdown,categoryTypesTable[i]);

                  if(i==(categoryTypesTable.length-1)){
                    $("#newDropdownDiv").css({'top':nowY, 'left': nowX});
                    $("#newDropdownDiv").show();
                    $('#select-type-input').show();
                    $('#select-type-input').focus();
                    $('#chosen-select-type').filterByText($('#select-type-input'), medium, varTag, focusOffset,focusNode, notCollapsedArgsTable);

                    $("#chosen-select-type").off().change(function(event5){                        
                      if(event5.target == this){
                        //type=$(this).val();
                        type=this.value;
                        if(type!=null && type!=''){
                          //newType=type;
                          //type='';
                          //console.log("newType: "+newType);
                          medium.tagSelection2(varTag, type, notCollapsedArgsTable[0],focusNode,notCollapsedArgsTable[1], focusOffset);

                          $("#newDropdownDiv").hide();
                          $("#select-type-input").hide();
                          $("#select-type-input")[0].value="";
                          $('#chosen-select-type').empty();

                          console.log(medium.value());
                          return false;
                        }
                      }
                      
                    });
                  }
                }
    }

    //Create the new dropdown menu for category types
    function addNewDropdown (length){
      newDropdown=document.getElementById('chosen-select-type');
      newDropdown.setAttribute("size", length);
      //optionType=document.createElement("option");
      //optionType.text="Select category type";
      //optionType.value="";
      //optionType.setAttribute("selected", "selected");
      //newDropdown.add(optionType,newDropdown.options[null]);
      return newDropdown;
    }

    //Add an option to the dropdown menu of category types
    function addAnOption(newDropdown,typedata){
      optionType=document.createElement("option");
      optionType.text=typedata;
      optionType.value=typedata;
      newDropdown.add(optionType,newDropdown.options[null]);
    }


    //Press alt+y to make a dropdown select disappear without selecting anything
    $(document).keydown(function(e){
      if (e.altKey && e.keyCode == 89) {
        $('.chosen-select-no-results').chosen_reset(config);
        $(".popupBody").hide();
        $("#select-type-input").hide();
        $("#select-type-input")[0].value="";
        $('#chosen-select-type').empty();
        $("#newDropdownDiv").hide();

        medium.focus();
        medium.focusNadya(focusOffset,focusNode);
        
      }
    });

    function getSelectionCoords(win) {
      win = win || window;
      docF = win.document;
      selF = docF.selection;
      rangeF=null;
      rectsF=null;
      rectF=null;
      spanF=null;
      spanParentF=null;

      xF = 0;
      yF = 0;

      if (selF) {
        if (selF.type != "Control") {
            rangeF = selF.createRange();
            rangeF.collapse(true);
            xF = rangeF.boundingLeft;
            yF = rangeF.boundingTop;
        }
      } else if (win.getSelection) {
        selF = win.getSelection();
        if (selF.rangeCount) {
            rangeF = selF.getRangeAt(0).cloneRange();
            if (rangeF.getClientRects.length>0) {
                rangeF.collapse(true);
                rectsF = rangeF.getClientRects();
                if (rectsF.length > 0) {
                    rectF = rects[0];
                }
                xF = rectF.left;
                yF = rectF.top;
            }else{
              // Fall back to inserting a temporary element
              if (xF == 0 && yF == 0) {
                spanF = docF.createElement("span");
                if (spanF.getClientRects) {
                    // Ensure span has dimensions and position by
                    // adding a zero-width space character
                    spanF.appendChild( docF.createTextNode("\u200b") );
                    rangeF.insertNode(spanF); // inserts a node at the end of the range

                    rangeChildNodes=rangeF.endContainer.childNodes;
                    for (ch=0; ch<rangeChildNodes.length; ch++) {
                      console.log(ch);
                      var he=rangeChildNodes[ch];
                      console.log(he);
                      if (he.tagName=="SPAN"){
                        spanF=he;
                        break;
                      }
                    }
                    //rangeLength=rangeChildNodes.length;
                    //spanF=rangeF.endContainer.childNodes[rangeChildNodes.length-2];
                    //rectF = getCoords2(spanF);
                    rectF = spanF.getClientRects()[0];
                    xF = rectF.left;
                    yF = rectF.top;
                    spanParentF = spanF.parentNode;
                    
                    spanParentF.removeChild(spanF);

                    // Glue any broken text nodes back together
                    spanParentF.normalize();
                }
              }
            }
        }
      }
      return { x: xF, y: yF };
    }

    function findUnderBigDivParent(el){
      if(el.parentNode.id=="bigDiv"){
        return el;
      }else{
        return findUnderBigDivParent(el.parentNode);
      }
    }


    function getNext(num, categoryTable){

        console.log("num");
        console.log(num);
            
        var categoryTypesTable=categoryTable[num][2];
        var caT=categoryTable[num][0];
                  

                  console.log("caT: "+caT);
                  console.log(categoryTypesTable);

                  
                  //Create the new dropdown menu for category types
                  newDropdown=addNewDropdown(categoryTypesTable.length);

                  for(i=0; i< categoryTypesTable.length; i++){
                    //Add an option for the category types dropdown menu
                    addAnOption(newDropdown,categoryTypesTable[i]);
                    console.log('caT line 606: ' + caT);
                    if(i==(categoryTypesTable.length-1)){
                      $("#newDropdownDiv").css({'top':nowY,'left':nowX, 'position':'absolute'});
                      $("#newDropdownDiv").show();
                      $('#select-type-input').show();
                      $('#select-type-input').focus();
                      //$('#chosen-select-type').filterByText($('#select-type-input'), medium, varTag, focusOffset,focusNode);
                      console.log('caT just before change(): ' + caT);
                      $("#chosen-select-type").off().change(caT,function(event3){                        
                        console.log('caT line 615: ' + caT);
                        
                        if(event3.target == this){
                          type=$(this).val();
                          if(type!=null && type!=''){
                            newType=type;
                            type='';

                            userChosenAttributesAndValues.push([caT,newType]);
                            

                            $("#newDropdownDiv").hide();
                            $('#chosen-select-type').empty();
                            
                            
                            console.log("userChosenAttributesAndValues");
                            console.log(userChosenAttributesAndValues);
                            

                            console.log("caT");
                            console.log(caT);
                            console.log("newType");
                            console.log(newType);

                            if (num<(categoryTable.length-1)){
                              getNext(num+1, categoryTable);
                            }

                            //addCategoryWithType (medium, varTag, newType, focusOffset,focusNode);
                            if (num==(categoryTable.length-1)){
                              addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode);
                            }
                            
                          }
                        }
                      
                      });
                    }
                  }
                  
                
    }

    
    //Add tag
    jQuery('#page_source_text').bind('keydown', 'alt+c', function(e) {

      var coords = getSelectionCoords();
      nowX=coords.x;
      nowY=coords.y;

      [focusOffset,focusNode,anchorOffset,anchorNode]=medium.returnOffset();
      notCollapsedArgsTable=[anchorNode,anchorOffset];
      selection = window.getSelection();


      


      //If the cursor is in the medium, but nothing has been selected
      if(selection.isCollapsed){
        $(".popupBody").css({'top':nowY,'left':nowX});
        $(".popupBody").show();

        $(".chosen-select-no-results").trigger('chosen:activate');

        $(".chosen-select-no-results").chosen().change(function(event){
          if(event.target == this){
            $tag=$(this).val();
            if($tag!= null && $tag!=''){
              varTag=$tag;
              $tag='';
              options = $( ".chosen-select-no-results option:selected" );
              categoryid=options[0].attributes[1].value;
              $('.chosen-select-no-results').chosen_reset(config);
              $(".popupBody").hide();
              $(".popupBody").css({'top':0,'left':0});

              //If the category has types
              if(categoryid in categoriesInfo){
                userChosenAttributesAndValues=[];

                var categoryTable=categoriesInfo[categoryid];
                
                getNext(0, categoryTable);
                
              }else{ //If the category doesn't have types

                medium.focus();

                d = new Date();
                milliseconds = d.getTime();
                tagCode=milliseconds.toString();


                tagWithType='<'+varTag+' tagcode="'+tagCode+'" class="medium-'+varTag+'"></'+varTag+'>';

                medium.focusNadya(focusOffset,focusNode);
                medium.insertHtmlNadya(tagWithType, focusOffset, focusNode);
                tagWithType='';
                $('.chosen-select-no-results').chosen_reset(config);
                $(".popupBody").hide();
                
                console.log("medium.value() : "+medium.value());

                return false;
              
              }
            }
            return false;
          }
          return false;
        });

      }else{ //If selection is not collapsed: if something has been selected
        $(".popupBody2").css({'top':nowY,'left':nowX});
        $(".popupBody2").show();

        $(".chosen-select-no-results2").trigger('chosen:activate');
          

        $(".chosen-select-no-results2").chosen().change(function(event4){
          if(event4.target == this){
            $tag2=$(this).val();
            if($tag2!= null && $tag2!=''){
              varTag=$tag2;
              $tag2='';
              options = $( ".chosen-select-no-results2 option:selected" );
              categoryid=options[0].attributes[1].value;
              $('.chosen-select-no-results2').chosen_reset(config);
              $(".popupBody2").hide();
              $(".popupBody2").css({'top':0,'left':0});

              //If the category has types
              if(categoryid in categoryTypesHash){
                tagSelectionWithType(categoryid, categoryTypesHash, medium, varTag, focusOffset,focusNode, notCollapsedArgsTable);
                  
              }else{ //If the category doesn't have types

                medium.tagSelection2(varTag, "",anchorNode,focusNode,anchorOffset, focusOffset);
                console.log(medium.value());
                //$('.chosen-select-no-results2').chosen_reset(config);
                //$(".popupBody2").hide();
                return false;
              }
            }
            return false;
          }
          return false;
        });

      } // End if selection.isCollapsed

      return false;
    });


    article.highlight = function() {
      if (document.activeElement !== article) {
        medium.select();
      }
    };

    
    $( ".undo" ).mousedown(function() {
      medium.undo();
      return false;
    });


    function AddMediumValue() {
      mediumValue = medium.value();
      
      mediumValue = mediumValue.replace(/<br>/g, "<br></br>");
      mediumValue = mediumValue.replace(/<div id=\"bigDiv\">/, '');
      mediumValue = mediumValue.replace(/<\/div>/, '');
      console.log(mediumValue);
      document.getElementsByName("page[source_text]")[0].value=mediumValue;
      return true;   // Returns Value
    }
   
javascript:  mixpanel.track("Transcribe Page");
