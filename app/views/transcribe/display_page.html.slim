=render({ :partial => '/shared/page_tabs', :locals => { :selected => 3, :page_id => @page.id }})

-editor_class = 'page-editor' + (@auto_fullscreen == 'yes' ? ' fullscreen' : '')

=form_for(@page, :url => { :action => 'save_transcription' }, :html => { class: editor_class, :onsubmit=>'return AddMediumValue()' }) do |f|
  =hidden_field_tag(:page_id, @page.id)
  <input type="hidden" name="page[source_text]"/>
  =validation_summary @page.errors
  .page-toolbar
    .toolbar

      .toolbar_group
        a.button.outline(data-fullscreen-toggle) Fullscreen
      .toolbar_group
        -layout_modes = { 'ltr' => 'Image at the left', 'rtl' => 'Image at the right', 'ttb' => 'Image at the top', 'btt' => 'Image at the bottom' }
        dl.dropdown.page-columns-layout(data-dropdown='{ "selectable": true }')
          dt.button.outline
            =svg_symbol "#icon-layout-#{@layout_mode}", class: 'icon'
            span.hide-l =layout_modes[@layout_mode]
          dd
            -layout_modes.each do |mode, text|
              a(data-layout-set="#{mode}")
                =svg_symbol "#icon-layout-#{mode}", class: 'icon'
                span =text
      .toolbar_group.hide-m
        label.auto-fullscreen
          =check_box_tag 'auto-fullscreen', 'yes', @auto_fullscreen == 'yes'
          |&nbsp;
          span Always show in fullscreen

      .toolbar_group.w100.aright
        -unless @page.status == 'blank'
          span Mark page as blank
          |&nbsp;
          =check_box_tag 'mark_blank', 'yes'
        -else
          span Page is not blank
          |&nbsp;
          =check_box_tag 'mark_blank', 'no'
      .toolbar_group.w100.aright
        span Page Needs Review
        |&nbsp;
        -if @page.status == 'review'
          =f.check_box('needs_review', {checked: true})
        -else
          =f.check_box('needs_review', {checked: false})
      .toolbar_group.w100.aright
        =button_tag 'Save Changes', :name => 'save'


  .page-columns(data-layout-mode="#{@layout_mode}" data-fullheight='{ "bottom": 30, "cssrule": "height" }')
    .page-column
      .page-imagescan
        -if @page.ia_leaf
          =render :partial => '/ia/ia_bookreader_div'
        -elsif @page.sc_canvas
          =render :partial => '/shared/iiif_div'
        -elsif @page.omeka_file
          =render :partial => '/shared/zoom_div', :locals => { :fullsize_url => @page.omeka_file.fullsize_url }
        -else
          =render :partial => '/shared/zoom_div'
    .page-column
      -if @page.status == 'blank'
        .centered
          .centered_content
            p.nodata_text=="This page is marked blank"
        .page-editarea(style=("display:none"))
          =f.text_area :source_text

      -else
        .page-column_actions
          -unless @preview_xml
            =>button_tag 'Preview', :name => 'preview'
          -else
            =>button_tag 'Edit', :name => 'edit'
          -unless @collection.subjects_disabled
            =>button_tag 'Autolink', :name => 'autolink'
        -if @preview_xml
          .page-preview ==xml_to_html(@preview_xml)

        .page-editarea(style=("display:none" if @preview_xml))
          -if @work.scribes_can_edit_titles
            .page-editarea_title
              span =f.label :title, 'Title:', class: 'a50'
              span =f.text_field :title
          .card*{'id'=>'page_source_text', 'contenteditable'=>'true'}
            = @page.source_text

<div class="popupBody">
<select class="chosen-select-no-results" data-placeholder="Choose a category">
  option[ value="" ] = ""
  - @categories.each do |c|
    option[ value="#{c.title}_id#{c.id}" data-categoryid=c.id ] =c.title
</select>
</div>

<div class="popupBody2">
<select class="chosen-select-no-results2" data-placeholder="Choose a category">
  option[ value="" ] = ""
  - @categories.each do |c|
    option[ value="#{c.title}_id#{c.id}" data-categoryid=c.id ] =c.title
</select>
</div>

<div id="newDropdownDiv">
  <div class="select_a_tag" id="select_a_tag"></div>
  <input id="user-type-input" type="text" placeholder="Type the new value" style="display:none;"></input>
  <input id="select-type-input" type="text" placeholder="Select the category type"></input>
  <select id="chosen-select-type">
  </select>
</div>

<div id="deletion_div">
</div>

<div id="change_div">
</div>

<div id="change_selected_div">
</div>


div [ id="verticalMediumClickableSpans" ]
  table
    tr
      td [ class="overMediumButtonTD" ]
        <span title="undo" class="undo">&#8630;</span>
    tr
      td [ class="overMediumButtonTD" ]
        <span  title="delete tag(s) at cursor position" class="delete_tag">&#9932;</span>
    tr
      td [ class="overMediumButtonTD" ]
        <span  title="change tag(s) at cursor position" class="change_tag">&#11156;</span>
    - @categories.each do |c|
      tr
        td [ class="overMediumButtonTD" ]
          span[ class="button-#{c.title}_id#{c.id}" data-categoryid=c.id ] = c.title



.fgfaded ==@work.set_transcription_conventions

.fgfaded
  =render :partial => 'shared/markup_help'

h2.legend Page Notes
.page-notes
  =render :partial => "notes/notes"


.categoryTypesDiv*{'id'=>'categoryTypesDiv', 'data'=>"#{@categoryTypesHash}"}

-content_for :javascript
  javascript:
    $(function() {
      $('[data-fullscreen-toggle]').on('click', function() {
        $(this).toggleClass('pressed');
        $('.page-editor').toggleClass('fullscreen');
        $(window).trigger('resize.FullHeight');
        $('.zoomer-container').zoomer('resize');
      });
      $('[data-layout-set]').on('click', function() {
        var mode = $(this).data('layout-set');
        Cookies.set('transcribe_layout_mode', mode, { expires: 365 });
        $('[data-layout-mode]').attr('data-layout-mode', mode);
        $('.zoomer-container').zoomer('resize');
      });
      $('#auto-fullscreen').on('change', function() {
        var checked = this.checked ? 'yes' : 'no';
        Cookies.set('auto_fullscreen', checked, { expires: 365 });
      });

    });


    
    var categoryTypesDiv=document.getElementById('categoryTypesDiv');
    var categoriesText=categoryTypesDiv.attributes[2].textContent;
    var categoryTypesHash=JSON && JSON.parse(categoriesText) || $.parseJSON(categoriesText);

    console.log(categoryTypesHash);

    var catID, attr_name;
    var categoriesInfo={};
    for (catID in categoryTypesHash){
      categoriesInfo[catID]=[];
      for (attr_name in categoryTypesHash[catID]){
        categoriesInfo[catID].push([attr_name, categoryTypesHash[catID][attr_name]['allow_user_input'], categoryTypesHash[catID][attr_name]['values']]);
      }
    }

    console.log(categoriesInfo);

    var offset,focusEl,anchorNode,beginningOfSelection, selection, enableChosen, options, categoryid, whereToPut, newDropdown, categoryTypesTable, i, typedata, optionType, tagWithType, type, varTag, newType, notCollapsedArgsTable, mouseX, mouseY, nowX, nowY, docF, selF, rangeF, rectF, xF, yF, spanF, spanParentF, rangeChildNodes, rangeLength, da, position, ch, crds, returnOffsetvalues, userChosenAttributesAndValues, attrName, catHashLength, property, caT, caTT;


    var l=document.getElementById('page_source_text');
    console.log("l : "+l);
    console.log("l.textContent : "+l.textContent);

    var xml=l.textContent;
    //xml = xml.replace(/<br><\/br>/g, '<br>'); // Esli dobavliaiu eto, to oshibka parsinga
    console.log("xml : "+xml);
    xml = "<div id=\"bigDiv\">"+xml+"</div>";
    xml = xml.replace(/<\/br>/g, '');  // Esli dobavliaiu eto, to oshibka parsinga i voobshe nichego ne pokazyvaet v Transcribe
    //xml = xml.replace(/&nbsp\;/g, '');

    var parser = new DOMParser();
    var doc = parser.parseFromString(xml, "text/html");
    //var doc = parser.parseFromString(xml, "text/xml");

    //var allDocContent=doc.childNodes[0];
    var allDocContent=doc.childNodes[0].childNodes[1].childNodes[0];

    var article=l;
    var firstChild=article.firstChild;
    firstChild.parentNode.replaceChild(allDocContent,firstChild);

    var closingElement=article.getElementsByTagName('closing')[0];

    var container = article.parentNode;

    
    var medium = new Medium({
      element: article,
      mode: Medium.richMode,
      attributes: null,
      placeholder:"",
      tags:null,
      pasteAsText: false
    });
        

    $(".popupBody").hide();
    $(".popupBody2").hide();
    $("#newDropdownDiv").hide();
    $("#deletion_div").hide();
    $("#change_div").hide();
    $("#change_selected_div").hide();
    

      
    var config = {
      '.chosen-select-no-results': {width:"95%"},
      '.chosen-select-no-results2': {width:"95%"}
    }

    for (var selector in config) {
      $(selector).chosen(config[selector]);
    }
    

    $(".chosen-select-no-results").chosen();
    $(".chosen-select-no-results2").chosen();
      
    jQuery.fn.chosen_reset = function(n){
      $(this).chosen('destroy');
      $(this).prop('selectedIndex', 0);
      $(this).chosen(n)
    }

    //Go out of the current tag
    jQuery('#page_source_text').bind('keydown', 'alt+x', function(e) {
      returnOffsetvalues=medium.returnOffset();
      offset=returnOffsetvalues[0];
      focusEl=returnOffsetvalues[1];

      if(focusEl.parentNode.id!="page_source_text" && focusEl.parentNode.id!="bigDiv" && focusEl.id!="page_source_text" && focusEl.id!="bigDiv"){
        medium.focus();
        medium.focusNadya(offset,focusEl);
        medium.cursorAfterTag(focusEl);

      }

      return false;

    });

    jQuery('#page_source_text').bind('keydown', 'alt+h', function(e) {

      var m = medium.value();
      console.log(m);
      return false;

    });



    //If the user types text in the input field of the category type select box in order to select one of the options
    jQuery.fn.filterByTextS = function(textbox, medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton) {
      var option;
      var select;
      var options;
      var options2;
      var search;
      var regex;
      var arrowPosition=0;

      return this.each(function() {
        select = this;
        var length=$(select).attr("size");
        options = [];
        $(select).find('option').each(function() {
          options.push({value: $(this).val(), text: $(this).text()});
        });
        $(select).data('options', options);

        console.log("options");
        console.log(options);

        $(textbox).off().on('change keyup', function(e) {

        if (e.which == 40) {
          console.log("pressed down arrow");
          if(arrowPosition>=0 && arrowPosition<options.length){
            $(textbox).val(options[arrowPosition]['text']);
            if(arrowPosition!=(options.length-1)){
              arrowPosition+=1;
            }
          }
        }else if(e.which == 38){
          console.log("pressed up arrow");
          if(arrowPosition>=0 && arrowPosition<options.length){
            $(textbox).val(options[arrowPosition]['text']);
            if(arrowPosition!=0){
              arrowPosition=arrowPosition-1;
            }
          }
        }else{

        //$(textbox).bind('change keyup', function(e) {
          options2 = $(select).empty().data('options');
          $(select).attr("size", 0);
          search = $.trim($(this).val());
          if(search!=null && search!=""){
            regex = new RegExp("^"+search,"gi");

            $.each(options2, function(i) {
              option = options2[i];
              if(option.value!="" && option.value.match(regex) !== null) {
                $(select).append(
                  $('<option>').text(option.text).val(option.value)
                );
                $(select).attr("size", $(select).attr("size")+1);
                //If the user presses enter
                if (e.which == 13) {
                  if(notCollapsedArgsTable==null){
                    $("#newDropdownDiv").hide();
                    document.getElementById('select_a_tag').innerHTML = "";
                    userChosenAttributesAndValues.push([attrName,option.value]);

                    if (num<(categoryTable.length-1)){
                      getNextSomethingSelected(varTag, num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
                    }

                    if (num==(categoryTable.length-1)){
                      medium.tagSelection3(varTag, userChosenAttributesAndValues, notCollapsedArgsTable[0], focusNode, notCollapsedArgsTable[1], focusOffset);
                    }
                  }else{
                    $("#newDropdownDiv").hide();
                    $("#select-type-input").hide();
                    $("#select-type-input")[0].value="";
                    $('#chosen-select-type').empty();

                    document.getElementById('select_a_tag').innerHTML = "";

                    userChosenAttributesAndValues.push([attrName,option.value]);

                    if (num<(categoryTable.length-1)){
                      getNextSomethingSelected(varTag, num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
                    }

                    if (num==(categoryTable.length-1)){
                      medium.tagSelection3(varTag, userChosenAttributesAndValues, notCollapsedArgsTable[0], focusNode, notCollapsedArgsTable[1], focusOffset);
                    }
                  }
                }
              }
            });
          }else{ // if search==null || search==""
            $(select).attr("size", length);
            $.each(options2, function(i) {
              option = options2[i];
              if(option.value!="") {
                $(select).append(
                  $('<option>').text(option.text).val(option.value)
                );

              }
            });
          }
        }
        });
      });
    };

    //If the user types text in the input field of the category type select box in order to select one of the options
    jQuery.fn.filterByTextCollapsed = function(textbox, medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords) {
      var option;
      var select;
      var options;
      var options2;
      var search;
      var regex;

      
      return this.each(function() {
        select = this;
        var length=$(select).attr("size");
        console.log("length: "+length);
        options = [];
        $(select).find('option').each(function() {
          options.push({value: $(this).val(), text: $(this).text()});
        });
        $(select).data('options', options);

        $(textbox).off().on('change keyup', function(e) {
        //$(textbox).bind('change keyup', function(e) {
          options2 = $(select).empty().data('options');
          $(select).attr("size", 0);
          search = $.trim($(this).val());
          if(search!=null && search!=""){
            regex = new RegExp("^"+search,"gi");

            $.each(options2, function(i) {
              option = options2[i];
              if(option.value!="" && option.value.match(regex) !== null) {
                $(select).append(
                  $('<option>').text(option.text).val(option.value)
                );
                $(select).attr("size", $(select).attr("size")+1);
                //If the user presses enter
                if (e.which == 13) {
                  if(notCollapsedArgsTable==null){
                    $("#newDropdownDiv").hide();
                    document.getElementById('select_a_tag').innerHTML = "";
                    userChosenAttributesAndValues.push([attrName,option.value]);

                    if (num<(categoryTable.length-1)){
                      getNextCollapsed(num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords);
                    }

                    if (num==(categoryTable.length-1)){
                      document.getElementById('select_a_tag').innerHTML = "";
                      addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode);

                    }
                  }else{
                    $("#newDropdownDiv").hide();

                    $("#select-type-input").hide();
                    $("#select-type-input")[0].value="";
                    $('#chosen-select-type').empty();
                    document.getElementById('select_a_tag').innerHTML = "";

                    userChosenAttributesAndValues.push([attrName,option.value]);

                    if (num<(categoryTable.length-1)){
                      getNextCollapsed(num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords);
                    }

                    if (num==(categoryTable.length-1)){
                      addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode);

                    }
                  }
                }
              }
            });
          }else{ // if search==null || search==""
            $(select).attr("size", length);
            $.each(options2, function(i) {
              option = options2[i];
              if(option.value!="") {
                $(select).append(
                  $('<option>').text(option.text).val(option.value)
                );

              }
            });
          }
        });
      });
    };


    function addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode){
      var couple;
      var attrString="";

        medium.focus();

        d = new Date();
        milliseconds = d.getTime();
        tagCode=milliseconds.toString();

        for (couple in userChosenAttributesAndValues){
          attrString+=" "+userChosenAttributesAndValues[couple][0]+"=\""+userChosenAttributesAndValues[couple][1]+"\"";
        }

        tagWithType='<'+varTag+' tagcode="'+tagCode+'" class="medium-'+varTag+'" '+attrString+'></'+varTag+'>';


        medium.focusNadya(focusOffset,focusNode);
        medium.insertHtmlNadya(tagWithType, focusOffset, focusNode);
        tagWithType='';

        $('#chosen-select-type').empty();
        console.log("medium.value() : "+medium.value());

        return false;
    }


    function tagSelectionWithType (categoryid, categoriesInfo, medium, varTag, focusOffset,focusNode, notCollapsedArgsTable, coords,onButton){

      userChosenAttributesAndValues=[];

      var categoryTable=categoriesInfo[categoryid];
                
      getNextSomethingSelected(varTag, 0, categoryTable,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
      
    }


    function getNextSomethingSelected(varTag, num, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton){
            
        var categoryTypesTable=categoryTable[num][2];
        var attrName=categoryTable[num][0];
        var allow_user_input=categoryTable[num][1];

        
        //If there are predefined values for this attribute
      if(categoryTypesTable.length>0){
        //Create the new dropdown menu for category types
        newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Select");

        for(i=0; i< categoryTypesTable.length; i++){
          //Add an option for the category types dropdown menu
          addAnOption(newDropdown,categoryTypesTable[i]);
                    
          if(i==(categoryTypesTable.length-1)){
            if(onButton==true){
              $("#newDropdownDiv").css({'top':coords.y,'left':'','right':'4vw', 'position':'absolute'});
            }else{
              $("#newDropdownDiv").css({'top':coords.y,'left':coords.x, 'right':'','position':'absolute'});
            }
            
            $("#newDropdownDiv").show();
            $('#select-type-input').show();
            $('#select-type-input').focus();

            if(allow_user_input==1){ //If the user can enter a new value for this attribute          
              $('#user-type-input').show();
              jQuery.fn.userInputAttrValueSomethingSelected ($('#user-type-input'), medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
            }

            $('#chosen-select-type').filterByTextS($('#select-type-input'), medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
                      
            $("#chosen-select-type").off().change(attrName,function(event3){                        
                                                
              if(event3.target == this){
                type=$(this).val();
                if(type!=null && type!=''){
                  newType=type;
                  type='';

                  userChosenAttributesAndValues.push([attrName,newType]);
                            
                  $("#newDropdownDiv").hide();
                  $('#chosen-select-type').empty();
                  document.getElementById('select_a_tag').innerHTML = "";
                            
                  if (num<(categoryTable.length-1)){
                    getNextSomethingSelected(varTag, num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
                  }

                  if (num==(categoryTable.length-1)){
                    medium.tagSelection3(varTag, userChosenAttributesAndValues, notCollapsedArgsTable[0], focusNode, notCollapsedArgsTable[1], focusOffset);
                  }
                            
                }
              }
                      
            });
          }
        }
      }else{//If there are no predefined values for this attribute
        if(allow_user_input==1){ //If the user can enter a new value for this attribute
          //Create the new dropdown menu for category types
          newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Input");

          if(onButton==true){
            $("#newDropdownDiv").css({'top':coords.y,'left':'','right':'4vw', 'position':'absolute'});
          }else{
            $("#newDropdownDiv").css({'top':coords.y,'left':coords.x,'right':'', 'position':'absolute'});
          }
          
          $("#newDropdownDiv").show();
          $("#select-type-input").hide();
          $("#chosen-select-type").hide();          
          $('#user-type-input').show();
          $('#user-type-input').focus();
          jQuery.fn.userInputAttrValueSomethingSelected ($('#user-type-input'), medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
        }else{ //The user can't enter a new value (erroneous case: the attribute exists, but has no values and can't obtain one)

          alert("There is a mistake in the attribute \""+attrName+"\" design: an attribute should either have a list of predefined values or allow user input.");
          return false;
          
        }

      }     
    }

    //Create the new dropdown menu for category types
    function addNewDropdown (length, attr_name, selectOrType){
      newDropdown=document.getElementById('chosen-select-type');
      newDropdown.setAttribute("size", length);
      
      var title=document.getElementById('select_a_tag');
      var content = document.createTextNode(selectOrType+" "+attr_name);
      title.appendChild(content);
      return newDropdown;
    }

    //Add an option to the dropdown menu of category types
    function addAnOption(newDropdown,typedata){
      optionType=document.createElement("option");
      optionType.text=typedata;
      optionType.value=typedata;
      newDropdown.add(optionType,newDropdown.options[null]);
    }


    //Press alt+y to make a dropdown select disappear without selecting anything
    $(document).keydown(function(e){
      if (e.altKey && e.keyCode == 89) {
        $('.chosen-select-no-results').chosen_reset(config);
        $(".popupBody").hide();

        /*
        $("#newDropdownDiv").hide();
        $("#select_a_tag").empty();
        $("#select-type-input").hide();
        $("#select-type-input")[0].value="";
        $('#chosen-select-type').empty();
        */

        $("#newDropdownDiv").hide();
        $("#select-type-input").show();
        $("#select-type-input")[0].value="";
        $("#chosen-select-type").show();
        $('#chosen-select-type').empty();
        $('#user-type-input').hide();

        $("#deletion_div").hide();
        $("#deletion_div").empty();
        $("#change_div").hide();
        $("#change_div").empty();
        $("#change_selected_div").hide();
        $("#change_selected_div").empty();

        medium.focus();
        medium.focusNadya(focusOffset,focusNode);
        
      }
    });

    function getSelectionCoords(win) {
      win = win || window;
      docF = win.document;
      selF = docF.selection;
      rangeF=null;
      rectsF=null;
      rectF=null;
      spanF=null;
      spanParentF=null;

      xF = 0;
      yF = 0;

      if (selF) {
        if (selF.type != "Control") {
            rangeF = selF.createRange();
            rangeF.collapse(true);
            xF = rangeF.boundingLeft;
            yF = rangeF.boundingTop;
        }
      } else if (win.getSelection) {
        selF = win.getSelection();
        if (selF.rangeCount) {
            rangeF = selF.getRangeAt(0).cloneRange();
            if (rangeF.getClientRects.length>0) {
                rangeF.collapse(true);
                rectsF = rangeF.getClientRects();
                if (rectsF.length > 0) {
                    rectF = rects[0];
                }
                xF = rectF.left;
                yF = rectF.top;
            }else{
              // Fall back to inserting a temporary element
              if (xF == 0 && yF == 0) {
                spanF = docF.createElement("span");
                if (spanF.getClientRects) {
                    // Ensure span has dimensions and position by
                    // adding a zero-width space character
                    spanF.appendChild( docF.createTextNode("\u200b") );
                    rangeF.insertNode(spanF); // inserts a node at the end of the range

                    rangeChildNodes=rangeF.endContainer.childNodes;
                    for (ch=0; ch<rangeChildNodes.length; ch++) {
                      console.log(ch);
                      var he=rangeChildNodes[ch];
                      console.log(he);
                      if (he.tagName=="SPAN"){
                        spanF=he;
                        break;
                      }
                    }
                    //rangeLength=rangeChildNodes.length;
                    //spanF=rangeF.endContainer.childNodes[rangeChildNodes.length-2];
                    //rectF = getCoords2(spanF);
                    rectF = spanF.getClientRects()[0];
                    xF = rectF.left;
                    yF = rectF.top;
                    spanParentF = spanF.parentNode;
                    
                    spanParentF.removeChild(spanF);

                    // Glue any broken text nodes back together
                    spanParentF.normalize();
                }
              }
            }
        }
      }
      return { x: xF, y: yF };
    }

    function findUnderBigDivParent(el){
      if(el.parentNode.id=="bigDiv"){
        return el;
      }else{
        return findUnderBigDivParent(el.parentNode);
      }
    }


    function getNextCollapsed(num, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords){
            
      var categoryTypesTable=categoryTable[num][2];
      var attrName=categoryTable[num][0];
      var allow_user_input=categoryTable[num][1];

      console.log("allow_user_input");
      console.log(allow_user_input);
        

      //If there are predefined values for this attribute
      if(categoryTypesTable.length>0){
        //Create the new dropdown menu for category types
        newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Select");

        for(i=0; i< categoryTypesTable.length; i++){
          //Add an option for the category types dropdown menu
          addAnOption(newDropdown,categoryTypesTable[i]);
                    
          if(i==(categoryTypesTable.length-1)){
            $("#newDropdownDiv").css({'top':coords.y,'left':coords.x,'right':'', 'position':'absolute'});
            $("#newDropdownDiv").show();
            $('#select-type-input').show();
            $('#select-type-input').focus();
            $("#chosen-select-type").show();

            if(allow_user_input==1){ //If the user can enter a new value for this attribute          
              $('#user-type-input').show();
              jQuery.fn.userInputAttrValueCollapsed ($('#user-type-input'), medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords);
            }

            $('#chosen-select-type').filterByTextCollapsed($('#select-type-input'), medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable,focusOffset,focusNode, notCollapsedArgsTable,coords);
                      
            $("#chosen-select-type").off().change(attrName,function(event3){                        
              document.getElementById('select_a_tag').innerHTML = "";                      
              if(event3.target == this){
                type=$(this).val();
                if(type!=null && type!=''){
                  newType=type;
                  type='';

                  userChosenAttributesAndValues.push([attrName,newType]);
                            
                  $("#newDropdownDiv").hide();
                  $('#chosen-select-type').empty();
                            
                  if (num<(categoryTable.length-1)){
                    getNextCollapsed(num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords);
                  }

                  if (num==(categoryTable.length-1)){
                    addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode);
                  }
                            
                }
              }
                      
            });
          }
        }
      }else{ //If there are no predefined values for this attribute
        if(allow_user_input==1){ //If the user can enter a new value for this attribute
          //Create the new dropdown menu for category types
          newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Input");

          $("#newDropdownDiv").css({'top':coords.y,'left':coords.x,'right':'', 'position':'absolute'});
          $("#newDropdownDiv").show();
          $("#select-type-input").hide();
          $("#chosen-select-type").hide();          
          $('#user-type-input').show();
          $('#user-type-input').focus();
          jQuery.fn.userInputAttrValueCollapsed ($('#user-type-input'), medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords);
        }else{ //The user can't enter a new value (erroneous case: the attribute exists, but has no values and can't obtain one)

          alert("There is a mistake in the attribute \""+attrName+"\" design: an attribute should either have a list of predefined values or allow user input.");
          return false;
          
        }
      }
    }


    function collapsedNoAttributesInsertTag(varTag,focusOffset,focusNode){
      medium.focus();

      d = new Date();
      milliseconds = d.getTime();
      tagCode=milliseconds.toString();


      tagWithType='<'+varTag+' tagcode="'+tagCode+'" class="medium-'+varTag+'"></'+varTag+'>';

      medium.focusNadya(focusOffset,focusNode);
      medium.insertHtmlNadya(tagWithType, focusOffset, focusNode);


      var win = win || window,
      docF = win.document,
      selF = docF.selection,
      rangeF=null,
      rectsF=null,
      rectF=null,
      spanF=null,
      spanParentF=null;


      if (selF) {
        console.log("selF");
        console.log(selF);
      } else if (win.getSelection) {
        selF = win.getSelection();
        console.log("win.getSelection()");
        console.log(selF);
      }

      tagWithType='';
      $('.chosen-select-no-results').chosen_reset(config);
      $(".popupBody").hide();
                
      console.log("medium.value() : "+medium.value());

      return false;
    }

    //Remove forbidden characters from an attribute's value
    function cleanAttrValue(val){
      return val.replace(/[<&"'>]+/g, "_");
    }

    //The user types the value of a category attribute in an input field
    jQuery.fn.userInputAttrValueSomethingSelected = function(textbox, medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton) {
      var option;
      var select;
      var options;
      var options2;
      var search;
      var regex;

        $(textbox).off().on('change keyup', function(e) {
          //If the user presses enter
          if (e.which == 13) {
            console.log("user pressed enter");
            //if(notCollapsedArgsTable==null){
              $("#newDropdownDiv").hide();
              $("#select-type-input").show();
              $("#select-type-input")[0].value="";
              $("#chosen-select-type").show();
              $('#chosen-select-type').empty();
              $('#user-type-input').hide();
              document.getElementById('select_a_tag').innerHTML = "";


              userChosenAttributesAndValues.push([attrName,cleanAttrValue($(textbox).val())]);
              $(textbox).val('');
              if (num<(categoryTable.length-1)){
                getNextSomethingSelected(varTag, num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
              }

              if (num==(categoryTable.length-1)){
                medium.tagSelection3(varTag, userChosenAttributesAndValues, notCollapsedArgsTable[0], focusNode, notCollapsedArgsTable[1], focusOffset);

              }
            /*
            }else{
              $("#newDropdownDiv").hide();
              $("#select-type-input").show();
              $("#select-type-input")[0].value="";
              $("#chosen-select-type").show();
              $('#chosen-select-type').empty();
              $('#user-type-input').hide();
              document.getElementById('select_a_tag').innerHTML = "";

              userChosenAttributesAndValues.push([attrName,cleanAttrValue($(textbox).val())]);
              $(textbox).val('');

              if (num<(categoryTable.length-1)){
                getNextSomethingSelected(varTag, num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
              }

              if (num==(categoryTable.length-1)){
                medium.tagSelection3(varTag, userChosenAttributesAndValues, notCollapsedArgsTable[0], focusNode, notCollapsedArgsTable[1], focusOffset);

              }
            }
            */
          }
      });
      
    }


    //The user types the value of a category attribute
    jQuery.fn.userInputAttrValueCollapsed = function(textbox, medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords) {
      var option;
      var select;
      var options;
      var options2;
      var search;
      var regex;

      console.log("textbox");
      console.log(textbox);

        $(textbox).off().on('change keyup', function(e) {
          //If the user presses enter
          if (e.which == 13) {
            console.log("user pressed enter");
            //if(notCollapsedArgsTable==null){
              $("#newDropdownDiv").hide();
              $("#select-type-input").show();
              $("#select-type-input")[0].value="";
              $("#chosen-select-type").show();
              $('#chosen-select-type').empty();
              $('#user-type-input').hide();
              document.getElementById('select_a_tag').innerHTML = "";

              userChosenAttributesAndValues.push([attrName,cleanAttrValue($(textbox).val())]);
              $(textbox).val('');
              if (num<(categoryTable.length-1)){
                getNextCollapsed(num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords);
              }

              if (num==(categoryTable.length-1)){
                addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode);
              }
            /*
            }else{
              $("#newDropdownDiv").hide();
              $("#select-type-input").show();
              $("#select-type-input")[0].value="";
              $("#chosen-select-type").show();
              $('#chosen-select-type').empty();
              $('#user-type-input').hide();
              document.getElementById('select_a_tag').innerHTML = "";

              userChosenAttributesAndValues.push([attrName,cleanAttrValue($(textbox).val())]);
              $(textbox).val('');

              if (num<(categoryTable.length-1)){
                getNextCollapsed(num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords);
              }

              if (num==(categoryTable.length-1)){
                addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode);

              }
            }
            */
          }
      });
      
    }


    
    //Add tag
    jQuery('#page_source_text').bind('keydown', 'alt+c', function(e) {

      var coords = getSelectionCoords();
      nowX=coords.x;
      nowY=coords.y;

      [focusOffset,focusNode,anchorOffset,anchorNode]=medium.returnOffset();
      notCollapsedArgsTable=[anchorNode,anchorOffset];
      selection = window.getSelection();


      //If the cursor is in the medium, but nothing has been selected
      if(selection.isCollapsed){
        $(".popupBody").css({'top':nowY,'left':nowX});
        $(".popupBody").show();

        $(".chosen-select-no-results").trigger('chosen:activate');

        $(".chosen-select-no-results").chosen().change(function(event){
          if(event.target == this){
            $tag=$(this).val();
            if($tag!= null && $tag!=''){
              varTag=$tag;
              $tag='';
              options = $( ".chosen-select-no-results option:selected" );
              categoryid=options[0].attributes[1].value;
              $('.chosen-select-no-results').chosen_reset(config);
              $(".popupBody").hide();
              $(".popupBody").css({'top':0,'left':0});

              //If the category has types
              if(categoryid in categoriesInfo){
                userChosenAttributesAndValues=[];

                var categoryTable=categoriesInfo[categoryid];
                
                getNextCollapsed(0, categoryTable,focusOffset,focusNode, notCollapsedArgsTable,coords);
                
              }else{ //If the category doesn't have types

                collapsedNoAttributesInsertTag(varTag,focusOffset,focusNode);

              }
            }
            return false;
          }
          return false;
        });

      }else{ //If selection is not collapsed: if something has been selected
        $(".popupBody2").css({'top':nowY,'left':nowX});
        $(".popupBody2").show();

        $(".chosen-select-no-results2").trigger('chosen:activate');
          

        $(".chosen-select-no-results2").chosen().change(function(event4){
          if(event4.target == this){
            $tag2=$(this).val();
            if($tag2!= null && $tag2!=''){
              varTag=$tag2;
              $tag2='';
              options = $( ".chosen-select-no-results2 option:selected" );
              categoryid=options[0].attributes[1].value;
              $('.chosen-select-no-results2').chosen_reset(config);
              $(".popupBody2").hide();
              $(".popupBody2").css({'top':0,'left':0});

              //If the category has types
              if(categoryid in categoryTypesHash){
                tagSelectionWithType(categoryid, categoriesInfo, medium, varTag, focusOffset,focusNode, notCollapsedArgsTable, coords, false);
                  
              }else{ //If the category doesn't have types

                medium.tagSelection3(varTag, [], anchorNode,focusNode,anchorOffset, focusOffset);

                return false;
              }
            }
            return false;
          }
          return false;
        });

      } // End if selection.isCollapsed

      return false;
    });


    article.highlight = function() {
      if (document.activeElement !== article) {
        medium.select();
      }
    };

    
    $( ".undo" ).mousedown(function() {
      medium.undo();
      return false;
    });

    $( ".delete_tag" ).mousedown(function() {
      position = $(this).offset();
      var coords = {x:position.left, y:position.top};
      deleteTag(coords);
    });

    //Delete a tag
    jQuery('#page_source_text').bind('keydown', 'alt+d', function(e) {
      var coords = getSelectionCoords();
      deleteTag(coords);
    });

    $( ".change_tag" ).mousedown(function() {
      position = $(this).offset();
      var coords = {x:position.left, y:position.top};
      changeTag(coords,true);
    });

    //Change a tag
    jQuery('#page_source_text').bind('keydown', 'alt+m', function(e) {
      var coords = getSelectionCoords();
      changeTag(coords,false);
    });

    function findParents(){
      [focusOffset,focusNode,anchorOffset,anchorNode]=medium.returnOffset();
      var els = [];
      var a=anchorNode;

      //Find all the parents of the anchorNode (the node where the cursor or the beginning of the selection is)
      while (a!=null) {
        a = a.parentNode;
        if(a.id=="page_source_text"){
          break;
        }
        els.unshift(a);
      }
      return els;
    }

    //Change a tag
    function changeTag(coords,onButton){
      var els = findParents();

      //If the node has parent nodes (=tags)
      if(els.length>0){

        var i,
          name,
          nameTag,
          menuDiv=document.getElementById("change_div"),
          radio,
          label,
          button,
          hideDivButton=document.createElement('button');

          hideDivButton.className="hide_popup_button";
          hideDivButton.appendChild(document.createTextNode("\u26cc"));
          hideDivButton.onclick=function(){
            hideChangePopup(); 
          };
          menuDiv.appendChild(hideDivButton);

          var titlediv = document.createElement("div");
          titlediv.appendChild(document.createTextNode("Choose the tag to modify:"));
          titlediv.className="popup_title_div";
          menuDiv.appendChild(titlediv);

        //Create a menu
        for(i=0; i<els.length; i++){
          nameTag=els[i].nodeName;
          name=nameTag.replace(/_ID\d+$/g, "");
          radio = document.createElement('input');
          radio.type = "radio";
          radio.name = "change_tag_radio";
          radio.value = els[i].getAttribute('tagcode');
          radio.id = "change_radio_"+nameTag;
          label = document.createElement('label');
          label.htmlFor = "change_radio_"+nameTag;
          label.className=("medium-"+nameTag).toLowerCase();
          label.appendChild(document.createTextNode(name));
          menuDiv.appendChild(radio);
          menuDiv.appendChild(label);
          menuDiv.appendChild(document.createElement('br'));        
        }

        button = document.createElement('button');
        button.onclick = function(){
          changeSelectedTag(coords,onButton);
        };

        button.appendChild(document.createTextNode("Change the chosen tag"));
        menuDiv.appendChild(button);
        if(onButton==true){
          $("#change_div").css({'top':coords.y+20,'left':'','right':'4vw', 'position':'absolute'});
        }else{
          $("#change_div").css({'top':coords.y+20,'left':coords.x, 'right':'', 'position':'absolute'});
        }
        
        $("#change_div").show();
      }
      
    }

    //Get all attributes of a node
    function getAttributes ($node) {
      var attrs = {};
      $.each( $node[0].attributes, function ( index, attribute ) {
        attrs[attribute.name] = attribute.value;
      } );

      return attrs;
    }

    function updateCorrespondingInput(inputId,newvalue){
      $("#"+inputId).val(newvalue);
    }

    function hideDeletionPopup(){
      $("#deletion_div").empty();
      $("#deletion_div").hide();
    }

    function hideChangePopup(){
      //Delete the radios from the menu div
      $('#change_div').empty();
      //Hide the menu
      $("#change_div").hide();
    }

    function hideChangeAttributesPopup(){
      //Delete the radios from the menu div
      $("#change_selected_div").empty();
      //Hide the menu
      $("#change_selected_div").hide();
    }

    //Functions that calls medium.js in order to remove the tags chosen via the popup menu checkboxes
    function changeSelectedTag(coords,onButton){

      //Get the checked tagcode
      var tagCodeToChange = $("input[name=change_tag_radio]:checked").val();

      //Delete the radios from the menu div
      $('#change_div').empty();
      //Hide the menu
      $("#change_div").hide();

      var attrs=getAttributes($("[tagcode="+tagCodeToChange+"]"));
      var tagName=$("[tagcode="+tagCodeToChange+"]").prop("tagName");

      var catId=tagName.match(/_ID(\d+)$/)[1];

      var div = document.getElementById("change_selected_div"),
          input,
          label,
          attrName,
          button,
          numberOfChangableAttrs=0,
          i,
          option,
          hideDivButton=document.createElement('button');


      hideDivButton.className="hide_popup_button";
      hideDivButton.appendChild(document.createTextNode("\u26cc"));
      hideDivButton.onclick=function(){
        hideChangeAttributesPopup(); 
      };
      div.appendChild(hideDivButton);

      var titlediv = document.createElement("div");
      var span=document.createElement("span");
      span.className=("medium-"+tagName).toLowerCase();
      span.appendChild(document.createTextNode(tagName.match(/^(.+)_ID\d+$/)[1]));
          
      titlediv.appendChild(document.createTextNode("Modify attribute values of the "));
      titlediv.appendChild(span);
      titlediv.appendChild(document.createTextNode(" tag:"));
      titlediv.className="popup_title_div";
      div.appendChild(titlediv);

      var attrsHash=categoryTypesHash[catId];

      //Loop through all attributes of the chosen category
      for (attrName in attrs){
        if(attrName!='class' && attrName!='tagcode'){
          label = document.createElement('label');
          label.setAttribute("for","value_"+attrName);
          label.innerHTML = attrName;
          div.appendChild(label);

          //If the user is allowed to type attribute values
          if(attrsHash[attrName]['allow_user_input']==1){
            input = document.createElement("input");
            input.type = "text";
            input.id = "value_"+attrName;
            input.value = attrs[attrName];
            input.name=tagCodeToChange;
            input.className="input_attribute_value_transcribe";
            div.appendChild(input);
            numberOfChangableAttrs+=1;
          }

          //If there are predefined attributes
          if(attrsHash[attrName]['values'].length>0){
            //Create a dropdown to let the user select an attribute value from the list
            var select = document.createElement("select");
            select.id = "value_"+attrName;
            select.name='select_'+tagCodeToChange;
            select.onchange=function(){
              updateCorrespondingInput(this.id,this.value);
            };

            for (i=0; i<attrsHash[attrName]['values'].length; i++){
              option = document.createElement("option");
              option.value=attrsHash[attrName]['values'][i];
              if(attrsHash[attrName]['values'][i]==attrs[attrName]){
                option.selected="checked";
              }else{
                option.selected="";
              }
              option.innerHTML=attrsHash[attrName]['values'][i];

              select.appendChild(option);
            }

            div.appendChild(select);
          }
        }
      }

      if(numberOfChangableAttrs>0){
        button = document.createElement('button');
        button.onclick = function(){
          saveChangesInAttributeValues(tagCodeToChange);
        };

        button.appendChild(document.createTextNode("Save changes"));
        div.appendChild(button);
        
        if(onButton==true){
          $("#change_selected_div").css({'top':coords.y+20,'left':'','right':'4vw', 'position':'absolute'});
        }else{
          $("#change_selected_div").css({'top':coords.y+20,'left':coords.x,'right':'', 'position':'absolute'});
        }
        
        $("#change_selected_div").show();
      }else{
        alert("The tag "+tagName.match(/^(.+)_ID\d+$/)[1]+" has no attributes.");
      }
            
    }

    //Save changes the user made in the values of attributes of the chosen tag
    function saveChangesInAttributeValues(tagCode){
      //Get new values
      var el,
        nodeList=document.getElementsByName(tagCode),
        nodeListSelect=document.getElementsByName('select_'+tagCode),
        newAttrsValuesTable={},
        id;

      //Create a hash with attribute names and their new values
      //First put inside values from the drop down select
      if(nodeListSelect.length>0){
      for (el=0; el<nodeListSelect.length; el++){
        id=nodeListSelect[el].id.substring(6);
        newAttrsValuesTable[id]=nodeListSelect[el].value;

        if(el==(nodeListSelect.length-1)){
          if(nodeList.length>0){
          //Next put inside values from the input fields
          for (el=0; el<nodeList.length; el++){
            id=nodeList[el].id.substring(6);
            newAttrsValuesTable[id]=cleanAttrValue(nodeList[el].value);

            if(el==(nodeList.length-1)){
              $("#change_selected_div").hide();
              $("#change_selected_div").empty();
              medium.changeSelectedTag(tagCode,newAttrsValuesTable);
              return false;
            }
          }
          }else{
              $("#change_selected_div").hide();
              $("#change_selected_div").empty();
              medium.changeSelectedTag(tagCode,newAttrsValuesTable);
              return false;
          }
        }
      }
      }else{
        //Next put inside values from the input fields
          for (el=0; el<nodeList.length; el++){
            id=nodeList[el].id.substring(6);
            newAttrsValuesTable[id]=cleanAttrValue(nodeList[el].value);

            if(el==(nodeList.length-1)){
              $("#change_selected_div").hide();
              $("#change_selected_div").empty();
              medium.changeSelectedTag(tagCode,newAttrsValuesTable);
              return false;
          }
        }
      }
      
      
    }

    //Delete a tag
    function deleteTag(coords){
      var els = findParents();

      //If the node has parent nodes (=tags)
      if(els.length>0){
        var i,
          name,
          nameTag,
          menuDiv=document.getElementById("deletion_div"),
          checkbox,
          label,
          button,
          hideDivButton=document.createElement('button');

          hideDivButton.className="hide_popup_button";
          hideDivButton.appendChild(document.createTextNode("\u26cc"));
          hideDivButton.onclick=function(){
            hideDeletionPopup(); 
          };
          menuDiv.appendChild(hideDivButton);

          var titlediv = document.createElement("div");
          titlediv.appendChild(document.createTextNode("Choose tag(s) to delete:"));
          titlediv.className="popup_title_div";
          menuDiv.appendChild(titlediv);


        //Create a menu
        for(i=0; i<els.length; i++){
          nameTag=els[i].nodeName;
          name=nameTag.replace(/_ID\d+$/g, "");
          checkbox = document.createElement('input');
          checkbox.type = "checkbox";
          checkbox.name = "delete_tag_checkbox";
          checkbox.value = els[i].getAttribute('tagcode');
          checkbox.id = "delete_checkbox_"+nameTag;
          label = document.createElement('label');
          label.htmlFor = "delete_checkbox_"+nameTag;
          label.className = "medium-"+nameTag.toLowerCase();
          label.appendChild(document.createTextNode(name));
          menuDiv.appendChild(checkbox);
          menuDiv.appendChild(label);
          menuDiv.appendChild(document.createElement('br'));        
        }

        button = document.createElement('button');
        button.onclick = function(){
          removeTag();
        };

        button.appendChild(document.createTextNode("Delete the chosen tag(s)"));
        menuDiv.appendChild(button);

        $("#deletion_div").css({'top':coords.y+20,'left':'','right':'4vw', 'position':'absolute'});
        $("#deletion_div").show();
      }
      
    }

    // Pass the checkbox name to the function
    function getCheckedBoxes(chkboxName) {
      var checkboxes = document.getElementsByName(chkboxName);
      var checkboxesChecked = [];
      // loop over them all
      for (var i=0; i<checkboxes.length; i++) {
        // And stick the checked ones onto an array...
        if (checkboxes[i].checked) {
          checkboxesChecked.push(checkboxes[i].value);
        }
      }
      // Return the array if it is non-empty, or null
      return checkboxesChecked.length > 0 ? checkboxesChecked : null;
    }

    //Functions that calls medium.js in order to remove the tags chosen via the popup menu checkboxes
    function removeTag(){

      //Get the checked options
      var checkedTagcodes = getCheckedBoxes("delete_tag_checkbox");
      //Delete the checkboxes from the menu div
      $('#deletion_div').empty();
      //Hide the menu
      $("#deletion_div").hide();
      if(checkedTagcodes!=null && checkedTagcodes.length>0){
        medium.removeTags(checkedTagcodes);
      }
      
    }

    //Check if a string contains valid XML
    function isXML(xml){
      try {
        xmlDoc = $.parseXML(xml); //is valid XML
        return true;
      } catch (err) {
        // was not XML
        console.log(err);
        return false;
      }
    }
   

    //Add the transcription text to the form before sending it to the server
    function AddMediumValue() {
      mediumValue = medium.value();
      
      mediumValue = mediumValue.replace(/<br>/g, "<br></br>");

      if(mediumValue.match(/^<div id=\"bigDiv\">/)==null){
        mediumValue = "<div id=\"bigDiv\">"+mediumValue+"<\/div>";
      }

      if(isXML(mediumValue)){
        mediumValue = mediumValue.replace(/<div id=\"bigDiv\">/, '');
        mediumValue = mediumValue.replace(/<\/div>/, '');
        document.getElementsByName("page[source_text]")[0].value=mediumValue;
        return true;   // Returns Value
      }else{
        alert("The transcription contains tagging erros and can't be saved:\n"+mediumValue);
        return false;
      }

      
    }
   
javascript:  mixpanel.track("Transcribe Page");
