/usr/lib/ruby/vendor_ruby/bundler.rb:289: warning: Insecure world writable dir /var/lib/gems/2.3.0/bin in PATH, mode 040757
.** Invoke fromthepage:process_document_upload (first_time)
** Invoke environment (first_time)
** Execute environment
** Execute fromthepage:process_document_upload
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
."update_statistic start"
"update_statistic finish"
."update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
"update_statistic start"
"update_statistic finish"
.....****@name: #category-1
@count: 0
@collection.title: CS Pierce
@category.title: People
.F...******.....**********.......*************************.."update_statistic start"
"update_statistic finish"
.F......******...F...***in type some text page.body: <!DOCTYPE html><html><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><title>Transcribe - 2 (CS Pierce, MS_641-642) | FromThePage</title><meta name="viewport" content="width=device-width"><meta name="description" content="2 (CS Pierce, MS_641-642) - transcribe page. Significs and Logic"><meta name="author" content="FromThePage.com"><meta name="copyright" content="(c) 2017 FromThePage.com"><meta name="verify-v1" content="2pFw887E35Fhfkyj/nFGzyui8dJ4rLbluudrp1mDcj0=">
<link href="http://localhost:3000/assets/favicon-3b65dba823d9f31072094535df6dfcbbe99cf14a55aedfaf619a09fed2ebb640.ico" rel="shortcut icon" type="image/vnd.microsoft.icon">
<link href="//fonts.googleapis.com/css?family=Source+Serif+Pro:400,700|Crete+Round" media="screen" rel="stylesheet">
<link href="http://localhost:3000/assets/application-e52f91bec5d45d23cab22abc353ccdab7de3c416266d83129f23cb78eb3155c5.css" media="screen" rel="stylesheet"><script type="text/javascript" async="" src="//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js"></script><script src="/jquery-2.1.4.min.js"></script><link rel="stylesheet" href="/medium.css"><link rel="stylesheet" href="/chosen.min.css"><link rel="stylesheet" href="/medium-tag-styles.css"><link rel="stylesheet" href="/my_style.css"><script type="text/javascript" src="/chosen.jquery.min.js"></script><script type="text/javascript" src="/rangy-core.js"></script><script type="text/javascript" src="/rangy-classapplier.js"></script><script type="text/javascript" src="/undo.js"></script><script type="text/javascript" src="/medium.js"></script><script type="text/javascript" src="/medium_subclass.js"></script><script>(function(e,b){if(!b.__SV){var a,f,i,g;
window.mixpanel=b;
b._i=[];b.init=function(a,e,d){function f(b,h){var a=h.split(".");
2==a.length&&(b=b[a[0]],h=a[1]);
b[h]=function(){b.push([h].concat(Array.prototype.slice.call(arguments,0)))}}var c=b;"undefined"!==typeof d?c=b[d]=[]:d="mixpanel";
c.people=c.people||[];c.toString=function(b){var a="mixpanel";
"mixpanel"!==d&&(a+="."+d);b||(a+=" (stub)");return a};
c.people.toString=function(){return c.toString(1)+".people (stub)"};
i="disable time_event track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config people.set people.set_once people.increment people.append people.union people.track_charge people.clear_charges people.delete_user".split(" ");
for(g=0;g<i.length;g++)f(c,i[g]);b._i.push([a,e,d])};
b.__SV=1.2;a=e.createElement("script");
a.type="text/javascript";
a.async=!0;a.src="undefined"!==typeof MIXPANEL_CUSTOM_LIB_URL?MIXPANEL_CUSTOM_LIB_URL:"file:"===e.location.protocol&&"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js".match(/^\/\//)?"https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js":"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";
f=e.getElementsByTagName("script")[0];
f.parentNode.insertBefore(a,f)}})(document,window.mixpanel||[]);mixpanel.init("d5e53d2387f7184a07bf99f207df9603");</script><script type="text/javascript" async="" src="http://www.google-analytics.com/ga.js"></script></head><body><header class="header"><div class="toolbar"><div class="toolbar_group"><a class="logo" href="/"><svg><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#logo"></use></svg></a></div><div class="toolbar_group"><a class="header_link" href="/dashboard_role">Dashboard</a><a class="header_link" href="/dashboard">Collections</a><a class="header_link" href="/static/faq">FAQ</a><dl class="dropdown right"><dt class="header_link header_user"><span><big>Signed In As</big><small>Eleanor</small></span><svg class="icon"><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#header-user"></use></svg></dt><dd><a href="/dashboard/watchlist">Collaborator Dashboard</a><hr><a href="/user/profile?user_id=2">Your Profile</a><hr><a data-method="delete" href="/users/sign_out" rel="nofollow">Sign Out</a></dd></dl></div></div></header><main class="wrapper"><ul class="breadcrumbs"><li><a href="/collection/show?collection_id=1">CS Pierce</a></li><li><a href="/display/read_work?work_id=9">MS_641-642</a></li></ul><div class="headline"><h1 class="headline_title">2</h1><div class="headline_aside"><nav class="page-nav"><a class="page-nav_prev" href="/transcribe/display_page?page_id=24"><svg class="icon"><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#icon-arrow-left"></use></svg></a><span class="page-nav_info">Page 2 of 21</span><a class="page-nav_next" href="/transcribe/display_page?page_id=26"><svg class="icon"><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#icon-arrow-right"></use></svg></a></nav></div></div><div class="tabs"><a href="/display/display_page?page_id=25">Overview</a><a class="active">Transcribe</a><a href="/page_version/list?page_id=25">Versions</a></div><form accept-charset="UTF-8" action="/transcribe/save_transcription" class="page-editor" data-remote="true" id="edit_page_25" method="post"><div style="display:none"><input name="utf8" type="hidden" value="âœ“"><input name="_method" type="hidden" value="patch"></div><input id="page_id" name="page_id" type="hidden" value="25"><input type="hidden" name="page[source_text]"><input type="hidden" name="page[use_advanced_mode]"><input type="hidden" name="page[finished]"><div class="page-toolbar"><div class="toolbar"><div class="toolbar_group"><a class="button outline" data-fullscreen-toggle="">Fullscreen</a></div><div class="toolbar_group"><dl class="dropdown page-columns-layout" data-dropdown="{ &quot;selectable&quot;: true }"><dt class="button outline"><svg class="icon"><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#icon-layout-ltr"></use></svg><span class="hide-l">Image at the left</span></dt><dd><a data-layout-set="ltr"><svg class="icon"><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#icon-layout-ltr"></use></svg><span>Image at the left</span></a><a data-layout-set="rtl"><svg class="icon"><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#icon-layout-rtl"></use></svg><span>Image at the right</span></a><a data-layout-set="ttb"><svg class="icon"><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#icon-layout-ttb"></use></svg><span>Image at the top</span></a><a data-layout-set="btt"><svg class="icon"><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#icon-layout-btt"></use></svg><span>Image at the bottom</span></a></dd></dl></div><div class="toolbar_group hide-m"><label class="auto-fullscreen"><input id="auto-fullscreen" name="auto-fullscreen" type="checkbox" value="yes">&nbsp;<span>Always show in fullscreen</span></label></div><div class="toolbar_group w100 aright"><span>Mark page as blank</span>&nbsp;<input id="mark_blank" name="mark_blank" type="checkbox" value="yes"></div><div class="toolbar_group w100 aright"><span>Page Needs Review</span>&nbsp;<input name="page[needs_review]" type="hidden" value="0"><input id="page_needs_review" name="page[needs_review]" type="checkbox" value="1"></div><div class="toolbar_group w100 aright"><button name="save" type="submit">Save Changes</button></div></div></div><div class="page-columns" data-layout-mode="ltr" data-fullheight="{ &quot;bottom&quot;: 30, &quot;cssrule&quot;: &quot;height&quot; }"><div class="page-column"><div class="page-imagescan"><div class="zoomer-container"><img alt="1725" src="http://localhost:3000/images/uploaded/9/1725.jpg"></div></div></div><div class="page-column"><div class="page-column_actions"><button name="preview" type="submit">Preview</button> <button name="autolink" type="submit">Autolink</button> </div><div class="page-editarea"><div class="card" id="page_source_text" contenteditable="true">Significs and Logic</div></div></div></div></form><div class="popupBody" id="popupBody" style="display:none;"><button type="button" class="hide_popup_small" id="hidePopupBody">â›Œ</button><select class="chosen-select-no-results" data-placeholder="Choose a category"><option value=""></option><option value="People_id1" data-categoryid="1">People</option><option value="Places_id2" data-categoryid="2">Places</option></select></div><div class="popupBody2" id="popupBody2" style="display:none;"><button type="button" class="hide_popup_small" id="hidePopupBody2">â›Œ</button><select class="chosen-select-no-results2" data-placeholder="Choose a category"><option value=""></option><option value="People_id1" data-categoryid="1">People</option><option value="Places_id2" data-categoryid="2">Places</option></select></div><div class="popupBodyAdv" id="popupBodyAdv" style="display:none;"><!--<button type="button" class="hide_popup_small" title="Alt+R" id="hidePopupBodyAdv" onclick="hidePopupBodyAdv();">&#9932;</button>--><button type="button" class="hide_popup_small" title="Alt+R" id="hidePopupBodyAdv">â›Œ</button><select class="chosen-adv" data-placeholder="Choose a category"><option value=""></option><option value="People_id1" data-categoryid="1">People</option><option value="Places_id2" data-categoryid="2">Places</option></select></div><div class="popupBodyAdv2" id="popupBodyAdv2" style="display:none;"><!--<button type="button" class="hide_popup_small" title="Alt+R" id="hidePopupBodyAdv2" onclick="hidePopupBodyAdv2();">&#9932;</button>--><button type="button" class="hide_popup_small" title="" id="hidePopupBodyAdv2">â›Œ</button><select class="chosen-adv2" data-placeholder="Choose a category"><option value=""></option><option value="People_id1" data-categoryid="1">People</option><option value="Places_id2" data-categoryid="2">Places</option></select></div><div id="newDropdownDiv" style="display:none;"><!--<button type="button" class="hide_popup_new" title="Alt+R" id="hideNewDropdownDiv" onclick="hideNewDropdownDiv();">&#9932;</button>--><button type="button" class="hide_popup_new" title="" id="hideNewDropdownDiv">â›Œ</button><div class="select_a_tag" id="select_a_tag"></div><input id="user-type-input" type="text" placeholder="Type the new value" style="display:none;"><input id="select-type-input" type="text"><select id="chosen-select-type"></select></div><div id="deletion_div" style="display:none;"></div><div id="change_div" style="display:none;"></div><div id="change_selected_div" style="display:none;"></div><div id="final_button_div"><button type="button" id="transcription_finished">Transcription finished</button></div><div id="use_advanced_mode_div"><label for="use_advanced_mode" id="use_advanced_mode_label">Use advanced mode</label><input id="use_advanced_mode" name="use_advanced_mode" type="checkbox" value="0"></div><div id="changeHotkeysMenu" style="display:none;"><button type="button" class="hide_popup_changekeys">â›Œ</button><div id="changeHotkeysTitle">Change hot keys</div>  <div id="changeHotKeysInternal"></div><button type="button" id="changeHotKeys">Change hot keys</button></div><div id="changeSavingTimeMenu" style="display:none;"><button type="button" id="hide_popup_changetime">â›Œ</button><div id="changeTimeTitle">Change transcription saving frequency</div>  <div id="changeSavingTimeInternal"><input type="text" id="input_time" class="savingTimeInput" maxlength="2">minutes</div><button type="button" id="changeSavingTimeButton">Change</button></div><div id="verticalMediumClickableSpans"><table><tbody><tr><td class="overMediumButtonTD"><span title="undo" class="undo">â†¶</span></td></tr><tr><td class="overMediumButtonTD"><span title="delete tag(s) at cursor position: " class="delete_tag">â›Œ</span></td></tr><tr><td class="overMediumButtonTD"><span title="change tag(s) at cursor position: " class="change_tag">â®”</span></td></tr><tr><td class="overMediumButtonTD"><span class="button-People_id1 category_button" data-categoryid="1">People</span></td></tr><tr><td class="overMediumButtonTD"><span class="button-Places_id2 category_button" data-categoryid="2">Places</span></td></tr><tr><td class="overMediumButtonTD"><span title="change hot keys" class="show_change_hotkeys">âš·</span></td></tr><tr><td class="overMediumButtonTD"><span title="change transcription saving frequency" class="show_saving_time">âŒ›</span></td></tr></tbody></table></div><div id="verticalMediumClickableSpansAdv"><table><tbody><tr><td class="overMediumButtonTD"><span title="undo" class="undo">â†¶</span></td></tr><tr><td class="overMediumButtonTD"><span title="delete tag(s) at cursor position: " class="delete_tag">â›Œ</span></td></tr><tr><td class="overMediumButtonTD"><span title="change tag(s) at cursor position: " class="change_tag">â®”</span></td></tr><tr><td class="overMediumButtonTD"><span class="button-People_id1 category_button" data-categoryid="1">People</span></td></tr><tr><td class="overMediumButtonTD"><span class="button-Places_id2 category_button" data-categoryid="2">Places</span></td></tr><tr><td class="overMediumButtonTD"><span title="change hot keys" class="show_change_hotkeys">âš·</span></td></tr><tr><td class="overMediumButtonTD"><span title="change transcription saving frequency" class="show_saving_time">âŒ›</span></td></tr></tbody></table></div><div class="fgfaded"><p><b>Transcription Conventions</b>
</p><ul><li><i>Spelling: </i>Use original spelling if possible.</li>
 <li><i>Capitalization: </i>Modernize for readability</li>
<li><i>Punctuation: </i>Add modern periods, but don't add punctuation like commas and apostrophes.</li>
<li><i>Line Breaks: </i>Hit <code>return</code> once after each line ends.  Two returns indicate a new paragraph, which is usually indentation  following the preceding sentence in the original.  The times at the end of each entry should get their own paragraph, since the software does not support indentation in the transcriptions.</li>
 <li><i>Illegible text: </i>Indicate illegible readings in single square brackets: <code>[Dr?]</code></li></ul><p></p></div><div class="fgfaded"><p>A single newline indicates a line-break in the original document, and will not appear as a break in the text in some views or exports. Two newlines indicate a paragraph, and will appear as a paragraph break in all views. <br>

"Autolink" will suggest subjects certain words could be linked to or you can use double braces to link subjects. <code>[[Jane Doe]]</code> will link the text "Jane Doe" to the subject Jane Doe, while <code>[[Jane Doe|Jane]]</code> will link the text "Jane" to the subject Jane Doe. We recommend that linking be left to an editor after the initial transcription is made.</p>
</div><h2 class="legend">Page Notes</h2><div class="page-notes"><p class="acenter fglight" data-note-empty="">Nobody has written a note for this page yet</p><div class="user-bubble"><div class="userpic"><img alt="Eleanor" height="80" src="http://gravatar.com/avatar/ddd977d037e1a6946357c962e37f193e?default=blank&amp;secure=false&amp;size=80" width="80"></div><form accept-charset="UTF-8" action="/notes" class="user-bubble_form" data-remote="true" method="post"><div style="display:none"><input name="utf8" type="hidden" value="âœ“"></div><input id="page_id" name="page_id" type="hidden" value="25"><div class="user-bubble_form_editor"><textarea id="note_body" name="note[body]" placeholder="Write a new note..." rows="4"></textarea></div><div class="user-bubble_form_footer"><span class="user-bubble_form_error"></span><button name="button" type="submit">Submit</button></div></form></div></div><div class="categoryTypesDiv" id="categoryTypesDiv" data="{&quot;1&quot;:{&quot;first_attribute&quot;:{&quot;allow_user_input&quot;:0,&quot;values&quot;:[]}}}"></div><div class="categoryTypesDivAdv" id="categoryTypesDivAdv" data="{&quot;1&quot;:{&quot;1&quot;:{&quot;allow_user_input&quot;:0,&quot;name&quot;:&quot;first_attribute&quot;,&quot;values&quot;:{}}}}"></div><div class="initialAttrIds" id="initialAttrIds" data="{}"></div><script type="text/javascript" src="/my-medium-onmousedown-functions.js"></script><script type="text/javascript" src="/transcription_module.js"></script><script>mixpanel.track("Transcribe Page");</script></main><footer class="footer"><div class="footer_copyright">Â© 2017 <a href="/">FromThePage</a>. All rights reserved.</div><div class="footer_nav"><a href="/static/about">About</a><a href="http://fromthepage.wpengine.com/terms-of-service/">Terms &amp; Conditions</a><a href="/static/privacy">Privacy Policy</a><a href="mailto:benwbrum@gmail.com">Contact Us</a></div></footer><div class="page-busy-overlay"></div><script src="http://localhost:3000/assets/application-41aece84efa6627667473eda880dceae50103b7d6ab70fb6c889d7ac8fd6a933.js"></script><script>$(function() {
  // Zoomer initialization
  var zoomer = $('.zoomer-container').zoomer();

  // Check localStorage support
  if(typeof Storage !== void(0)) {
    var data = zoomer.data('zoomer');
    var datakey = data.images[0];
    var storage = localStorage['zoomer:' + datakey];
    var properties = ['targetImageWidth','targetImageHeight','targetPositionerTop','targetPositionerLeft'];

    if(storage) {
      try {
        storage = JSON.parse(storage);
      } catch (err) {
        storage = null;
        console.log('JSON parse error: ' + err.message);
      }

      // Restore zoom level and pan position if exists
      if(storage) {
        data.$image.one("load.zoomer", function(){
          for(var i = 0, l = properties.length; i < l; i++) {
            var property = properties[i];
            data[property] = parseInt(storage[property], 10) || 0;
          }
          console.log('Zoomer state restored');
        });
      }
    }

    // Store zoom level and pan position
    $(window).on('beforeunload', function() {
      storage = {};
      for(var i = 0, l = properties.length; i < l; i++) {
        var property = properties[i];
        storage[property] = data[property];
      }
      localStorage['zoomer:' + datakey] = JSON.stringify(storage);
    });
  }
});</script><script>$(function() {
  // Toggle note edit
  $(document).on('click', '[data-note-edit]', function() {
    var $container = $(this).closest('.user-bubble').toggleClass('edit');
    if($container.hasClass('edit')) {
      $('form', $container)[0].reset();
      $('.user-bubble_form_error', $container).empty();
    }
  });

  // Create and update note
  $(document).on('ajax:complete', 'form.user-bubble_form', function(e, xhr) {
    var $container = $(this).parent();
    var $error = $('.user-bubble_form_error', $container).empty();
    if(xhr.status === 201) {
      // Note created
      var content = xhr.responseJSON.html;
      $(content).hide().insertBefore($container).fadeIn();
      $('[data-note-empty]').hide();
      this.reset();
    } else if(xhr.status === 204) {
      // Note updated
      var content = $('textarea', this).val();
      $container.removeClass('edit');
      $('.user-bubble_content > p', $container).text(content);
    } else {
      // Error occurred
      var message = xhr.responseJSON.join('. ');
      $error.text('Error: ' + message);
    }
  });

  // Delete note
  $(document).on('ajax:complete', '[data-note-delete]', function(e, xhr) {
    if(xhr.status === 200 || xhr.status === 204) {
      var $container = $(this).closest('.user-bubble');
      $container.fadeOut(function() { $(this).remove(); });
    }
  });
});</script><script>$(function() {
  $('[data-fullscreen-toggle]').on('click', function() {
    $(this).toggleClass('pressed');
    $('.page-editor').toggleClass('fullscreen');
    $(window).trigger('resize.FullHeight');
    $('.zoomer-container').zoomer('resize');
  });
  $('[data-layout-set]').on('click', function() {
    var mode = $(this).data('layout-set');
    Cookies.set('transcribe_layout_mode', mode, { expires: 365 });
    $('[data-layout-mode]').attr('data-layout-mode', mode);
    $('.zoomer-container').zoomer('resize');
  });
  $('#auto-fullscreen').on('change', function() {
    var checked = this.checked ? 'yes' : 'no';
    Cookies.set('auto_fullscreen', checked, { expires: 365 });
  });

});

/*
function hidePopupBody(){
  $(".popupBody").hide();
  document.getElementById("select_a_tag").innerHTML = "";
  $(".chosen-select-no-results").chosen_reset(config);
  $(".popupBody").css({"top":0,"left":0});
}

function hidePopupBody2(){
  $(".popupBody2").hide();
  $(".chosen-select-no-results2").chosen_reset(config);
  $(".popupBody2").css({"top":0,"left":0});
  document.getElementById("select_a_tag").innerHTML = "";
}

function hidePopupBodyAdv(){
  $(".popupBodyAdv").hide();
  document.getElementById("select_a_tag").innerHTML = "";
  $(".chosen-adv").chosen_reset(config);
  $(".popupBodyAdv").css({"top":0,"left":0});
}

function hidePopupBodyAdv2(){
  $(".popupBodyAdv2").hide();
  document.getElementById("select_a_tag").innerHTML = "";
  $(".chosen-adv2").chosen_reset(config);
  $(".popupBodyAdv2").css({"top":0,"left":0});
}

function hideNewDropdownDiv(){
  $("#newDropdownDiv").hide();
  $(".chosen-select-type").chosen_reset(config);
  $("#newDropdownDiv").css({"top":0,"left":0});
  document.getElementById("select_a_tag").innerHTML = "";
  document.getElementById("user-type-input").value = "";
  $("#user-type-input").hide();
}


function showSimpleOrAdvancedModeCategories(checked){
  if(checked==1){
    $("#verticalMediumClickableSpans").hide();
    $("#verticalMediumClickableSpansAdv").show();
  }else{
    $("#verticalMediumClickableSpans").show();
    $("#verticalMediumClickableSpansAdv").hide();
  }
}

$("#use_advanced_mode").on('change', function() {
  var checked = this.checked ? 1 : 0 ;
  $("#use_advanced_mode_").val(checked);
  Cookies.set("use_advanced_mode", checked, { expires: 365 });
  document.getElementsByName("page[use_advanced_mode]")[0].value=checked;
  showSimpleOrAdvancedModeCategories(checked);    
});

function parseJsonData(elementid){
  var categoryTypesDiv=document.getElementById(elementid);
  var categoriesText=categoryTypesDiv.attributes[2].textContent;
  var categoryTypesHash=JSON && JSON.parse(categoriesText) || $.parseJSON(categoriesText);
  return categoryTypesHash;
}

//Decide wich categories to show in the menu: for the simple mode or for the advanced mode
showSimpleOrAdvancedModeCategories(Cookies.get("use_advanced_mode"));

//Get the information about categories, their attributes and values for the simple mode
var categoryTypesHash=parseJsonData("categoryTypesDiv");

var catID,
    attr_name,
    categoriesInfo={};

for (catID in categoryTypesHash){
  categoriesInfo[catID]=[];
  for (attr_name in categoryTypesHash[catID]){
    categoriesInfo[catID].push([attr_name, categoryTypesHash[catID][attr_name]['allow_user_input'], categoryTypesHash[catID][attr_name]['values']]);
  }
}

//Get the information about categories, their attributes, values and sequnces of these values (attributes to be filled) for the advanced mode
var categoryTypesHashAdv=parseJsonData("categoryTypesDivAdv");

//Get the initial attributes' ids
var initialAttrIds=parseJsonData("initialAttrIds");

var offset,
    focusEl,
    anchorNode,
    beginningOfSelection,
    selection,
    enableChosen,
    options,
    categoryid,
    newDropdown,
    categoryTypesTable,
    i,
    optionType,
    tagWithType,
    type,
    varTag,
    newType,
    notCollapsedArgsTable,
    nowX,
    nowY,
    docF,
    selF,
    rangeF,
    rectF,
    xF,
    yF,
    spanF,
    spanParentF,
    rangeChildNodes,
    rangeLength,
    position,
    returnOffsetvalues,
    userChosenAttributesAndValues,
    attrName,
    catHashLength,
    coords,
    seqAttrsTable,
    attrHash;

//Parse the transcription text to transform it into XML
var l=document.getElementById("page_source_text");
var xml=l.textContent;
//xml = xml.replace(/<br><\/br>/g, '<br>'); // Esli dobavliaiu eto, to oshibka parsinga
xml = "<div id=\"bigDiv\">"+xml+"</div>";
xml = xml.replace(/<\/br>/g, "");
//xml = xml.replace(/&nbsp\;/g, '');

var parser = new DOMParser();
var doc = parser.parseFromString(xml, "text/html");
//var doc = parser.parseFromString(xml, "text/xml");

//var allDocContent=doc.childNodes[0];
var allDocContent=doc.childNodes[0].childNodes[1].childNodes[0];

var article=l;
var firstChild=article.firstChild;
if(firstChild==null){
  article.nodeValue=allDocContent;
}else{
  firstChild.parentNode.replaceChild(allDocContent,firstChild);
}

var closingElement=article.getElementsByTagName("closing")[0];

var container = article.parentNode;


var medium = new Medium({
  element: article,
  mode: Medium.richMode,
  attributes: null,
  placeholder:"",
  tags:null,
  pasteAsText: false
});


$(".popupBody").hide();
$(".popupBody2").hide();
$(".popupBodyAdv").hide();
$(".popupBodyAdv2").hide();
$("#newDropdownDiv").hide();
$("#deletion_div").hide();
$("#change_div").hide();
$("#change_selected_div").hide();    


var config = {
  ".chosen-select-no-results": {width:"100%"},
  ".chosen-select-no-results2": {width:"100%"},
  ".chosen-adv": {width:"100%"},
  ".chosen-adv2": {width:"100%"}
}

var selector;
for (selector in config) {
  $(selector).chosen(config[selector]);
}


$(".chosen-select-no-results").chosen();
$(".chosen-select-no-results2").chosen();
$(".chosen-adv").chosen();
$(".chosen-adv2").chosen();

jQuery.fn.chosen_reset = function(n){
  $(this).chosen('destroy');
  $(this).prop('selectedIndex', 0);
  $(this).chosen(n)
}

//var hotkeysHash={'insert_tag':'alt+c', 'get_out_of_tag':'alt+x','modify_tag':'alt+m','delete_tag':'alt+n','hide_popup':'alt+r'};
//If the user has defined his own hot keys, we take their values from the localstorage object
var hotkeysHash={};
hotkeysHash["insert_tag"] = localStorage["insert_tag"] || "Alt+C";
hotkeysHash["get_out_of_tag"] = localStorage["get_out_of_tag"] || "Alt+X";
hotkeysHash["modify_tag"] = localStorage["modify_tag"] || "Alt+M";
hotkeysHash["delete_tag"] = localStorage["delete_tag"] || "Alt+N";
hotkeysHash["hide_popup"] = localStorage["hide_popup"] || "Alt+R";


//Update hot keys indicated in buttons titles
function updateHotkeysInButtonTitles(){
  document.getElementsByClassName("change_tag")[0].title+=localStorage["modify_tag"] || "Alt+M";
  document.getElementsByClassName("change_tag")[1].title+=localStorage["modify_tag"] || "Alt+M";
  document.getElementsByClassName("delete_tag")[0].title+=localStorage["delete_tag"] || "Alt+N";
  document.getElementsByClassName("delete_tag")[1].title+=localStorage["delete_tag"] || "Alt+N";
  document.getElementsByClassName("hide_popup_new")[0].title+=localStorage["hide_popup"] || "Alt+R";
  document.getElementsByClassName("hide_popup_small")[0].title+=localStorage["hide_popup"] || "Alt+R";
  document.getElementsByClassName("hide_popup_small")[1].title+=localStorage["hide_popup"] || "Alt+R";
  document.getElementsByClassName("hide_popup_small")[2].title+=localStorage["hide_popup"] || "Alt+R";
  document.getElementsByClassName("hide_popup_small")[3].title+=localStorage["hide_popup"] || "Alt+R";
}

updateHotkeysInButtonTitles();

//When the user pushes the button with a key on it, this function fires and shows a popup menu that lets him change hot keys
function showChangeHotkeysMenu(){

  var listOfHelpKeys=["","Alt","Ctrl","Shift","Insert","PGUP","PGDN","FN","Tab"];

  var changeHotKeysInternal=document.getElementById("changeHotKeysInternal");

  jQuery.each(hotkeysHash, function (name, value) {
    var keyPlusKey=value.split('+');

    var firstKey=keyPlusKey[0];
    var middleKey="";
    if(keyPlusKey.length==3){
      middleKey=keyPlusKey[1];
    }

    var lastKey=keyPlusKey[keyPlusKey.length-1];

    var select = document.createElement("select");
    select.id = name;
    select.name=name;
    select.className="hotkeyDropdownMenu";

    var select2 = document.createElement("select");
    select2.id = name+'2';
    select2.name=name+'2';
    select2.className="hotkeyDropdownMenu";

    var h,
        option,
        option2;

    for(h=0; h<listOfHelpKeys.length; h++){          

      option = document.createElement("option");
      option.value=listOfHelpKeys[h];

      if(listOfHelpKeys[h]==firstKey){
        option.selected="checked";
      }else{
        option.selected="";
      }

      option.innerHTML= listOfHelpKeys[h];
      select.appendChild(option);

      option2 = document.createElement("option");
      option2.value=listOfHelpKeys[h];

      if(listOfHelpKeys[h]==middleKey){
        option2.selected="checked";
      }else{
        option2.selected="";
      }        
      option2.innerHTML= listOfHelpKeys[h];
      select2.appendChild(option2);
    }

    if(middleKey==''){
      select2.selectedIndex = -1;
    }        

    $('#changeHotKeysInternal').append('<label class="hotkey_label">' + name.replace(/_/g, ' ') + ':</label>');
    $('#changeHotKeysInternal').append(select);
    $('#changeHotKeysInternal').append(select2);
    $('#changeHotKeysInternal').append('<input type="text" id="input_'+name+'" class="hotkeyDropdownMenu" maxlength="1" value="'+lastKey+'"></input><br/>');

  });

  $("#changeHotkeysMenu").show();
}

//Hides the change hot keys pop up menu
function hideChangeKeysPopup(){
  $("#changeHotKeysInternal").empty();
  $("#changeHotkeysMenu").hide();
}

//Applies the changes to hot keys made by the user
function changeHotKeys(){
  if (typeof(Storage) !== "undefined") {
    // Code for localStorage
    var firstKey,
        middleKey,
        lastKey,
        newvalue,
        keyPlusKey,
        name,
        i,
        select1,
        valselect1=null,
        select2,
        valselect2=null,
        keys = Object.keys(hotkeysHash),
        len = keys.length;


    for(i=0; i<len; i++) {
      name=keys[i];
      keyPlusKey=hotkeysHash[name].split('+');

      firstKey=keyPlusKey[0];
      middleKey='';
      if(keyPlusKey.length==3){
        middleKey=keyPlusKey[1];
      }

      select1 = document.getElementById(name);
      if(select1.selectedIndex==-1){
        valselect1='';
      }else{
        valselect1 = select1.options[select1.selectedIndex].value || '';
      }

      select2=document.getElementById(name+'2');
      if(select2.selectedIndex==-1){
        valselect2='';
      }else{
        valselect2 = select2.options[select2.selectedIndex].value || '';
      }

      if(valselect1!=null){
        firstKey=valselect1;
      }
      if(valselect2!=null){
        middleKey=valselect2;
      }
      if(document.getElementById('input_'+name).value!=null){
        lastKey=document.getElementById('input_'+name).value;
      }

      if(middleKey!=''){
        newValue=firstKey+'+'+middleKey+'+'+lastKey;
      }else{
        newValue=firstKey+'+'+lastKey;
      }

      //If the values of all the 3 fields corresponding to new hot keys are empty, we give an error message 
      if(newValue=='+'){
        alert("The \""+name.replace(/_/g, ' ')+"\" hot key is empty. Please, choose a value.");
        break;
      }else{
        localStorage.setItem(name,newValue);
        hotkeysHash[name]=newValue;
      }

      if(i==(len-1)){
        //Hide the popup menu
        hideChangeKeysPopup();
        alert("The hot keys have been changed. Please, reload the page in your browser.");
        updateHotkeysInButtonTitles();
      }
    }

  } else {
    // Sorry! No Web Storage support..
    alert("Sorry, hot keys can't be changed. Your browser doesn't support HTML Storage.");
    //Hide the popup menu
    hideChangeKeysPopup();
  }
}


//Go out of the current tag
jQuery('#page_source_text').bind('keypress', hotkeysHash['get_out_of_tag'], function(e) {
  returnOffsetvalues=medium.returnOffset();
  offset=returnOffsetvalues[0];
  focusEl=returnOffsetvalues[1];

  if(focusEl.parentNode.id!="page_source_text" && focusEl.parentNode.id!="bigDiv" && focusEl.id!="page_source_text" && focusEl.id!="bigDiv"){
    medium.focus();
    medium.focusNadya(offset,focusEl);
    medium.cursorAfterTag(focusEl);

  }

  return false;

});

jQuery('#page_source_text').bind('keypress', 'alt+h', function(e) {
  var m = medium.value();
  console.log(m);

  if(m.match(/\u200B/)!=null){
    console.log("found invisible caracters");
  }

  return false;

});



//If the user types text in the input field of the category type select box in order to select one of the options
jQuery.fn.filterByTextS = function(textbox, medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton) {
  var option;
  var select;
  var options;
  var options2;
  var search;
  var regex;
  var arrowPosition=0;

  return this.each(function() {
    select = this;
    var length=$(select).attr("size");
    options = [];
    $(select).find('option').each(function() {
      options.push({value: $(this).val(), text: $(this).text()});
    });
    $(select).data('options', options);

    $(textbox).off().on('change keyup', function(e) {

      if (e.which == 40) {
        if(arrowPosition>=0 && arrowPosition<options.length){
          $(textbox).val(options[arrowPosition]['text']);
          if(arrowPosition!=(options.length-1)){
            arrowPosition+=1;
          }
        }
      }else if(e.which == 38){
        if(arrowPosition>=0 && arrowPosition<options.length){
          $(textbox).val(options[arrowPosition]['text']);
          if(arrowPosition!=0){
            arrowPosition=arrowPosition-1;
          }
        }
      }else{

        options2 = $(select).empty().data('options');
        $(select).attr("size", 0);
        search = $.trim($(this).val());

        if(search!=null && search!=""){
          regex = new RegExp("^"+search,"gi");

          $.each(options2, function(i) {
            if(options2!=null){
            option = options2[i];
            if(option.value!="" && option.value.match(regex) !== null) {
              $(select).append(
                $('<option>').text(option.text).val(option.value)
              );
              $(select).attr("size", $(select).attr("size")+1);
              //If the user presses enter
              if (e.which == 13) {
                if(notCollapsedArgsTable==null){
                  $("#newDropdownDiv").hide();
                  document.getElementById("select_a_tag").innerHTML = "";
                  userChosenAttributesAndValues.push([attrName,option.value]);

                  options2=null;

                  if (num<(categoryTable.length-1)){
                    getNextSomethingSelected(varTag, num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
                  }

                  if (num==(categoryTable.length-1)){
                    medium.tagSelection3(varTag, userChosenAttributesAndValues, notCollapsedArgsTable[0], focusNode, notCollapsedArgsTable[1], focusOffset);
                  }
                }else{
                  $("#newDropdownDiv").hide();
                  $("#select-type-input").hide();
                  $("#select-type-input")[0].value="";
                  $('#chosen-select-type').empty();
                  $('#chosen-select-type')[0].value="";

                  document.getElementById('select_a_tag').innerHTML = "";

                  userChosenAttributesAndValues.push([attrName,option.value]);

                  if (num<(categoryTable.length-1)){
                    getNextSomethingSelected(varTag, num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
                  }

                  if (num==(categoryTable.length-1)){
                    medium.tagSelection3(varTag, userChosenAttributesAndValues, notCollapsedArgsTable[0], focusNode, notCollapsedArgsTable[1], focusOffset);
                  }
                }
              }
            }
            }
          });
        }else{ // if search==null || search==""
          $(select).attr("size", length);
          $.each(options2, function(i) {
            option = options2[i];
            if(option.value!="") {
              $(select).append(
                $('<option>').text(option.text).val(option.value)
              );
            }
          });
        }
      }
    });
  });
};

//If the user types text in the input field of the category type select box in order to select one of the options
jQuery.fn.filterByTextCollapsed = function(textbox, medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton) {
  var option;
  var select;
  var options;
  var options2;
  var search;
  var regex;
  var arrowPosition=0;

  return this.each(function() {
    select = this;
    var length=$(select).attr("size");
    options = [];
    $(select).find('option').each(function() {
      options.push({value: $(this).val(), text: $(this).text()});
    });
    $(select).data('options', options);

    $(textbox).off().on('change keyup', function(e) {

    if (e.which == 40) {
      if(arrowPosition>=0 && arrowPosition<options.length){
        $(textbox).val(options[arrowPosition]['text']);
        if(arrowPosition!=(options.length-1)){
          arrowPosition+=1;
        }
      }
    }else if(e.which == 38){
      if(arrowPosition>=0 && arrowPosition<options.length){
        $(textbox).val(options[arrowPosition]['text']);
        if(arrowPosition!=0){
          arrowPosition=arrowPosition-1;
        }
      }
    }else{
      options2 = $(select).empty().data('options');
      $(select).attr("size", 0);
      search = $.trim($(this).val());
      if(search!=null && search!=""){
        regex = new RegExp("^"+search,"gi");

        $.each(options2, function(i) {
          if(options2!=null){
          option = options2[i];
          if(option.value!="" && option.value.match(regex) !== null) {
            $(select).append(
              $('<option>').text(option.text).val(option.value)
            );
            $(select).attr("size", $(select).attr("size")+1);
            //If the user presses enter
            if (e.which == 13) {

                $("#newDropdownDiv").hide();

                $("#select-type-input").hide();
                $("#select-type-input")[0].value="";
                $('#chosen-select-type').empty();
                $('#chosen-select-type')[0].value="";

                document.getElementById('select_a_tag').innerHTML = "";
                userChosenAttributesAndValues.push([attrName,option.value]);
                options2=null;
                if (num<(categoryTable.length-1)){
                  getNextCollapsed(varTag,num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
                }

                if (num==(categoryTable.length-1)){
                  document.getElementById('select_a_tag').innerHTML = "";
                  addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode);

                }

            }
          }
          }
        });

      }else{ // if search==null || search==""
        $(select).attr("size", length);
        $.each(options2, function(i) {
          option = options2[i];
          if(option.value!="") {
            $(select).append(
              $('<option>').text(option.text).val(option.value)
            );

          }
        });
      }
      }
    });
  });
};


function addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode){
  var couple;
  var attrString="";

    medium.focus();

    d = new Date();
    milliseconds = d.getTime();
    tagCode=milliseconds.toString();

    for (couple in userChosenAttributesAndValues){
      attrString+=" "+userChosenAttributesAndValues[couple][0]+"=\""+userChosenAttributesAndValues[couple][1]+"\"";
    }

    tagWithType='<'+varTag+' tagcode="'+tagCode+'" class="medium-'+varTag+'" '+attrString+'>\u200B</'+varTag+'>';


    medium.focusNadya(focusOffset,focusNode);
    medium.insertHtmlNadya(tagWithType, focusOffset, focusNode);
    tagWithType='';

    $('#chosen-select-type').empty();
    $('#chosen-select-type')[0].value="";

    return false;
}


function tagSelectionWithType (categoryid, categoriesInfo, medium, varTag, focusOffset,focusNode, notCollapsedArgsTable, coords,onButton){

  var categoryTable=categoriesInfo[categoryid];

  getNextSomethingSelected(varTag, 0, categoryTable,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);

}


function getNextSomethingSelected(varTag, num, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton){

    var categoryTypesTable=categoryTable[num][2];
    var attrName=categoryTable[num][0];
    var allow_user_input=categoryTable[num][1];


    //If there are predefined values for this attribute
  if(categoryTypesTable.length>0){
    //Create the new dropdown menu for category types
    newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Select");

    for(i=0; i< categoryTypesTable.length; i++){
      //Add an option for the category types dropdown menu
      addAnOption(newDropdown,categoryTypesTable[i]);

      if(i==(categoryTypesTable.length-1)){
        if(onButton==true){
          $("#newDropdownDiv").css({'top':coords.y,'left':'','right':'4vw', 'position':'absolute'});
        }else{
          $("#newDropdownDiv").css({'top':coords.y,'left':coords.x, 'right':'','position':'absolute'});
        }

        $("#newDropdownDiv").show();
        $('#select-type-input').show();
        $("#select-type-input")[0].value="";
        $('#select-type-input').focus();

        if(allow_user_input==1){ //If the user can enter a new value for this attribute          
          $('#user-type-input').show();
          jQuery.fn.userInputAttrValueSomethingSelected ($('#user-type-input'), medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
        }

        $('#chosen-select-type').filterByTextS($('#select-type-input'), medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);

        $("#chosen-select-type").off().change(attrName,function(event3){                        

          if(event3.target == this){
            type=$(this).val();
            if(type!=null && type!=''){
              newType=type;
              type='';

              userChosenAttributesAndValues.push([attrName,newType]);

              $("#newDropdownDiv").hide();
              $('#chosen-select-type').empty();
              $('#chosen-select-type')[0].value="";
              document.getElementById('select_a_tag').innerHTML = "";

              if (num<(categoryTable.length-1)){
                getNextSomethingSelected(varTag, num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
              }

              if (num==(categoryTable.length-1)){
                medium.tagSelection3(varTag, userChosenAttributesAndValues, notCollapsedArgsTable[0], focusNode, notCollapsedArgsTable[1], focusOffset);
              }

            }
          }

        });
      }
    }
  }else{//If there are no predefined values for this attribute
    if(allow_user_input==1){ //If the user can enter a new value for this attribute
      //Create the new dropdown menu for category types
      newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Input");

      if(onButton==true){
        $("#newDropdownDiv").css({'top':coords.y,'left':'','right':'4vw', 'position':'absolute'});
      }else{
        $("#newDropdownDiv").css({'top':coords.y,'left':coords.x,'right':'', 'position':'absolute'});
      }

      $("#newDropdownDiv").show();
      $("#select-type-input").hide();
      //$("#select-type-input").empty();
      $("#select-type-input")[0].value="";
      $('#chosen-select-type').empty();
      $('#chosen-select-type')[0].value="";
      $("#chosen-select-type").hide();          
      $('#user-type-input').show();
      $('#user-type-input').focus();
      jQuery.fn.userInputAttrValueSomethingSelected ($('#user-type-input'), medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
    }else{ //The user can't enter a new value (erroneous case: the attribute exists, but has no values and can't obtain one)

      alert("There is a mistake in the attribute \""+attrName+"\" design: an attribute should either have a list of predefined values or allow user input.");
      return false;

    }

  }     
}

//Create the new dropdown menu for category types
function addNewDropdown (length, attr_name, selectOrType){
  newDropdown=document.getElementById('chosen-select-type');
  newDropdown.setAttribute("size", length);

  var title=document.getElementById('select_a_tag');
  var content = document.createTextNode(selectOrType+" "+attr_name);
  title.appendChild(content);
  return newDropdown;
}

//Add an option to the dropdown menu of category types
function addAnOption(newDropdown,typedata){
  optionType=document.createElement("option");
  optionType.text=typedata;
  optionType.value=typedata;
  newDropdown.add(optionType,newDropdown.options[null]);
}


function hidePopups(){
  $("#deletion_div").hide();
  $("#deletion_div").empty();
  $("#change_div").hide();
  $("#change_div").empty();
  $("#change_selected_div").hide();
  $("#change_selected_div").empty();


  hidePopupBody();

  hidePopupBody2();

  hidePopupBodyAdv();

  hidePopupBodyAdv2();

  hideNewDropdownDiv();

  hideChangeKeysPopup();

  hideDeletionPopup();
  hideChangePopup();

  medium.focus();
  medium.focusNadya(focusOffset,focusNode);
}


//Press alt+r to make a dropdown select disappear without selecting anything
jQuery(document).bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#page_source_text').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('.popupBody').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('.popupBody2').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('.popupBodyAdv').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('.popupBodyAdv2').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#newDropdownDiv').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#deletion_div').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#change_div').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#change_selected_div').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#changeHotkeysMenu').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#changeHotKeysInternal').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#changeHotKeysInternal').children().bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('.hotkeyDropdownMenu').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('.hotkeyDropdownMenu').children().bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#select-type-input').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#select-type-input').children().bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('.chosen-search').children().bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

function getSelectionCoords(win) {
  win = win || window;
  docF = win.document;
  selF = docF.selection;
  rangeF=null;
  rectsF=null;
  rectF=null;
  spanF=null;
  spanParentF=null;

  xF = 0;
  yF = 0;

  if (selF) {
    if (selF.type != "Control") {
        rangeF = selF.createRange();
        rangeF.collapse(true);
        xF = rangeF.boundingLeft;
        yF = rangeF.boundingTop;
    }
  } else if (win.getSelection) {
    selF = win.getSelection();
    if (selF.rangeCount) {
        rangeF = selF.getRangeAt(0).cloneRange();
        if (rangeF.getClientRects.length>0) {
            rangeF.collapse(true);
            rectsF = rangeF.getClientRects();
            if (rectsF.length > 0) {
                rectF = rects[0];
            }
            xF = rectF.left;
            yF = rectF.top;
        }else{
          // Fall back to inserting a temporary element
          if (xF == 0 && yF == 0) {
            spanF = docF.createElement("span");
            if (spanF.getClientRects) {
                // Ensure span has dimensions and position by
                // adding a zero-width space character
                spanF.appendChild( docF.createTextNode("\u200b") );
                rangeF.insertNode(spanF); // inserts a node at the end of the range

                rangeChildNodes=rangeF.endContainer.childNodes;
                for (ch=0; ch<rangeChildNodes.length; ch++) {
                  var he=rangeChildNodes[ch];
                  if (he.tagName=="SPAN"){
                    spanF=he;
                    break;
                  }
                }
                //rangeLength=rangeChildNodes.length;
                //spanF=rangeF.endContainer.childNodes[rangeChildNodes.length-2];
                //rectF = getCoords2(spanF);
                rectF = spanF.getClientRects()[0];
                xF = rectF.left;
                yF = rectF.top;
                spanParentF = spanF.parentNode;

                spanParentF.removeChild(spanF);

                // Glue any broken text nodes back together
                spanParentF.normalize();
            }
          }
        }
    }
  }

  var pageScrolleFromTop=$(window).scrollTop();
  var pageScrolleFromLeft=$(window).scrollLeft();

  return { x: xF+pageScrolleFromLeft, y: yF+pageScrolleFromTop };
}


jQuery.fn.filterByTextAdvanced= function(level,textbox, medium, varTag,initialAttrIds, userChosenAttributesAndValues, attrName,attrHash, num,numSeqAttr, seqAttrsTable,categorySeqHash, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected){
  var option;
  var select;
  var options;
  var options2;
  var search;
  var regex;
  var arrowPosition=0;


  return this.each(function() {
    select = this;
    var length=$(select).attr("size");
    options = [];
    $(select).find('option').each(function() {
      options.push({value: $(this).val(), text: $(this).text()});
    });
    $(select).data('options', options);

    $(textbox).off().on('change keyup', function(e) {

    if (e.which == 40) {
      if(arrowPosition>=0 && arrowPosition<options.length){
        $(textbox).val(options[arrowPosition]['text']);
        if(arrowPosition!=(options.length-1)){
          arrowPosition+=1;
        }
      }
    }else if(e.which == 38){
      if(arrowPosition>=0 && arrowPosition<options.length){
        $(textbox).val(options[arrowPosition]['text']);
        if(arrowPosition!=0){
          arrowPosition=arrowPosition-1;
        }
      }
    }else{
      options2 = $(select).empty().data('options');
      $(select).attr("size", 0);
      search = $.trim($(this).val());
      if(search!=null && search!=""){
        regex = new RegExp("^"+search,"gi");

        $.each(options2, function(i) {
          if(options2!=null){
          option = options2[i];
          if(option.value!="" && option.value.match(regex) !== null) {
            $(select).append(
              $('<option>').text(option.text).val(option.value)
            );
            $(select).attr("size", $(select).attr("size")+1);
            //If the user presses enter
            if (e.which == 13) {
                var newType=option.value;
                $("#newDropdownDiv").hide();
                $("#select-type-input").show();
                $('#chosen-select-type').empty();
                $('#chosen-select-type')[0].value="";
                $("#chosen-select-type").show();                    
                $('#user-type-input').hide();

                $("#select-type-input")[0].value="";

                options2=null;

                document.getElementById('select_a_tag').innerHTML = "";

                userChosenAttributesAndValues.push([attrName,option.value]);

                //If the chosen value has consequent attributes
                if(attrHash[newType].length>0){

                  seqAttrsTable=attrHash[newType];
                  numSeqAttr=0;

                  tagSeqs(level+1,varTag,initialAttrIds, num, numSeqAttr, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                  return;
                }else{ //If the chosen value doesn't have consequent attributes

                  if (numSeqAttr<(seqAttrsTable.length-1)){
                    tagSeqs(level,varTag,initialAttrIds, num, numSeqAttr+1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                    return;
                  }else if (numSeqAttr==(seqAttrsTable.length-1) && numSeqAttr==0){
                    seqAttrsTable=seqAttrsPerLevel[level-1];
                    tagSeqs(level-1,varTag,initialAttrIds, num, -1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                    return;
                  }else if (numSeqAttr==(seqAttrsTable.length-1) && numSeqAttr!=0){
                    if(level==1 || level==0){
                      tagSeqsInitial(varTag,num+1, initialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                      return;
                    }else{
                      seqAttrsTable=seqAttrsPerLevel[level-1];
                      tagSeqs(level-1,varTag,initialAttrIds, num, -1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                      return;
                    }
                  }
                }
            }
          }
          }
        });

      }else{ // if search==null || search==""
        $(select).attr("size", length);
        $.each(options2, function(i) {
          option = options2[i];
          if(option.value!="") {
            $(select).append(
              $('<option>').text(option.text).val(option.value)
            );

          }
        });
      }
      }
    });
  });
}


  //The user types the value of a category attribute
jQuery.fn.userInputAttrValueAdvanced = function(level,textbox, medium, varTag,initialAttrIds, userChosenAttributesAndValues, attrName, num,numSeqAttr, seqAttrsTable,categorySeqHash, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected) {
  var option;
  var select;
  var options;
  var options2;
  var search;
  var regex;

  $(textbox).off().on('change keyup', function(e) {
    //If the user presses enter
    if (e.which == 13) {

      $("#newDropdownDiv").hide();
      $("#select-type-input").show();
      $("#select-type-input")[0].value="";
      $("#chosen-select-type").show();
      $('#chosen-select-type').empty();
      $('#chosen-select-type')[0].value="";
      $('#user-type-input').hide();
      document.getElementById('select_a_tag').innerHTML = "";

      userChosenAttributesAndValues.push([attrName,cleanAttrValue($(textbox).val())]);
      $(textbox).val('');
      if (numSeqAttr<(seqAttrsTable.length-1)){
        tagSeqs(level,varTag,initialAttrIds, num, numSeqAttr+1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
        return;
      }else if (numSeqAttr==(seqAttrsTable.length-1) && numSeqAttr==0){
        seqAttrsTable=seqAttrsPerLevel[level-1];
        tagSeqs(level-1,varTag,initialAttrIds, num, -1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
        return;
      }else if (numSeqAttr==(seqAttrsTable.length-1) && numSeqAttr!=0){
        if(level==1 || level==0){
          tagSeqsInitial(varTag,num+1, initialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
          return;
        }else{
          seqAttrsTable=seqAttrsPerLevel[level-1];
          tagSeqs(level-1,varTag,initialAttrIds, num, -1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
          return;
        }
      }
    }
  });
}

//The user types the value of a category attribute
jQuery.fn.userInputAttrValueAdvancedInitial = function(level,textbox, medium, varTag,initialAttrIds,categorySeqHash, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected) {
  var option;
  var select;
  var options;
  var options2;
  var search;
  var regex;

    $(textbox).off().on('change keyup', function(e) {
      //If the user presses enter
      if (e.which == 13) {

          $("#newDropdownDiv").hide();
          $("#select-type-input").show();
          $("#select-type-input")[0].value="";
          $("#chosen-select-type").show();
          $('#chosen-select-type').empty();
          $('#chosen-select-type')[0].value="";
          $('#user-type-input').hide();
          document.getElementById('select_a_tag').innerHTML = "";

          userChosenAttributesAndValues.push([attrName,cleanAttrValue($(textbox).val())]);
          $(textbox).val('');

          if (num<(initialAttrIds.length-1)){
            tagSeqsInitial(varTag,num+1, initialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
            return;
          }else if (num==(initialAttrIds.length-1)){
            //addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode);
            tagSeqsInitial(varTag,num+1, initialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
            return;
          }

      }
  });

}

var seqAttrsPerLevel={};
var numsSeqAttrPerLevel={};

function tagSeqs(level,varTag,initialAttrIds, num, numSeqAttr, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected){

  if(level<=0){
    tagSeqsInitial(varTag,num+1, initialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
    return;
  }else{

  //When going up we register the information for this level. This information will be used when going down
  if(numSeqAttr!=-1){
    numsSeqAttrPerLevel[level]=numSeqAttr;
    seqAttrsPerLevel[level]=seqAttrsTable;
  }

  var attrId;
  if (numSeqAttr>-1){ //When going up
    attrId=seqAttrsTable[numSeqAttr][0];
  }else if(numSeqAttr==-1){ //When going down
    //We take the registered number and take the following one
    numSeqAttr=numsSeqAttrPerLevel[level]+1;
    //And we register the number of the attribute we are going to use. It will be the last attribute used on this level
    numsSeqAttrPerLevel[level]=numSeqAttr;

    seqAttrsTable=seqAttrsPerLevel[level];

    //If the last attribute of this level was defined, we go down
    if(numSeqAttr>=seqAttrsTable.length){
      seqAttrsTable=seqAttrsPerLevel[level-1];
      tagSeqs(level-1,varTag,initialAttrIds, num, -1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
      return;
    }else{
      attrId=seqAttrsTable[numSeqAttr][0];
    }        
  }

  var categoryTypesHa=categorySeqHash[attrId];
  var attrName=categoryTypesHa['name'];
  var allow_user_input=categoryTypesHa['allow_user_input'];
  attrHash=categoryTypesHa['values'];
  var categoryTypesTable=Object.keys(attrHash);

  var i;

  //If an attribute has no predefined values and no user input possibility, give an error message
  if(categoryTypesTable.length==0 && allow_user_input==0){
    alert("There is an error in the attribute's "+attrName+" conception. It should either have predefined values or allow user input.");
  }else{
    //If there are predefined values for this attribute
    if(categoryTypesTable.length>0){
      //Create the new dropdown menu for category types
      newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Select");

      for(i=0; i< categoryTypesTable.length; i++){
        //Add an option for the category types dropdown menu
        addAnOption(newDropdown,categoryTypesTable[i]);

        if(i==(categoryTypesTable.length-1)){
          if(onButton){
            $("#newDropdownDiv").css({'top':coords.y,'left':'','right':'4vw', 'position':'absolute'});
          }else{
            $("#newDropdownDiv").css({'top':coords.y,'left':coords.x,'right':'', 'position':'absolute'});
          }

          $("#newDropdownDiv").show();
          $('#select-type-input').show();
          $("#select-type-input")[0].value="";
          $('#select-type-input').focus();
          $('#chosen-select-type')[0].value="";
          $("#chosen-select-type").show();

          if(allow_user_input==1){ //If the user can enter a new value for this attribute          
            $('#user-type-input').show();
            jQuery.fn.userInputAttrValueAdvanced (level,$('#user-type-input'), medium, varTag,initialAttrIds, userChosenAttributesAndValues, attrName, num,numSeqAttr, seqAttrsTable,categorySeqHash, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
            return;
          }

          $('#chosen-select-type').filterByTextAdvanced(level,$('#select-type-input'), medium, varTag,initialAttrIds, userChosenAttributesAndValues, attrName,attrHash, num,numSeqAttr, seqAttrsTable,categorySeqHash, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);

          $("#chosen-select-type").off().change(attrName,function(event3){                       
            document.getElementById('select_a_tag').innerHTML = "";                      
            if(event3.target == this){
              type=$(this).val();
              if(type!=null && type!=''){
                newType=type;
                type='';

                userChosenAttributesAndValues.push([attrName,newType]);

                $("#newDropdownDiv").hide();
                $('#chosen-select-type').empty();
                $('#chosen-select-type')[0].value="";

                //If the chosen value has consequent attributes
                if(attrHash[newType].length>0){
                  seqAttrsTable=attrHash[newType];
                  numSeqAttr=0;

                  tagSeqs(level+1,varTag,initialAttrIds, num, numSeqAttr, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                  return;

                }else{ //If the chosen value doesn't have consequent attributes

                  if (numSeqAttr<(seqAttrsTable.length-1)){
                    tagSeqs(level,varTag,initialAttrIds, num, numSeqAttr+1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                    return;
                  }else if (numSeqAttr==(seqAttrsTable.length-1) && numSeqAttr==0){
                    seqAttrsTable=seqAttrsPerLevel[level-1];
                    tagSeqs(level-1,varTag,initialAttrIds, num, -1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                    return;
                  }else if (numSeqAttr==(seqAttrsTable.length-1)){
                    if(level==1 || level==0){
                      tagSeqsInitial(varTag,num+1, initialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                      return;
                    }else{
                      seqAttrsTable=seqAttrsPerLevel[level-1];
                      tagSeqs(level-1,varTag,initialAttrIds, num, -1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                      return;
                    }
                  }
                }         
              }
            }     
          });
        }
      }
    }else{ //If there are no predefined values for this attribute
      if(allow_user_input==1){ //If the user can enter a new value for this attribute
        //Create the new dropdown menu for category types
        newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Input");
        if(onButton){
          $("#newDropdownDiv").css({'top':coords.y,'left':'','right':'4vw', 'position':'absolute'});
        }else{
          $("#newDropdownDiv").css({'top':coords.y,'left':coords.x,'right':'', 'position':'absolute'});
        }

        $("#newDropdownDiv").show();
        $("#select-type-input").hide();
        $("#select-type-input")[0].value="";
        $('#chosen-select-type').empty();
        $('#chosen-select-type')[0].value="";
        $("#chosen-select-type").hide();          
        $('#user-type-input').show();
        $('#user-type-input').focus();
        jQuery.fn.userInputAttrValueAdvanced (level,$('#user-type-input'), medium, varTag,initialAttrIds, userChosenAttributesAndValues, attrName, num,numSeqAttr, seqAttrsTable,categorySeqHash, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
        return;
      }else{ //The user can't enter a new value (erroneous case: the attribute exists, but has no values and can't obtain one)

        alert("There is a mistake in the attribute \""+attrName+"\" design: an attribute should either have a list of predefined values or allow user input.");
        return false;

      }
    }
    //return;
  }
  }
  return;
}


function tagSeqsInitial(varTag,num, initialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected){

  if(num>=initialAttrIds.length){
    if(selected==true){
      medium.tagSelection3(varTag, userChosenAttributesAndValues, notCollapsedArgsTable[0], focusNode, notCollapsedArgsTable[1], focusOffset);
    }else{
      addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode);
    }
    return;
  }
  var attrId=parseInt(initialAttrIds[num]);

  var categoryTypesHa=categorySeqHash[attrId];
  var attrName=categoryTypesHa['name'];
  var allow_user_input=categoryTypesHa['allow_user_input'];
  attrHash=categoryTypesHa['values'];
  var categoryTypesTable=Object.keys(attrHash); // categoryTypesTable now contains all the possible values of this attribute
  var i;


  //If an attribute has no predefined values and no user input possibility, give an error message
  if(categoryTypesTable.length==0 && allow_user_input==0){
    alert("There is an error in the attribute's "+attrName+" conception. It should either have predefined values or allow user input.");
  }else{
    //If there are predefined values for this attribute
    if(categoryTypesTable.length>0){
      //Create the new dropdown menu for category types
      newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Select");

      for(i=0; i< categoryTypesTable.length; i++){
        //Add an option for the category types dropdown menu
        addAnOption(newDropdown,categoryTypesTable[i]);

        if(i==(categoryTypesTable.length-1)){
          if(onButton){
            $("#newDropdownDiv").css({'top':coords.y,'left':'','right':'4vw', 'position':'absolute'});
          }else{
            $("#newDropdownDiv").css({'top':coords.y,'left':coords.x,'right':'', 'position':'absolute'});
          }

          $("#newDropdownDiv").show();
          $('#select-type-input').show();
          $("#select-type-input")[0].value="";
          $('#select-type-input').focus();
          //$('#chosen-select-type').empty();
          $('#chosen-select-type')[0].value="";
          $("#chosen-select-type").show();

          if(allow_user_input==1){ //If the user can enter a new value for this attribute          
            $('#user-type-input').show();
            jQuery.fn.userInputAttrValueAdvancedInitial (0,$('#user-type-input'), medium, varTag,initialAttrIds,categorySeqHash, userChosenAttributesAndValues, attrName, num,categorySeqHash, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
          }

          $('#chosen-select-type').filterByTextAdvanced(0,$('#select-type-input'), medium, varTag,initialAttrIds, userChosenAttributesAndValues, attrName, attrHash,num,num,initialAttrIds,categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);

          $("#chosen-select-type").off().change(attrName,function(event3){   

            if(event3.target == this){
              type=$(this).val();
              if(type!=null && type!=''){
                newType=type;
                type='';

                userChosenAttributesAndValues.push([attrName,newType]);
                $("#newDropdownDiv").hide();
                $('#chosen-select-type').empty();
                $('#chosen-select-type')[0].value="";
                document.getElementById('select_a_tag').innerHTML = "";

                //If the chosen value has consequent attributes
                if(Object.keys(attrHash).length>0 && attrHash[newType].length>0){

                  seqAttrsTable=attrHash[newType];

                  var numSeqAttr=0;
                  var seqAttrId=seqAttrsTable[numSeqAttr][0];
                  var seqAttrName=seqAttrsTable[numSeqAttr][1];

                  tagSeqs(1,varTag,initialAttrIds, num, numSeqAttr, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                }else{

                  if (num<(initialAttrIds.length-1)){
                    tagSeqsInitial(varTag,num+1, initialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                  }else if (num==(initialAttrIds.length-1)){
                    if(selected==true){
                      medium.tagSelection3(varTag, userChosenAttributesAndValues, notCollapsedArgsTable[0], focusNode, notCollapsedArgsTable[1], focusOffset);
                    }else{
                      addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode);
                    }
                  }
                }         
              }
            }

          });
        }
      }
    }else{ //If there are no predefined values for this attribute
      if(allow_user_input==1){ //If the user can enter a new value for this attribute
        //Create the new dropdown menu for category types
        newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Input");
        if(onButton){
          $("#newDropdownDiv").css({'top':coords.y,'left':'','right':'4vw', 'position':'absolute'});
        }else{
          $("#newDropdownDiv").css({'top':coords.y,'left':coords.x,'right':'', 'position':'absolute'});
        }

        $("#newDropdownDiv").show();
        $("#select-type-input").hide();
        $("#select-type-input")[0].value="";
        $('#chosen-select-type').empty();
        $('#chosen-select-type')[0].value="";
        $("#chosen-select-type").hide();          
        $('#user-type-input').show();
        $('#user-type-input').focus();
        jQuery.fn.userInputAttrValueAdvancedInitial (0,$('#user-type-input'), medium, varTag,initialAttrIds,categorySeqHash, userChosenAttributesAndValues, attrName, num,categorySeqHash, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
      }else{ //The user can't enter a new value (erroneous case: the attribute exists, but has no values and can't obtain one)

        alert("There is a mistake in the attribute \""+attrName+"\" design: an attribute should either have a list of predefined values or allow user input.");
        return false;

      }
    }

  }
}

function getNextCollapsed(varTag,num, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton){

  var categoryTypesTable=categoryTable[num][2];
  var attrName=categoryTable[num][0];
  var allow_user_input=categoryTable[num][1];        

  //If there are predefined values for this attribute
  if(categoryTypesTable.length>0){
    //Create the new dropdown menu for category types
    newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Select");

    for(i=0; i< categoryTypesTable.length; i++){
      //Add an option for the category types dropdown menu
      addAnOption(newDropdown,categoryTypesTable[i]);

      if(i==(categoryTypesTable.length-1)){
        if(onButton){
          $("#newDropdownDiv").css({'top':coords.y,'left':'','right':'4vw', 'position':'absolute'});
        }else{
          $("#newDropdownDiv").css({'top':coords.y,'left':coords.x,'right':'', 'position':'absolute'});
        }

        $("#newDropdownDiv").show();
        $('#select-type-input').show();
        $("#select-type-input")[0].value="";
        $('#select-type-input').focus();
        //$('#chosen-select-type').empty();
        $("#chosen-select-type").show();

        if(allow_user_input==1){ //If the user can enter a new value for this attribute          
          $('#user-type-input').show();
          jQuery.fn.userInputAttrValueCollapsed ($('#user-type-input'), medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
        }

        $('#chosen-select-type').filterByTextCollapsed($('#select-type-input'), medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);

        $("#chosen-select-type").off().change(attrName,function(event3){                        
          document.getElementById('select_a_tag').innerHTML = "";                      
          if(event3.target == this){
            type=$(this).val();
            if(type!=null && type!=''){
              newType=type;
              type='';

              userChosenAttributesAndValues.push([attrName,newType]);

              $("#newDropdownDiv").hide();
              $('#chosen-select-type').empty();
              $('#chosen-select-type')[0].value="";

              if (num<(categoryTable.length-1)){
                getNextCollapsed(varTag,num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
              }

              if (num==(categoryTable.length-1)){
                addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode);
              }

            }
          }

        });
      }
    }
  }else{ //If there are no predefined values for this attribute
    if(allow_user_input==1){ //If the user can enter a new value for this attribute
      //Create the new dropdown menu for category types
      newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Input");
      if(onButton){
        $("#newDropdownDiv").css({'top':coords.y,'left':'','right':'4vw', 'position':'absolute'});
      }else{
        $("#newDropdownDiv").css({'top':coords.y,'left':coords.x,'right':'', 'position':'absolute'});
      }

      $("#newDropdownDiv").show();
      $("#select-type-input").hide();
      $("#select-type-input")[0].value="";
      $('#chosen-select-type').empty();
      $('#chosen-select-type')[0].value="";
      $("#chosen-select-type").hide();          
      $('#user-type-input').show();
      $('#user-type-input').focus();
      jQuery.fn.userInputAttrValueCollapsed ($('#user-type-input'), medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
    }else{ //The user can't enter a new value (erroneous case: the attribute exists, but has no values and can't obtain one)

      alert("There is a mistake in the attribute \""+attrName+"\" design: an attribute should either have a list of predefined values or allow user input.");
      return false;

    }
  }
}


function collapsedNoAttributesInsertTag(varTag,focusOffset,focusNode){
  medium.focus();

  d = new Date();
  milliseconds = d.getTime();
  tagCode=milliseconds.toString();


  tagWithType='<'+varTag+' tagcode="'+tagCode+'" class="medium-'+varTag+'" mode="'+userChosenAttributesAndValues[0][1]+'">\u200B</'+varTag+'>';

  medium.focusNadya(focusOffset,focusNode);
  medium.insertHtmlNadya(tagWithType, focusOffset, focusNode);

  tagWithType='';
  $('.chosen-select-no-results').chosen_reset(config);
  $(".popupBody").hide();
  document.getElementById('select_a_tag').innerHTML = "";

  return false;
}

//Remove forbidden characters from an attribute's value
function cleanAttrValue(val){
  val=$( $.parseHTML(val) ).text(); //Against malicious user input (a script in an input field)
  if(val==null || val==''){
    alert("The attribute's value is empty.");
  }
  return val.replace(/[<&"'>]+/g, "_");
}

//The user types the value of a category attribute in an input field
jQuery.fn.userInputAttrValueSomethingSelected = function(textbox, medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton) {
  var option;
  var select;
  var options;
  var options2;
  var search;
  var regex;

    $(textbox).off().on('change keyup', function(e) {
      //If the user presses enter
      if (e.which == 13) {

          $("#newDropdownDiv").hide();
          $("#select-type-input").show();
          $("#select-type-input")[0].value="";
          $("#chosen-select-type").show();
          $('#chosen-select-type').empty();
          $('#chosen-select-type')[0].value="";
          $('#user-type-input').hide();
          document.getElementById('select_a_tag').innerHTML = "";


          userChosenAttributesAndValues.push([attrName,cleanAttrValue($(textbox).val())]);
          $(textbox).val('');
          if (num<(categoryTable.length-1)){
            getNextSomethingSelected(varTag, num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
          }

          if (num==(categoryTable.length-1)){
            medium.tagSelection3(varTag, userChosenAttributesAndValues, notCollapsedArgsTable[0], focusNode, notCollapsedArgsTable[1], focusOffset);

          }

      }
  });
};


//The user types the value of a category attribute
jQuery.fn.userInputAttrValueCollapsed = function(textbox, medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton) {
  var option;
  var select;
  var options;
  var options2;
  var search;
  var regex;

    $(textbox).off().on('change keyup', function(e) {
      //If the user presses enter
      if (e.which == 13) {

          $("#newDropdownDiv").hide();
          $("#select-type-input").show();
          $("#select-type-input")[0].value="";
          $("#chosen-select-type").show();
          $('#chosen-select-type').empty();
          $('#chosen-select-type')[0].value="";
          $('#user-type-input').hide();
          document.getElementById('select_a_tag').innerHTML = "";

          userChosenAttributesAndValues.push([attrName,cleanAttrValue($(textbox).val())]);
          $(textbox).val('');
          if (num<(categoryTable.length-1)){
              getNextCollapsed(varTag,num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
          }

          if (num==(categoryTable.length-1)){
            addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode);
          }

      }
  });

}


//Add tag
jQuery('#page_source_text').bind('keypress', hotkeysHash['insert_tag'], function(e) {
  if(Cookies.get('use_advanced_mode')==1){
    tagInAdvancedMode();
  }else{
    tagInSimpleMode();
  }
});

function buttonFunction(categoryid,categoryTag,coords){

  if(Cookies.get('use_advanced_mode')==1){
    tagButtonInAdvancedMode(categoryid,categoryTag,coords);
  }else{
    tagButtonInSimpleMode(categoryid,categoryTag,coords);
  }
}

function tagButtonInSimpleMode(categoryid,categoryTag,coords){
  userChosenAttributesAndValues=[['mode',0]];
  selection = window.getSelection();
  [focusOffset,focusNode,anchorOffset,anchorNode]=medium.returnOffset();
  notCollapsedArgsTable=[anchorNode,anchorOffset];

  if(categoryid in categoryTypesHash){
    if(selection.isCollapsed){
      //userChosenAttributesAndValues=[];
      var categoryTable=categoriesInfo[categoryid];
      getNextCollapsed(categoryTag,0, categoryTable,focusOffset,focusNode, notCollapsedArgsTable,coords,true);
    }else{
      tagSelectionWithType(categoryid, categoriesInfo, medium, categoryTag, focusOffset, focusNode, [anchorNode, anchorOffset], coords,true);
    }
  }else{
    if(selection.isCollapsed){
      collapsedNoAttributesInsertTag(categoryTag,focusOffset,focusNode);
    }else{
      medium.tagSelection3(categoryTag, userChosenAttributesAndValues, anchorNode,focusNode,anchorOffset, focusOffset);
    }
  }
  //return false;
}

function tagButtonInAdvancedMode(categoryid,categoryTag,coords){
  userChosenAttributesAndValues=[['mode',1]];
  selection = window.getSelection();
  [focusOffset,focusNode,anchorOffset,anchorNode]=medium.returnOffset();

  notCollapsedArgsTable=[anchorNode,anchorOffset];

  if(selection.isCollapsed){
    //If the category has types
    if(categoryid in categoryTypesHashAdv){

      //userChosenAttributesAndValues=[];

      var categorySeqHash=categoryTypesHashAdv[categoryid];
      var thisCategoryInitialAttrIds=[];
      if(initialAttrIds.hasOwnProperty(categoryid)){
        thisCategoryInitialAttrIds=initialAttrIds[categoryid];
      }else{
        thisCategoryInitialAttrIds=[];
      }

      tagSeqsInitial(categoryTag,0, thisCategoryInitialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,true,false);

    }else{ //If the category doesn't have types

      collapsedNoAttributesInsertTag(categoryTag,focusOffset,focusNode);

    }
  }else{ //If the selection is not collapsed
    //If the category has types
    if(categoryid in categoryTypesHashAdv){

      //userChosenAttributesAndValues=[];

      var categorySeqHash=categoryTypesHashAdv[categoryid];
      var thisCategoryInitialAttrIds=[];
      if(initialAttrIds.hasOwnProperty(categoryid)){
        thisCategoryInitialAttrIds=initialAttrIds[categoryid];
      }else{
        thisCategoryInitialAttrIds=[];
      }

      tagSeqsInitial(categoryTag,0, thisCategoryInitialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,true,true);

    }else{ //If the category doesn't have types
      medium.tagSelection3(categoryTag, userChosenAttributesAndValues, anchorNode,focusNode,anchorOffset, focusOffset);
      //medium.tagSelection3(categoryTag, [], anchorNode,focusNode,anchorOffset, focusOffset);

      return false;
    }
  }
}

function tagInAdvancedMode(){
  userChosenAttributesAndValues=[['mode',1]];
  //var coords = getSelectionCoords();
  coords = getSelectionCoords();
  nowX=coords.x;
  nowY=coords.y;

  [focusOffset,focusNode,anchorOffset,anchorNode]=medium.returnOffset();
  notCollapsedArgsTable=[anchorNode,anchorOffset];
  selection = window.getSelection();

  //If the cursor is in the medium, but nothing has been selected
  if(selection.isCollapsed){
    $(".popupBodyAdv").css({'top':nowY,'left':nowX});
    $(".popupBodyAdv").show();
    $(".chosen-adv").trigger('chosen:activate');
    //$(".chosen-adv").show();


    $(".chosen-adv").chosen().change(function(event){
      if(event.target == this){
        $tag=$(this).val();
        if($tag!= null && $tag!=''){
          varTag=$tag;
          $tag='';
          options = $( ".chosen-adv option:selected" );
          categoryid=options[0].attributes[1].value;
          $('.chosen-adv').chosen_reset(config);
          $(".popupBodyAdv").hide();
          $(".popupBodyAdv").css({'top':0,'left':0});
          document.getElementById('select_a_tag').innerHTML = "";

          //If the category has types
          if(categoryid in categoryTypesHashAdv){

            //userChosenAttributesAndValues=[];

            var categorySeqHash=categoryTypesHashAdv[categoryid];
            var thisCategoryInitialAttrIds=[];
            if(initialAttrIds.hasOwnProperty(categoryid)){
              thisCategoryInitialAttrIds=initialAttrIds[categoryid];
            }else{
              thisCategoryInitialAttrIds=[];
            }

            tagSeqsInitial(varTag,0, thisCategoryInitialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,false,false);

          }else{ //If the category doesn't have types

            collapsedNoAttributesInsertTag(varTag,focusOffset,focusNode);

          }
        }
        return false;
      }
      return false;
    });

  }else{ //If selection is not collapsed: if something has been selected
    $(".popupBodyAdv2").css({'top':nowY,'left':nowX});
    $(".popupBodyAdv2").show();

    $(".chosen-adv2").trigger('chosen:activate');


    $(".chosen-adv2").chosen().change(function(event4){
      if(event4.target == this){
        $tag2=$(this).val();
        if($tag2!= null && $tag2!=''){
          varTag=$tag2;
          $tag2='';
          options = $( ".chosen-adv2 option:selected" );
          categoryid=options[0].attributes[1].value;
          //$('.chosen-select-no-results2').chosen_reset(config);
          $('.chosen-adv2').chosen_reset(config);
          $(".popupBodyAdv2").hide();
          $(".popupBodyAdv2").css({'top':0,'left':0});
          document.getElementById('select_a_tag').innerHTML = "";

          //If the category has types
          if(categoryid in categoryTypesHashAdv){
            userChosenAttributesAndValues=[['mode',1]];
            //userChosenAttributesAndValues=[];

            var categorySeqHash=categoryTypesHashAdv[categoryid];

            var thisCategoryInitialAttrIds=[];
            if(initialAttrIds.hasOwnProperty(categoryid)){
              thisCategoryInitialAttrIds=initialAttrIds[categoryid];
            }else{
              thisCategoryInitialAttrIds=[];
            }

            tagSeqsInitial(varTag,0, thisCategoryInitialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,false,true);

          }else{ //If the category doesn't have types

            medium.tagSelection3(varTag, [], anchorNode,focusNode,anchorOffset, focusOffset);

            return false;
          }
        }
        return false;
      }
      return false;
    });
  }

}

//Add tag in simplemode
function tagInSimpleMode() {
  userChosenAttributesAndValues=[['mode',0]];
  //var coords = getSelectionCoords();
  coords = getSelectionCoords();
  nowX=coords.x;
  nowY=coords.y;

  [focusOffset,focusNode,anchorOffset,anchorNode]=medium.returnOffset();
  notCollapsedArgsTable=[anchorNode,anchorOffset];
  selection = window.getSelection();


  //If the cursor is in the medium, but nothing has been selected
  if(selection.isCollapsed){
    $(".popupBody").css({'top':nowY,'left':nowX});
    $(".popupBody").show();

    $(".chosen-select-no-results").trigger('chosen:activate');

    $(".chosen-select-no-results").chosen().change(function(event){
      if(event.target == this){
        $tag=$(this).val();
        if($tag!= null && $tag!=''){
          varTag=$tag;
          $tag='';
          options = $( ".chosen-select-no-results option:selected" );
          categoryid=options[0].attributes[1].value;
          $('.chosen-select-no-results').chosen_reset(config);
          $(".popupBody").hide();
          $(".popupBody").css({'top':0,'left':0});
          document.getElementById('select_a_tag').innerHTML = "";

          //If the category has types
          if(categoryid in categoriesInfo){

            //userChosenAttributesAndValues=[];

            var categoryTable=categoriesInfo[categoryid];

            getNextCollapsed(varTag,0, categoryTable,focusOffset,focusNode, notCollapsedArgsTable,coords,false);

          }else{ //If the category doesn't have types

            collapsedNoAttributesInsertTag(varTag,focusOffset,focusNode);

          }
        }
        return false;
      }
      return false;
    });

  }else{ //If selection is not collapsed: if something has been selected
    $(".popupBody2").css({'top':nowY,'left':nowX});
    $(".popupBody2").show();

    $(".chosen-select-no-results2").trigger('chosen:activate');


    $(".chosen-select-no-results2").chosen().change(function(event4){
      if(event4.target == this){
        $tag2=$(this).val();
        if($tag2!= null && $tag2!=''){
          varTag=$tag2;
          $tag2='';
          options = $( ".chosen-select-no-results2 option:selected" );
          categoryid=options[0].attributes[1].value;
          $('.chosen-select-no-results2').chosen_reset(config);
          $(".popupBody2").hide();
          $(".popupBody2").css({'top':0,'left':0});
          document.getElementById('select_a_tag').innerHTML = "";

          //If the category has types
          if(categoryid in categoryTypesHash){
            tagSelectionWithType(categoryid, categoriesInfo, medium, varTag, focusOffset,focusNode, notCollapsedArgsTable, coords, false);

          }else{ //If the category doesn't have types

            //medium.tagSelection3(varTag, [], anchorNode,focusNode,anchorOffset, focusOffset);
            medium.tagSelection3(varTag, userChosenAttributesAndValues, anchorNode,focusNode,anchorOffset, focusOffset);
            return false;
          }
        }
        return false;
      }
      return false;
    });

  } // End if selection.isCollapsed

  //return false;
};


article.highlight = function() {
  if (document.activeElement !== article) {
    medium.select();
  }
};


$( ".undo" ).mousedown(function() {
  medium.undo();
  return false;
});

$( ".delete_tag" ).mousedown(function() {
  position = $(this).offset();
  //var coords = {x:position.left, y:position.top};
  coords = {x:position.left, y:position.top};
  deleteTag(coords,true);
});


//Delete a tag
jQuery('#page_source_text').bind('keypress', hotkeysHash['delete_tag'], function(e) {
  var coords = getSelectionCoords();
  deleteTag(coords,false);
});


$( ".change_tag" ).mousedown(function() {
  position = $(this).offset();
  //var coords = {x:position.left, y:position.top};
  coords = {x:position.left, y:position.top};
  changeTag(coords,true);
});


//Change a tag
jQuery('#page_source_text').bind('keypress', hotkeysHash['modify_tag'], function(e) {
  coords = getSelectionCoords();
  changeTag(coords,false);
});

function findParents(){
  [focusOffset,focusNode,anchorOffset,anchorNode]=medium.returnOffset();
  var els = [];
  var a=anchorNode;

  //Find all the parents of the anchorNode (the node where the cursor or the beginning of the selection is)
  while (a!=null) {
    a = a.parentNode;
    if(a.id=="page_source_text"){
      break;
    }
    if(a.tagName!="DIV"){
      els.unshift(a);
    }
  }
  return els;
}

//Change a tag
function changeTag(coords,onButton){
  if ( $("#change_div").css('display') == 'none' ){

  var els = findParents();

  //If the node has parent nodes (=tags)
  if(els.length>0){

    var i,
      name,
      nameTag,
      menuDiv=document.getElementById("change_div"),
      radio,
      label,
      button,
      hideDivButton=document.createElement('button');

      hideDivButton.className="hide_popup_button";
      hideDivButton.title=localStorage['hide_popup'] || 'Alt+R';
      hideDivButton.appendChild(document.createTextNode("\u26cc"));
      hideDivButton.onclick=function(){
        hideChangePopup(); 
      };
      menuDiv.appendChild(hideDivButton);

      var titlediv = document.createElement("div");
      titlediv.appendChild(document.createTextNode("Choose the tag to modify:"));
      titlediv.className="popup_title_div";
      menuDiv.appendChild(titlediv);


    //Create a menu
    for(i=0; i<els.length; i++){
      nameTag=els[i].nodeName;
      name=nameTag.replace(/_ID\d+$/g, "");
      radio = document.createElement('input');
      radio.type = "radio";
      radio.name = "change_tag_radio";
      radio.value = els[i].getAttribute('tagcode');
      radio.id = "change_radio_"+nameTag;
      label = document.createElement('label');
      label.htmlFor = "change_radio_"+nameTag;
      label.className=("medium-"+nameTag).toLowerCase();
      label.appendChild(document.createTextNode(name));
      menuDiv.appendChild(radio);
      menuDiv.appendChild(label);
      menuDiv.appendChild(document.createElement('br'));        
    }

    button = document.createElement('button');
    button.onclick = function(){
      changeSelectedTag(coords,onButton);
    };

    button.appendChild(document.createTextNode("Change the chosen tag"));
    menuDiv.appendChild(button);
    if(onButton==true){
      $("#change_div").css({'top':coords.y+20,'left':'','right':'4vw', 'position':'absolute'});
    }else{
      $("#change_div").css({'top':coords.y+20,'left':coords.x, 'right':'', 'position':'absolute'});
    }

    $("#change_div").show();
  }
  }
}

//Get all attributes of a node
function getAttributes ($node) {
  var attrs = {};
  $.each( $node[0].attributes, function ( index, attribute ) {
    attrs[attribute.name] = attribute.value;
  } );

  return attrs;
}

function updateCorrespondingInput(inputId,newvalue){
  $("#"+inputId).val(newvalue);
}

function hideDeletionPopup(){
  $("#deletion_div").empty();
  $("#deletion_div").hide();
}

function hideChangePopup(){
  //Delete the radios from the menu div
  $('#change_div').empty();
  //Hide the menu
  $("#change_div").hide();
}

function hideChangeAttributesPopup(){
  //Delete the radios from the menu div
  $("#change_selected_div").empty();
  //Hide the menu
  $("#change_selected_div").hide();
}

//Functions that calls medium.js in order to remove the tags chosen via the popup menu checkboxes
function changeSelectedTag(coords,onButton){

  //Get the checked tagcode
  var tagCodeToChange = $("input[name=change_tag_radio]:checked").val();

  //Delete the radios from the menu div
  $('#change_div').empty();
  //Hide the menu
  $("#change_div").hide();

  var attrs=getAttributes($("[tagcode="+tagCodeToChange+"]"));
  var tagName=$("[tagcode="+tagCodeToChange+"]").prop("tagName");
  var catId=tagName.match(/_ID(\d+)$/)[1];

  var div = document.getElementById("change_selected_div"),
      input,
      label,
      attrName,
      button,
      numberOfChangableAttrs=0,
      i,
      option,
      hideDivButton=document.createElement('button');


  hideDivButton.className="hide_popup_button";
  hideDivButton.title=localStorage['hide_popup'] || 'Alt+R';
  hideDivButton.appendChild(document.createTextNode("\u26cc"));
  hideDivButton.onclick=function(){
    hideChangeAttributesPopup(); 
  };
  div.appendChild(hideDivButton);

  var titlediv = document.createElement("div");
  var span=document.createElement("span");
  span.className=("medium-"+tagName).toLowerCase();
  span.appendChild(document.createTextNode(tagName.match(/^(.+)_ID\d+$/)[1]));

  titlediv.appendChild(document.createTextNode("Modify attribute values of the "));
  titlediv.appendChild(span);
  titlediv.appendChild(document.createTextNode(" tag:"));
  titlediv.className="popup_title_div";
  div.appendChild(titlediv);

  //var attrsHash=categoryTypesHash[parseInt(catId)];
  var attrsHashBefore={};
  var attrsHash={};

  //If the element was added in the advanced mode, we look for its attributes in the advanced mode hash. Otherwise we look for its attributes in the simple mode hash.
  if(attrs["mode"]=="1"){
    attrsHashBefore=categoryTypesHashAdv[parseInt(catId)];
    var key;
    for(key in attrsHashBefore){
      attrsHash[attrsHashBefore[key].name]={'allow_user_input':attrsHashBefore[key].allow_user_input,'values':Object.keys(attrsHashBefore[key].values)};
    }
  }else{
    attrsHash=categoryTypesHash[parseInt(catId)];
  }

  //Loop through all attributes of the chosen category
  for (attrName in attrs){
    if(attrName!='class' && attrName!='tagcode' && attrName!='mode'){
      //If the attribute is in the hash of attributes for this category (in case it had been deleted by the collection owner)
      if(attrsHash[attrName]!=null){
        label = document.createElement('label');
        label.setAttribute("for","value_"+attrName);
        label.setAttribute("class","popup_attribute_label");
        label.innerHTML = attrName;
        div.appendChild(label);
        numberOfChangableAttrs+=1;

        //If the user is allowed to type attribute values
        if(attrsHash[attrName]['allow_user_input']==1){
          input = document.createElement("input");
          input.type = "text";
          input.id = "value_"+attrName;
          input.value = attrs[attrName];
          input.name=tagCodeToChange;
          input.className="input_attribute_value_transcribe";
          div.appendChild(input);
        }

        //If there are predefined attributes
        if(attrsHash[attrName]['values'].length>0){
          //Create a dropdown to let the user select an attribute value from the list
          var select = document.createElement("select");
          select.className="input_attribute_value_transcribe";
          select.id = "value_"+attrName;
          select.name='select_'+tagCodeToChange;
          select.onchange=function(){
            updateCorrespondingInput(this.id,this.value);
          };


          for (i=0; i<attrsHash[attrName]['values'].length; i++){
            option = document.createElement("option");
            option.value=attrsHash[attrName]['values'][i];
            if(attrsHash[attrName]['values'][i]==attrs[attrName]){
              option.selected="checked";
            }else{
              option.selected="";
            }
            option.innerHTML=attrsHash[attrName]['values'][i];

            select.appendChild(option);
          }

          div.appendChild(select);
        }
      }
    }
  }


  if(numberOfChangableAttrs>0){
    button = document.createElement('button');
    button.onclick = function(){
      saveChangesInAttributeValues(tagCodeToChange);
    };

    button.appendChild(document.createTextNode("Save changes"));
    div.appendChild(button);

    if(onButton==true){
      $("#change_selected_div").css({'top':coords.y+20,'left':'','right':'4vw', 'position':'absolute'});
    }else{
      $("#change_selected_div").css({'top':coords.y+20,'left':coords.x,'right':'', 'position':'absolute'});
    }

    $("#change_selected_div").show();
  }else{
    $("#change_selected_div").hide();
    $("#change_selected_div").empty();
    alert("The tag "+tagName.match(/^(.+)_ID\d+$/)[1]+" has no attributes.");
  }

}

//Save changes the user made in the values of attributes of the chosen tag
function saveChangesInAttributeValues(tagCode){
  //Get new values
  var el,
    nodeList=document.getElementsByName(tagCode),
    nodeListSelect=document.getElementsByName('select_'+tagCode),
    newAttrsValuesTable={},
    id;

  //Create a hash with attribute names and their new values
  //First put inside values from the drop down select
  if(nodeListSelect.length>0){
  for (el=0; el<nodeListSelect.length; el++){
    id=nodeListSelect[el].id.substring(6);
    newAttrsValuesTable[id]=nodeListSelect[el].value;

    if(el==(nodeListSelect.length-1)){
      if(nodeList.length>0){
      //Next put inside values from the input fields
      for (el=0; el<nodeList.length; el++){
        id=nodeList[el].id.substring(6);
        newAttrsValuesTable[id]=cleanAttrValue(nodeList[el].value);

        if(el==(nodeList.length-1)){
          $("#change_selected_div").hide();
          $("#change_selected_div").empty();
          medium.changeSelectedTag(tagCode,newAttrsValuesTable);
          return false;
        }
      }
      }else{
          $("#change_selected_div").hide();
          $("#change_selected_div").empty();
          medium.changeSelectedTag(tagCode,newAttrsValuesTable);
          return false;
      }
    }
  }
  }else{
    //Next put inside values from the input fields
      for (el=0; el<nodeList.length; el++){
        id=nodeList[el].id.substring(6);
        newAttrsValuesTable[id]=cleanAttrValue(nodeList[el].value);

        if(el==(nodeList.length-1)){
          $("#change_selected_div").hide();
          $("#change_selected_div").empty();
          medium.changeSelectedTag(tagCode,newAttrsValuesTable);
          return false;
      }
    }
  }


}

//Delete a tag
function deleteTag(coords,onButton){
  if ( $("#deletion_div").css('display') == 'none' ){

  var els = findParents();

  //If the node has parent nodes (=tags)
  if(els.length>0){
    var i,
      name,
      nameTag,
      menuDiv=document.getElementById("deletion_div"),
      checkbox,
      label,
      button,
      hideDivButton=document.createElement('button');

      hideDivButton.className="hide_popup_button";
      hideDivButton.title=localStorage['hide_popup'] || 'Alt+R';
      hideDivButton.appendChild(document.createTextNode("\u26cc"));
      hideDivButton.onclick=function(){
        hideDeletionPopup(); 
      };
      menuDiv.appendChild(hideDivButton);

      var titlediv = document.createElement("div");
      titlediv.appendChild(document.createTextNode("Choose tag(s) to delete:"));
      titlediv.className="popup_title_div";
      menuDiv.appendChild(titlediv);


    //Create a menu
    for(i=0; i<els.length; i++){
      nameTag=els[i].nodeName;
      name=nameTag.replace(/_ID\d+$/g, "");
      checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = "delete_tag_checkbox";
      checkbox.value = els[i].getAttribute('tagcode');
      checkbox.id = "delete_checkbox_"+nameTag;
      label = document.createElement('label');
      label.htmlFor = "delete_checkbox_"+nameTag;
      label.className = "medium-"+nameTag.toLowerCase();
      label.appendChild(document.createTextNode(name));
      menuDiv.appendChild(checkbox);
      menuDiv.appendChild(label);
      menuDiv.appendChild(document.createElement('br'));        
    }

    button = document.createElement('button');
    button.onclick = function(){
      removeTag();
    };

    button.appendChild(document.createTextNode("Delete the chosen tag(s)"));
    menuDiv.appendChild(button);

    if(onButton==true){
      $("#deletion_div").css({'top':coords.y+20,'left':'','right':'4vw', 'position':'absolute'});
    }else{
      $("#deletion_div").css({'top':coords.y+20,'left':coords.x,'right':'', 'position':'absolute'});
    }
    $("#deletion_div").show();
  }
  }
}

// Pass the checkbox name to the function
function getCheckedBoxes(chkboxName) {
  var checkboxes = document.getElementsByName(chkboxName);
  var checkboxesChecked = [];
  // loop over them all
  for (var i=0; i<checkboxes.length; i++) {
    // And stick the checked ones onto an array...
    if (checkboxes[i].checked) {
      checkboxesChecked.push(checkboxes[i].value);
    }
  }
  // Return the array if it is non-empty, or null
  return checkboxesChecked.length > 0 ? checkboxesChecked : null;
}

//Functions that calls medium.js in order to remove the tags chosen via the popup menu checkboxes
function removeTag(){

  //Get the checked options
  var checkedTagcodes = getCheckedBoxes("delete_tag_checkbox");
  //Delete the checkboxes from the menu div
  $('#deletion_div').empty();
  //Hide the menu
  $("#deletion_div").hide();
  if(checkedTagcodes!=null && checkedTagcodes.length>0){
    medium.removeTags(checkedTagcodes);
  }

}

//Check if a string contains valid XML
function isXML(xml){
  try {
    xmlDoc = $.parseXML(xml); //is valid XML
    return true;
  } catch (err) {
    // was not XML
    return false;
  }
}


//Add the transcription text to the form before sending it to the server
function AddMediumValue() {
  mediumValue = medium.value();

  mediumValue = mediumValue.replace(/<br>/g, "<br></br>");

  mediumValue = mediumValue.replace(/\u200B/g, ""); //Delete invisible caracters inserted for +h and +c actions, because otherwise didn't work in webkit (chrome, safari)

  //mediumValue = mediumValue.replace(/&nbsp;/g, "&#160;"); // &nbsp; is not valid XML
  mediumValue = mediumValue.replace(/&nbsp;/g, " "); // &nbsp; is not valid XML

  if(mediumValue.match(/^<div id=\"bigDiv\">/)==null){
    mediumValue = "<div id=\"bigDiv\">"+mediumValue+"<\/div>";
  }

  if(isXML(mediumValue)){
    mediumValue = mediumValue.replace(/<div id=\"bigDiv\">/, '');
    mediumValue = mediumValue.replace(/<\/div>/, '');
    document.getElementsByName("page[source_text]")[0].value=mediumValue;
    return true;   // Returns Value
  }else{
    alert("The transcription contains tagging erros and can't be saved:\n"+mediumValue);
    return false;
  }


}
*/</script><script>var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-1505790-5"]);
_gaq.push(["_trackPageview"]);
_gaq.push(["_trackPageLoadTime"]);
(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' === document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('head')[0]; s.appendChild(ga);
})();</script></body></html>
in type some text after finished page.body: <!DOCTYPE html><html><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><title>Transcribe - 2 (CS Pierce, MS_641-642) | FromThePage</title><meta name="viewport" content="width=device-width"><meta name="description" content="2 (CS Pierce, MS_641-642) - transcribe page. Significs and Logic"><meta name="author" content="FromThePage.com"><meta name="copyright" content="(c) 2017 FromThePage.com"><meta name="verify-v1" content="2pFw887E35Fhfkyj/nFGzyui8dJ4rLbluudrp1mDcj0=">
<link href="http://localhost:3000/assets/favicon-3b65dba823d9f31072094535df6dfcbbe99cf14a55aedfaf619a09fed2ebb640.ico" rel="shortcut icon" type="image/vnd.microsoft.icon">
<link href="//fonts.googleapis.com/css?family=Source+Serif+Pro:400,700|Crete+Round" media="screen" rel="stylesheet">
<link href="http://localhost:3000/assets/application-e52f91bec5d45d23cab22abc353ccdab7de3c416266d83129f23cb78eb3155c5.css" media="screen" rel="stylesheet"><script type="text/javascript" async="" src="//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js"></script><script src="/jquery-2.1.4.min.js"></script><link rel="stylesheet" href="/medium.css"><link rel="stylesheet" href="/chosen.min.css"><link rel="stylesheet" href="/medium-tag-styles.css"><link rel="stylesheet" href="/my_style.css"><script type="text/javascript" src="/chosen.jquery.min.js"></script><script type="text/javascript" src="/rangy-core.js"></script><script type="text/javascript" src="/rangy-classapplier.js"></script><script type="text/javascript" src="/undo.js"></script><script type="text/javascript" src="/medium.js"></script><script type="text/javascript" src="/medium_subclass.js"></script><script>(function(e,b){if(!b.__SV){var a,f,i,g;
window.mixpanel=b;
b._i=[];b.init=function(a,e,d){function f(b,h){var a=h.split(".");
2==a.length&&(b=b[a[0]],h=a[1]);
b[h]=function(){b.push([h].concat(Array.prototype.slice.call(arguments,0)))}}var c=b;"undefined"!==typeof d?c=b[d]=[]:d="mixpanel";
c.people=c.people||[];c.toString=function(b){var a="mixpanel";
"mixpanel"!==d&&(a+="."+d);b||(a+=" (stub)");return a};
c.people.toString=function(){return c.toString(1)+".people (stub)"};
i="disable time_event track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config people.set people.set_once people.increment people.append people.union people.track_charge people.clear_charges people.delete_user".split(" ");
for(g=0;g<i.length;g++)f(c,i[g]);b._i.push([a,e,d])};
b.__SV=1.2;a=e.createElement("script");
a.type="text/javascript";
a.async=!0;a.src="undefined"!==typeof MIXPANEL_CUSTOM_LIB_URL?MIXPANEL_CUSTOM_LIB_URL:"file:"===e.location.protocol&&"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js".match(/^\/\//)?"https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js":"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";
f=e.getElementsByTagName("script")[0];
f.parentNode.insertBefore(a,f)}})(document,window.mixpanel||[]);mixpanel.init("d5e53d2387f7184a07bf99f207df9603");</script><script type="text/javascript" async="" src="http://www.google-analytics.com/ga.js"></script></head><body><header class="header"><div class="toolbar"><div class="toolbar_group"><a class="logo" href="/"><svg><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#logo"></use></svg></a></div><div class="toolbar_group"><a class="header_link" href="/dashboard_role">Dashboard</a><a class="header_link" href="/dashboard">Collections</a><a class="header_link" href="/static/faq">FAQ</a><dl class="dropdown right"><dt class="header_link header_user"><span><big>Signed In As</big><small>Eleanor</small></span><svg class="icon"><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#header-user"></use></svg></dt><dd><a href="/dashboard/watchlist">Collaborator Dashboard</a><hr><a href="/user/profile?user_id=2">Your Profile</a><hr><a data-method="delete" href="/users/sign_out" rel="nofollow">Sign Out</a></dd></dl></div></div></header><main class="wrapper"><ul class="breadcrumbs"><li><a href="/collection/show?collection_id=1">CS Pierce</a></li><li><a href="/display/read_work?work_id=9">MS_641-642</a></li></ul><div class="headline"><h1 class="headline_title">2</h1><div class="headline_aside"><nav class="page-nav"><a class="page-nav_prev" href="/transcribe/display_page?page_id=24"><svg class="icon"><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#icon-arrow-left"></use></svg></a><span class="page-nav_info">Page 2 of 21</span><a class="page-nav_next" href="/transcribe/display_page?page_id=26"><svg class="icon"><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#icon-arrow-right"></use></svg></a></nav></div></div><div class="tabs"><a href="/display/display_page?page_id=25">Overview</a><a class="active">Transcribe</a><a href="/page_version/list?page_id=25">Versions</a></div><form accept-charset="UTF-8" action="/transcribe/save_transcription" class="page-editor" data-remote="true" id="edit_page_25" method="post"><div style="display:none"><input name="utf8" type="hidden" value="âœ“"><input name="_method" type="hidden" value="patch"></div><input id="page_id" name="page_id" type="hidden" value="25"><input type="hidden" name="page[source_text]"><input type="hidden" name="page[use_advanced_mode]"><input type="hidden" name="page[finished]"><div class="page-toolbar"><div class="toolbar"><div class="toolbar_group"><a class="button outline" data-fullscreen-toggle="">Fullscreen</a></div><div class="toolbar_group"><dl class="dropdown page-columns-layout" data-dropdown="{ &quot;selectable&quot;: true }"><dt class="button outline"><svg class="icon"><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#icon-layout-ltr"></use></svg><span class="hide-l">Image at the left</span></dt><dd><a data-layout-set="ltr"><svg class="icon"><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#icon-layout-ltr"></use></svg><span>Image at the left</span></a><a data-layout-set="rtl"><svg class="icon"><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#icon-layout-rtl"></use></svg><span>Image at the right</span></a><a data-layout-set="ttb"><svg class="icon"><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#icon-layout-ttb"></use></svg><span>Image at the top</span></a><a data-layout-set="btt"><svg class="icon"><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#icon-layout-btt"></use></svg><span>Image at the bottom</span></a></dd></dl></div><div class="toolbar_group hide-m"><label class="auto-fullscreen"><input id="auto-fullscreen" name="auto-fullscreen" type="checkbox" value="yes">&nbsp;<span>Always show in fullscreen</span></label></div><div class="toolbar_group w100 aright"><span>Mark page as blank</span>&nbsp;<input id="mark_blank" name="mark_blank" type="checkbox" value="yes"></div><div class="toolbar_group w100 aright"><span>Page Needs Review</span>&nbsp;<input name="page[needs_review]" type="hidden" value="0"><input id="page_needs_review" name="page[needs_review]" type="checkbox" value="1"></div><div class="toolbar_group w100 aright"><button name="save" type="submit">Save Changes</button></div></div></div><div class="page-columns" data-layout-mode="ltr" data-fullheight="{ &quot;bottom&quot;: 30, &quot;cssrule&quot;: &quot;height&quot; }"><div class="page-column"><div class="page-imagescan"><div class="zoomer-container"><img alt="1725" src="http://localhost:3000/images/uploaded/9/1725.jpg"></div></div></div><div class="page-column"><div class="page-column_actions"><button name="preview" type="submit">Preview</button> <button name="autolink" type="submit">Autolink</button> </div><div class="page-editarea"><div class="card" id="page_source_text" contenteditable="true">hello bright sunSignifics and Logic</div></div></div></div></form><div class="popupBody" id="popupBody" style="display:none;"><button type="button" class="hide_popup_small" id="hidePopupBody">â›Œ</button><select class="chosen-select-no-results" data-placeholder="Choose a category"><option value=""></option><option value="People_id1" data-categoryid="1">People</option><option value="Places_id2" data-categoryid="2">Places</option></select></div><div class="popupBody2" id="popupBody2" style="display:none;"><button type="button" class="hide_popup_small" id="hidePopupBody2">â›Œ</button><select class="chosen-select-no-results2" data-placeholder="Choose a category"><option value=""></option><option value="People_id1" data-categoryid="1">People</option><option value="Places_id2" data-categoryid="2">Places</option></select></div><div class="popupBodyAdv" id="popupBodyAdv" style="display:none;"><!--<button type="button" class="hide_popup_small" title="Alt+R" id="hidePopupBodyAdv" onclick="hidePopupBodyAdv();">&#9932;</button>--><button type="button" class="hide_popup_small" title="Alt+R" id="hidePopupBodyAdv">â›Œ</button><select class="chosen-adv" data-placeholder="Choose a category"><option value=""></option><option value="People_id1" data-categoryid="1">People</option><option value="Places_id2" data-categoryid="2">Places</option></select></div><div class="popupBodyAdv2" id="popupBodyAdv2" style="display:none;"><!--<button type="button" class="hide_popup_small" title="Alt+R" id="hidePopupBodyAdv2" onclick="hidePopupBodyAdv2();">&#9932;</button>--><button type="button" class="hide_popup_small" title="" id="hidePopupBodyAdv2">â›Œ</button><select class="chosen-adv2" data-placeholder="Choose a category"><option value=""></option><option value="People_id1" data-categoryid="1">People</option><option value="Places_id2" data-categoryid="2">Places</option></select></div><div id="newDropdownDiv" style="display:none;"><!--<button type="button" class="hide_popup_new" title="Alt+R" id="hideNewDropdownDiv" onclick="hideNewDropdownDiv();">&#9932;</button>--><button type="button" class="hide_popup_new" title="" id="hideNewDropdownDiv">â›Œ</button><div class="select_a_tag" id="select_a_tag"></div><input id="user-type-input" type="text" placeholder="Type the new value" style="display:none;"><input id="select-type-input" type="text"><select id="chosen-select-type"></select></div><div id="deletion_div" style="display:none;"></div><div id="change_div" style="display:none;"></div><div id="change_selected_div" style="display:none;"></div><div id="final_button_div"><button type="button" id="transcription_finished">Transcription finished</button></div><div id="use_advanced_mode_div"><label for="use_advanced_mode" id="use_advanced_mode_label">Use advanced mode</label><input id="use_advanced_mode" name="use_advanced_mode" type="checkbox" value="0"></div><div id="changeHotkeysMenu" style="display:none;"><button type="button" class="hide_popup_changekeys">â›Œ</button><div id="changeHotkeysTitle">Change hot keys</div>  <div id="changeHotKeysInternal"></div><button type="button" id="changeHotKeys">Change hot keys</button></div><div id="changeSavingTimeMenu" style="display:none;"><button type="button" id="hide_popup_changetime">â›Œ</button><div id="changeTimeTitle">Change transcription saving frequency</div>  <div id="changeSavingTimeInternal"><input type="text" id="input_time" class="savingTimeInput" maxlength="2">minutes</div><button type="button" id="changeSavingTimeButton">Change</button></div><div id="verticalMediumClickableSpans"><table><tbody><tr><td class="overMediumButtonTD"><span title="undo" class="undo">â†¶</span></td></tr><tr><td class="overMediumButtonTD"><span title="delete tag(s) at cursor position: " class="delete_tag">â›Œ</span></td></tr><tr><td class="overMediumButtonTD"><span title="change tag(s) at cursor position: " class="change_tag">â®”</span></td></tr><tr><td class="overMediumButtonTD"><span class="button-People_id1 category_button" data-categoryid="1">People</span></td></tr><tr><td class="overMediumButtonTD"><span class="button-Places_id2 category_button" data-categoryid="2">Places</span></td></tr><tr><td class="overMediumButtonTD"><span title="change hot keys" class="show_change_hotkeys">âš·</span></td></tr><tr><td class="overMediumButtonTD"><span title="change transcription saving frequency" class="show_saving_time">âŒ›</span></td></tr></tbody></table></div><div id="verticalMediumClickableSpansAdv"><table><tbody><tr><td class="overMediumButtonTD"><span title="undo" class="undo">â†¶</span></td></tr><tr><td class="overMediumButtonTD"><span title="delete tag(s) at cursor position: " class="delete_tag">â›Œ</span></td></tr><tr><td class="overMediumButtonTD"><span title="change tag(s) at cursor position: " class="change_tag">â®”</span></td></tr><tr><td class="overMediumButtonTD"><span class="button-People_id1 category_button" data-categoryid="1">People</span></td></tr><tr><td class="overMediumButtonTD"><span class="button-Places_id2 category_button" data-categoryid="2">Places</span></td></tr><tr><td class="overMediumButtonTD"><span title="change hot keys" class="show_change_hotkeys">âš·</span></td></tr><tr><td class="overMediumButtonTD"><span title="change transcription saving frequency" class="show_saving_time">âŒ›</span></td></tr></tbody></table></div><div class="fgfaded"><p><b>Transcription Conventions</b>
</p><ul><li><i>Spelling: </i>Use original spelling if possible.</li>
 <li><i>Capitalization: </i>Modernize for readability</li>
<li><i>Punctuation: </i>Add modern periods, but don't add punctuation like commas and apostrophes.</li>
<li><i>Line Breaks: </i>Hit <code>return</code> once after each line ends.  Two returns indicate a new paragraph, which is usually indentation  following the preceding sentence in the original.  The times at the end of each entry should get their own paragraph, since the software does not support indentation in the transcriptions.</li>
 <li><i>Illegible text: </i>Indicate illegible readings in single square brackets: <code>[Dr?]</code></li></ul><p></p></div><div class="fgfaded"><p>A single newline indicates a line-break in the original document, and will not appear as a break in the text in some views or exports. Two newlines indicate a paragraph, and will appear as a paragraph break in all views. <br>

"Autolink" will suggest subjects certain words could be linked to or you can use double braces to link subjects. <code>[[Jane Doe]]</code> will link the text "Jane Doe" to the subject Jane Doe, while <code>[[Jane Doe|Jane]]</code> will link the text "Jane" to the subject Jane Doe. We recommend that linking be left to an editor after the initial transcription is made.</p>
</div><h2 class="legend">Page Notes</h2><div class="page-notes"><p class="acenter fglight" data-note-empty="">Nobody has written a note for this page yet</p><div class="user-bubble"><div class="userpic"><img alt="Eleanor" height="80" src="http://gravatar.com/avatar/ddd977d037e1a6946357c962e37f193e?default=blank&amp;secure=false&amp;size=80" width="80"></div><form accept-charset="UTF-8" action="/notes" class="user-bubble_form" data-remote="true" method="post"><div style="display:none"><input name="utf8" type="hidden" value="âœ“"></div><input id="page_id" name="page_id" type="hidden" value="25"><div class="user-bubble_form_editor"><textarea id="note_body" name="note[body]" placeholder="Write a new note..." rows="4"></textarea></div><div class="user-bubble_form_footer"><span class="user-bubble_form_error"></span><button name="button" type="submit">Submit</button></div></form></div></div><div class="categoryTypesDiv" id="categoryTypesDiv" data="{&quot;1&quot;:{&quot;first_attribute&quot;:{&quot;allow_user_input&quot;:0,&quot;values&quot;:[]}}}"></div><div class="categoryTypesDivAdv" id="categoryTypesDivAdv" data="{&quot;1&quot;:{&quot;1&quot;:{&quot;allow_user_input&quot;:0,&quot;name&quot;:&quot;first_attribute&quot;,&quot;values&quot;:{}}}}"></div><div class="initialAttrIds" id="initialAttrIds" data="{}"></div><script type="text/javascript" src="/my-medium-onmousedown-functions.js"></script><script type="text/javascript" src="/transcription_module.js"></script><script>mixpanel.track("Transcribe Page");</script></main><footer class="footer"><div class="footer_copyright">Â© 2017 <a href="/">FromThePage</a>. All rights reserved.</div><div class="footer_nav"><a href="/static/about">About</a><a href="http://fromthepage.wpengine.com/terms-of-service/">Terms &amp; Conditions</a><a href="/static/privacy">Privacy Policy</a><a href="mailto:benwbrum@gmail.com">Contact Us</a></div></footer><div class="page-busy-overlay"></div><script src="http://localhost:3000/assets/application-41aece84efa6627667473eda880dceae50103b7d6ab70fb6c889d7ac8fd6a933.js"></script><script>$(function() {
  // Zoomer initialization
  var zoomer = $('.zoomer-container').zoomer();

  // Check localStorage support
  if(typeof Storage !== void(0)) {
    var data = zoomer.data('zoomer');
    var datakey = data.images[0];
    var storage = localStorage['zoomer:' + datakey];
    var properties = ['targetImageWidth','targetImageHeight','targetPositionerTop','targetPositionerLeft'];

    if(storage) {
      try {
        storage = JSON.parse(storage);
      } catch (err) {
        storage = null;
        console.log('JSON parse error: ' + err.message);
      }

      // Restore zoom level and pan position if exists
      if(storage) {
        data.$image.one("load.zoomer", function(){
          for(var i = 0, l = properties.length; i < l; i++) {
            var property = properties[i];
            data[property] = parseInt(storage[property], 10) || 0;
          }
          console.log('Zoomer state restored');
        });
      }
    }

    // Store zoom level and pan position
    $(window).on('beforeunload', function() {
      storage = {};
      for(var i = 0, l = properties.length; i < l; i++) {
        var property = properties[i];
        storage[property] = data[property];
      }
      localStorage['zoomer:' + datakey] = JSON.stringify(storage);
    });
  }
});</script><script>$(function() {
  // Toggle note edit
  $(document).on('click', '[data-note-edit]', function() {
    var $container = $(this).closest('.user-bubble').toggleClass('edit');
    if($container.hasClass('edit')) {
      $('form', $container)[0].reset();
      $('.user-bubble_form_error', $container).empty();
    }
  });

  // Create and update note
  $(document).on('ajax:complete', 'form.user-bubble_form', function(e, xhr) {
    var $container = $(this).parent();
    var $error = $('.user-bubble_form_error', $container).empty();
    if(xhr.status === 201) {
      // Note created
      var content = xhr.responseJSON.html;
      $(content).hide().insertBefore($container).fadeIn();
      $('[data-note-empty]').hide();
      this.reset();
    } else if(xhr.status === 204) {
      // Note updated
      var content = $('textarea', this).val();
      $container.removeClass('edit');
      $('.user-bubble_content > p', $container).text(content);
    } else {
      // Error occurred
      var message = xhr.responseJSON.join('. ');
      $error.text('Error: ' + message);
    }
  });

  // Delete note
  $(document).on('ajax:complete', '[data-note-delete]', function(e, xhr) {
    if(xhr.status === 200 || xhr.status === 204) {
      var $container = $(this).closest('.user-bubble');
      $container.fadeOut(function() { $(this).remove(); });
    }
  });
});</script><script>$(function() {
  $('[data-fullscreen-toggle]').on('click', function() {
    $(this).toggleClass('pressed');
    $('.page-editor').toggleClass('fullscreen');
    $(window).trigger('resize.FullHeight');
    $('.zoomer-container').zoomer('resize');
  });
  $('[data-layout-set]').on('click', function() {
    var mode = $(this).data('layout-set');
    Cookies.set('transcribe_layout_mode', mode, { expires: 365 });
    $('[data-layout-mode]').attr('data-layout-mode', mode);
    $('.zoomer-container').zoomer('resize');
  });
  $('#auto-fullscreen').on('change', function() {
    var checked = this.checked ? 'yes' : 'no';
    Cookies.set('auto_fullscreen', checked, { expires: 365 });
  });

});

/*
function hidePopupBody(){
  $(".popupBody").hide();
  document.getElementById("select_a_tag").innerHTML = "";
  $(".chosen-select-no-results").chosen_reset(config);
  $(".popupBody").css({"top":0,"left":0});
}

function hidePopupBody2(){
  $(".popupBody2").hide();
  $(".chosen-select-no-results2").chosen_reset(config);
  $(".popupBody2").css({"top":0,"left":0});
  document.getElementById("select_a_tag").innerHTML = "";
}

function hidePopupBodyAdv(){
  $(".popupBodyAdv").hide();
  document.getElementById("select_a_tag").innerHTML = "";
  $(".chosen-adv").chosen_reset(config);
  $(".popupBodyAdv").css({"top":0,"left":0});
}

function hidePopupBodyAdv2(){
  $(".popupBodyAdv2").hide();
  document.getElementById("select_a_tag").innerHTML = "";
  $(".chosen-adv2").chosen_reset(config);
  $(".popupBodyAdv2").css({"top":0,"left":0});
}

function hideNewDropdownDiv(){
  $("#newDropdownDiv").hide();
  $(".chosen-select-type").chosen_reset(config);
  $("#newDropdownDiv").css({"top":0,"left":0});
  document.getElementById("select_a_tag").innerHTML = "";
  document.getElementById("user-type-input").value = "";
  $("#user-type-input").hide();
}


function showSimpleOrAdvancedModeCategories(checked){
  if(checked==1){
    $("#verticalMediumClickableSpans").hide();
    $("#verticalMediumClickableSpansAdv").show();
  }else{
    $("#verticalMediumClickableSpans").show();
    $("#verticalMediumClickableSpansAdv").hide();
  }
}

$("#use_advanced_mode").on('change', function() {
  var checked = this.checked ? 1 : 0 ;
  $("#use_advanced_mode_").val(checked);
  Cookies.set("use_advanced_mode", checked, { expires: 365 });
  document.getElementsByName("page[use_advanced_mode]")[0].value=checked;
  showSimpleOrAdvancedModeCategories(checked);    
});

function parseJsonData(elementid){
  var categoryTypesDiv=document.getElementById(elementid);
  var categoriesText=categoryTypesDiv.attributes[2].textContent;
  var categoryTypesHash=JSON && JSON.parse(categoriesText) || $.parseJSON(categoriesText);
  return categoryTypesHash;
}

//Decide wich categories to show in the menu: for the simple mode or for the advanced mode
showSimpleOrAdvancedModeCategories(Cookies.get("use_advanced_mode"));

//Get the information about categories, their attributes and values for the simple mode
var categoryTypesHash=parseJsonData("categoryTypesDiv");

var catID,
    attr_name,
    categoriesInfo={};

for (catID in categoryTypesHash){
  categoriesInfo[catID]=[];
  for (attr_name in categoryTypesHash[catID]){
    categoriesInfo[catID].push([attr_name, categoryTypesHash[catID][attr_name]['allow_user_input'], categoryTypesHash[catID][attr_name]['values']]);
  }
}

//Get the information about categories, their attributes, values and sequnces of these values (attributes to be filled) for the advanced mode
var categoryTypesHashAdv=parseJsonData("categoryTypesDivAdv");

//Get the initial attributes' ids
var initialAttrIds=parseJsonData("initialAttrIds");

var offset,
    focusEl,
    anchorNode,
    beginningOfSelection,
    selection,
    enableChosen,
    options,
    categoryid,
    newDropdown,
    categoryTypesTable,
    i,
    optionType,
    tagWithType,
    type,
    varTag,
    newType,
    notCollapsedArgsTable,
    nowX,
    nowY,
    docF,
    selF,
    rangeF,
    rectF,
    xF,
    yF,
    spanF,
    spanParentF,
    rangeChildNodes,
    rangeLength,
    position,
    returnOffsetvalues,
    userChosenAttributesAndValues,
    attrName,
    catHashLength,
    coords,
    seqAttrsTable,
    attrHash;

//Parse the transcription text to transform it into XML
var l=document.getElementById("page_source_text");
var xml=l.textContent;
//xml = xml.replace(/<br><\/br>/g, '<br>'); // Esli dobavliaiu eto, to oshibka parsinga
xml = "<div id=\"bigDiv\">"+xml+"</div>";
xml = xml.replace(/<\/br>/g, "");
//xml = xml.replace(/&nbsp\;/g, '');

var parser = new DOMParser();
var doc = parser.parseFromString(xml, "text/html");
//var doc = parser.parseFromString(xml, "text/xml");

//var allDocContent=doc.childNodes[0];
var allDocContent=doc.childNodes[0].childNodes[1].childNodes[0];

var article=l;
var firstChild=article.firstChild;
if(firstChild==null){
  article.nodeValue=allDocContent;
}else{
  firstChild.parentNode.replaceChild(allDocContent,firstChild);
}

var closingElement=article.getElementsByTagName("closing")[0];

var container = article.parentNode;


var medium = new Medium({
  element: article,
  mode: Medium.richMode,
  attributes: null,
  placeholder:"",
  tags:null,
  pasteAsText: false
});


$(".popupBody").hide();
$(".popupBody2").hide();
$(".popupBodyAdv").hide();
$(".popupBodyAdv2").hide();
$("#newDropdownDiv").hide();
$("#deletion_div").hide();
$("#change_div").hide();
$("#change_selected_div").hide();    


var config = {
  ".chosen-select-no-results": {width:"100%"},
  ".chosen-select-no-results2": {width:"100%"},
  ".chosen-adv": {width:"100%"},
  ".chosen-adv2": {width:"100%"}
}

var selector;
for (selector in config) {
  $(selector).chosen(config[selector]);
}


$(".chosen-select-no-results").chosen();
$(".chosen-select-no-results2").chosen();
$(".chosen-adv").chosen();
$(".chosen-adv2").chosen();

jQuery.fn.chosen_reset = function(n){
  $(this).chosen('destroy');
  $(this).prop('selectedIndex', 0);
  $(this).chosen(n)
}

//var hotkeysHash={'insert_tag':'alt+c', 'get_out_of_tag':'alt+x','modify_tag':'alt+m','delete_tag':'alt+n','hide_popup':'alt+r'};
//If the user has defined his own hot keys, we take their values from the localstorage object
var hotkeysHash={};
hotkeysHash["insert_tag"] = localStorage["insert_tag"] || "Alt+C";
hotkeysHash["get_out_of_tag"] = localStorage["get_out_of_tag"] || "Alt+X";
hotkeysHash["modify_tag"] = localStorage["modify_tag"] || "Alt+M";
hotkeysHash["delete_tag"] = localStorage["delete_tag"] || "Alt+N";
hotkeysHash["hide_popup"] = localStorage["hide_popup"] || "Alt+R";


//Update hot keys indicated in buttons titles
function updateHotkeysInButtonTitles(){
  document.getElementsByClassName("change_tag")[0].title+=localStorage["modify_tag"] || "Alt+M";
  document.getElementsByClassName("change_tag")[1].title+=localStorage["modify_tag"] || "Alt+M";
  document.getElementsByClassName("delete_tag")[0].title+=localStorage["delete_tag"] || "Alt+N";
  document.getElementsByClassName("delete_tag")[1].title+=localStorage["delete_tag"] || "Alt+N";
  document.getElementsByClassName("hide_popup_new")[0].title+=localStorage["hide_popup"] || "Alt+R";
  document.getElementsByClassName("hide_popup_small")[0].title+=localStorage["hide_popup"] || "Alt+R";
  document.getElementsByClassName("hide_popup_small")[1].title+=localStorage["hide_popup"] || "Alt+R";
  document.getElementsByClassName("hide_popup_small")[2].title+=localStorage["hide_popup"] || "Alt+R";
  document.getElementsByClassName("hide_popup_small")[3].title+=localStorage["hide_popup"] || "Alt+R";
}

updateHotkeysInButtonTitles();

//When the user pushes the button with a key on it, this function fires and shows a popup menu that lets him change hot keys
function showChangeHotkeysMenu(){

  var listOfHelpKeys=["","Alt","Ctrl","Shift","Insert","PGUP","PGDN","FN","Tab"];

  var changeHotKeysInternal=document.getElementById("changeHotKeysInternal");

  jQuery.each(hotkeysHash, function (name, value) {
    var keyPlusKey=value.split('+');

    var firstKey=keyPlusKey[0];
    var middleKey="";
    if(keyPlusKey.length==3){
      middleKey=keyPlusKey[1];
    }

    var lastKey=keyPlusKey[keyPlusKey.length-1];

    var select = document.createElement("select");
    select.id = name;
    select.name=name;
    select.className="hotkeyDropdownMenu";

    var select2 = document.createElement("select");
    select2.id = name+'2';
    select2.name=name+'2';
    select2.className="hotkeyDropdownMenu";

    var h,
        option,
        option2;

    for(h=0; h<listOfHelpKeys.length; h++){          

      option = document.createElement("option");
      option.value=listOfHelpKeys[h];

      if(listOfHelpKeys[h]==firstKey){
        option.selected="checked";
      }else{
        option.selected="";
      }

      option.innerHTML= listOfHelpKeys[h];
      select.appendChild(option);

      option2 = document.createElement("option");
      option2.value=listOfHelpKeys[h];

      if(listOfHelpKeys[h]==middleKey){
        option2.selected="checked";
      }else{
        option2.selected="";
      }        
      option2.innerHTML= listOfHelpKeys[h];
      select2.appendChild(option2);
    }

    if(middleKey==''){
      select2.selectedIndex = -1;
    }        

    $('#changeHotKeysInternal').append('<label class="hotkey_label">' + name.replace(/_/g, ' ') + ':</label>');
    $('#changeHotKeysInternal').append(select);
    $('#changeHotKeysInternal').append(select2);
    $('#changeHotKeysInternal').append('<input type="text" id="input_'+name+'" class="hotkeyDropdownMenu" maxlength="1" value="'+lastKey+'"></input><br/>');

  });

  $("#changeHotkeysMenu").show();
}

//Hides the change hot keys pop up menu
function hideChangeKeysPopup(){
  $("#changeHotKeysInternal").empty();
  $("#changeHotkeysMenu").hide();
}

//Applies the changes to hot keys made by the user
function changeHotKeys(){
  if (typeof(Storage) !== "undefined") {
    // Code for localStorage
    var firstKey,
        middleKey,
        lastKey,
        newvalue,
        keyPlusKey,
        name,
        i,
        select1,
        valselect1=null,
        select2,
        valselect2=null,
        keys = Object.keys(hotkeysHash),
        len = keys.length;


    for(i=0; i<len; i++) {
      name=keys[i];
      keyPlusKey=hotkeysHash[name].split('+');

      firstKey=keyPlusKey[0];
      middleKey='';
      if(keyPlusKey.length==3){
        middleKey=keyPlusKey[1];
      }

      select1 = document.getElementById(name);
      if(select1.selectedIndex==-1){
        valselect1='';
      }else{
        valselect1 = select1.options[select1.selectedIndex].value || '';
      }

      select2=document.getElementById(name+'2');
      if(select2.selectedIndex==-1){
        valselect2='';
      }else{
        valselect2 = select2.options[select2.selectedIndex].value || '';
      }

      if(valselect1!=null){
        firstKey=valselect1;
      }
      if(valselect2!=null){
        middleKey=valselect2;
      }
      if(document.getElementById('input_'+name).value!=null){
        lastKey=document.getElementById('input_'+name).value;
      }

      if(middleKey!=''){
        newValue=firstKey+'+'+middleKey+'+'+lastKey;
      }else{
        newValue=firstKey+'+'+lastKey;
      }

      //If the values of all the 3 fields corresponding to new hot keys are empty, we give an error message 
      if(newValue=='+'){
        alert("The \""+name.replace(/_/g, ' ')+"\" hot key is empty. Please, choose a value.");
        break;
      }else{
        localStorage.setItem(name,newValue);
        hotkeysHash[name]=newValue;
      }

      if(i==(len-1)){
        //Hide the popup menu
        hideChangeKeysPopup();
        alert("The hot keys have been changed. Please, reload the page in your browser.");
        updateHotkeysInButtonTitles();
      }
    }

  } else {
    // Sorry! No Web Storage support..
    alert("Sorry, hot keys can't be changed. Your browser doesn't support HTML Storage.");
    //Hide the popup menu
    hideChangeKeysPopup();
  }
}


//Go out of the current tag
jQuery('#page_source_text').bind('keypress', hotkeysHash['get_out_of_tag'], function(e) {
  returnOffsetvalues=medium.returnOffset();
  offset=returnOffsetvalues[0];
  focusEl=returnOffsetvalues[1];

  if(focusEl.parentNode.id!="page_source_text" && focusEl.parentNode.id!="bigDiv" && focusEl.id!="page_source_text" && focusEl.id!="bigDiv"){
    medium.focus();
    medium.focusNadya(offset,focusEl);
    medium.cursorAfterTag(focusEl);

  }

  return false;

});

jQuery('#page_source_text').bind('keypress', 'alt+h', function(e) {
  var m = medium.value();
  console.log(m);

  if(m.match(/\u200B/)!=null){
    console.log("found invisible caracters");
  }

  return false;

});



//If the user types text in the input field of the category type select box in order to select one of the options
jQuery.fn.filterByTextS = function(textbox, medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton) {
  var option;
  var select;
  var options;
  var options2;
  var search;
  var regex;
  var arrowPosition=0;

  return this.each(function() {
    select = this;
    var length=$(select).attr("size");
    options = [];
    $(select).find('option').each(function() {
      options.push({value: $(this).val(), text: $(this).text()});
    });
    $(select).data('options', options);

    $(textbox).off().on('change keyup', function(e) {

      if (e.which == 40) {
        if(arrowPosition>=0 && arrowPosition<options.length){
          $(textbox).val(options[arrowPosition]['text']);
          if(arrowPosition!=(options.length-1)){
            arrowPosition+=1;
          }
        }
      }else if(e.which == 38){
        if(arrowPosition>=0 && arrowPosition<options.length){
          $(textbox).val(options[arrowPosition]['text']);
          if(arrowPosition!=0){
            arrowPosition=arrowPosition-1;
          }
        }
      }else{

        options2 = $(select).empty().data('options');
        $(select).attr("size", 0);
        search = $.trim($(this).val());

        if(search!=null && search!=""){
          regex = new RegExp("^"+search,"gi");

          $.each(options2, function(i) {
            if(options2!=null){
            option = options2[i];
            if(option.value!="" && option.value.match(regex) !== null) {
              $(select).append(
                $('<option>').text(option.text).val(option.value)
              );
              $(select).attr("size", $(select).attr("size")+1);
              //If the user presses enter
              if (e.which == 13) {
                if(notCollapsedArgsTable==null){
                  $("#newDropdownDiv").hide();
                  document.getElementById("select_a_tag").innerHTML = "";
                  userChosenAttributesAndValues.push([attrName,option.value]);

                  options2=null;

                  if (num<(categoryTable.length-1)){
                    getNextSomethingSelected(varTag, num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
                  }

                  if (num==(categoryTable.length-1)){
                    medium.tagSelection3(varTag, userChosenAttributesAndValues, notCollapsedArgsTable[0], focusNode, notCollapsedArgsTable[1], focusOffset);
                  }
                }else{
                  $("#newDropdownDiv").hide();
                  $("#select-type-input").hide();
                  $("#select-type-input")[0].value="";
                  $('#chosen-select-type').empty();
                  $('#chosen-select-type')[0].value="";

                  document.getElementById('select_a_tag').innerHTML = "";

                  userChosenAttributesAndValues.push([attrName,option.value]);

                  if (num<(categoryTable.length-1)){
                    getNextSomethingSelected(varTag, num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
                  }

                  if (num==(categoryTable.length-1)){
                    medium.tagSelection3(varTag, userChosenAttributesAndValues, notCollapsedArgsTable[0], focusNode, notCollapsedArgsTable[1], focusOffset);
                  }
                }
              }
            }
            }
          });
        }else{ // if search==null || search==""
          $(select).attr("size", length);
          $.each(options2, function(i) {
            option = options2[i];
            if(option.value!="") {
              $(select).append(
                $('<option>').text(option.text).val(option.value)
              );
            }
          });
        }
      }
    });
  });
};

//If the user types text in the input field of the category type select box in order to select one of the options
jQuery.fn.filterByTextCollapsed = function(textbox, medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton) {
  var option;
  var select;
  var options;
  var options2;
  var search;
  var regex;
  var arrowPosition=0;

  return this.each(function() {
    select = this;
    var length=$(select).attr("size");
    options = [];
    $(select).find('option').each(function() {
      options.push({value: $(this).val(), text: $(this).text()});
    });
    $(select).data('options', options);

    $(textbox).off().on('change keyup', function(e) {

    if (e.which == 40) {
      if(arrowPosition>=0 && arrowPosition<options.length){
        $(textbox).val(options[arrowPosition]['text']);
        if(arrowPosition!=(options.length-1)){
          arrowPosition+=1;
        }
      }
    }else if(e.which == 38){
      if(arrowPosition>=0 && arrowPosition<options.length){
        $(textbox).val(options[arrowPosition]['text']);
        if(arrowPosition!=0){
          arrowPosition=arrowPosition-1;
        }
      }
    }else{
      options2 = $(select).empty().data('options');
      $(select).attr("size", 0);
      search = $.trim($(this).val());
      if(search!=null && search!=""){
        regex = new RegExp("^"+search,"gi");

        $.each(options2, function(i) {
          if(options2!=null){
          option = options2[i];
          if(option.value!="" && option.value.match(regex) !== null) {
            $(select).append(
              $('<option>').text(option.text).val(option.value)
            );
            $(select).attr("size", $(select).attr("size")+1);
            //If the user presses enter
            if (e.which == 13) {

                $("#newDropdownDiv").hide();

                $("#select-type-input").hide();
                $("#select-type-input")[0].value="";
                $('#chosen-select-type').empty();
                $('#chosen-select-type')[0].value="";

                document.getElementById('select_a_tag').innerHTML = "";
                userChosenAttributesAndValues.push([attrName,option.value]);
                options2=null;
                if (num<(categoryTable.length-1)){
                  getNextCollapsed(varTag,num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
                }

                if (num==(categoryTable.length-1)){
                  document.getElementById('select_a_tag').innerHTML = "";
                  addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode);

                }

            }
          }
          }
        });

      }else{ // if search==null || search==""
        $(select).attr("size", length);
        $.each(options2, function(i) {
          option = options2[i];
          if(option.value!="") {
            $(select).append(
              $('<option>').text(option.text).val(option.value)
            );

          }
        });
      }
      }
    });
  });
};


function addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode){
  var couple;
  var attrString="";

    medium.focus();

    d = new Date();
    milliseconds = d.getTime();
    tagCode=milliseconds.toString();

    for (couple in userChosenAttributesAndValues){
      attrString+=" "+userChosenAttributesAndValues[couple][0]+"=\""+userChosenAttributesAndValues[couple][1]+"\"";
    }

    tagWithType='<'+varTag+' tagcode="'+tagCode+'" class="medium-'+varTag+'" '+attrString+'>\u200B</'+varTag+'>';


    medium.focusNadya(focusOffset,focusNode);
    medium.insertHtmlNadya(tagWithType, focusOffset, focusNode);
    tagWithType='';

    $('#chosen-select-type').empty();
    $('#chosen-select-type')[0].value="";

    return false;
}


function tagSelectionWithType (categoryid, categoriesInfo, medium, varTag, focusOffset,focusNode, notCollapsedArgsTable, coords,onButton){

  var categoryTable=categoriesInfo[categoryid];

  getNextSomethingSelected(varTag, 0, categoryTable,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);

}


function getNextSomethingSelected(varTag, num, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton){

    var categoryTypesTable=categoryTable[num][2];
    var attrName=categoryTable[num][0];
    var allow_user_input=categoryTable[num][1];


    //If there are predefined values for this attribute
  if(categoryTypesTable.length>0){
    //Create the new dropdown menu for category types
    newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Select");

    for(i=0; i< categoryTypesTable.length; i++){
      //Add an option for the category types dropdown menu
      addAnOption(newDropdown,categoryTypesTable[i]);

      if(i==(categoryTypesTable.length-1)){
        if(onButton==true){
          $("#newDropdownDiv").css({'top':coords.y,'left':'','right':'4vw', 'position':'absolute'});
        }else{
          $("#newDropdownDiv").css({'top':coords.y,'left':coords.x, 'right':'','position':'absolute'});
        }

        $("#newDropdownDiv").show();
        $('#select-type-input').show();
        $("#select-type-input")[0].value="";
        $('#select-type-input').focus();

        if(allow_user_input==1){ //If the user can enter a new value for this attribute          
          $('#user-type-input').show();
          jQuery.fn.userInputAttrValueSomethingSelected ($('#user-type-input'), medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
        }

        $('#chosen-select-type').filterByTextS($('#select-type-input'), medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);

        $("#chosen-select-type").off().change(attrName,function(event3){                        

          if(event3.target == this){
            type=$(this).val();
            if(type!=null && type!=''){
              newType=type;
              type='';

              userChosenAttributesAndValues.push([attrName,newType]);

              $("#newDropdownDiv").hide();
              $('#chosen-select-type').empty();
              $('#chosen-select-type')[0].value="";
              document.getElementById('select_a_tag').innerHTML = "";

              if (num<(categoryTable.length-1)){
                getNextSomethingSelected(varTag, num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
              }

              if (num==(categoryTable.length-1)){
                medium.tagSelection3(varTag, userChosenAttributesAndValues, notCollapsedArgsTable[0], focusNode, notCollapsedArgsTable[1], focusOffset);
              }

            }
          }

        });
      }
    }
  }else{//If there are no predefined values for this attribute
    if(allow_user_input==1){ //If the user can enter a new value for this attribute
      //Create the new dropdown menu for category types
      newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Input");

      if(onButton==true){
        $("#newDropdownDiv").css({'top':coords.y,'left':'','right':'4vw', 'position':'absolute'});
      }else{
        $("#newDropdownDiv").css({'top':coords.y,'left':coords.x,'right':'', 'position':'absolute'});
      }

      $("#newDropdownDiv").show();
      $("#select-type-input").hide();
      //$("#select-type-input").empty();
      $("#select-type-input")[0].value="";
      $('#chosen-select-type').empty();
      $('#chosen-select-type')[0].value="";
      $("#chosen-select-type").hide();          
      $('#user-type-input').show();
      $('#user-type-input').focus();
      jQuery.fn.userInputAttrValueSomethingSelected ($('#user-type-input'), medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
    }else{ //The user can't enter a new value (erroneous case: the attribute exists, but has no values and can't obtain one)

      alert("There is a mistake in the attribute \""+attrName+"\" design: an attribute should either have a list of predefined values or allow user input.");
      return false;

    }

  }     
}

//Create the new dropdown menu for category types
function addNewDropdown (length, attr_name, selectOrType){
  newDropdown=document.getElementById('chosen-select-type');
  newDropdown.setAttribute("size", length);

  var title=document.getElementById('select_a_tag');
  var content = document.createTextNode(selectOrType+" "+attr_name);
  title.appendChild(content);
  return newDropdown;
}

//Add an option to the dropdown menu of category types
function addAnOption(newDropdown,typedata){
  optionType=document.createElement("option");
  optionType.text=typedata;
  optionType.value=typedata;
  newDropdown.add(optionType,newDropdown.options[null]);
}


function hidePopups(){
  $("#deletion_div").hide();
  $("#deletion_div").empty();
  $("#change_div").hide();
  $("#change_div").empty();
  $("#change_selected_div").hide();
  $("#change_selected_div").empty();


  hidePopupBody();

  hidePopupBody2();

  hidePopupBodyAdv();

  hidePopupBodyAdv2();

  hideNewDropdownDiv();

  hideChangeKeysPopup();

  hideDeletionPopup();
  hideChangePopup();

  medium.focus();
  medium.focusNadya(focusOffset,focusNode);
}


//Press alt+r to make a dropdown select disappear without selecting anything
jQuery(document).bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#page_source_text').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('.popupBody').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('.popupBody2').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('.popupBodyAdv').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('.popupBodyAdv2').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#newDropdownDiv').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#deletion_div').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#change_div').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#change_selected_div').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#changeHotkeysMenu').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#changeHotKeysInternal').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#changeHotKeysInternal').children().bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('.hotkeyDropdownMenu').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('.hotkeyDropdownMenu').children().bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#select-type-input').bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('#select-type-input').children().bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

//Press alt+r to make a dropdown select disappear without selecting anything
jQuery('.chosen-search').children().bind('keypress', hotkeysHash['hide_popup'], function(e) {
  hidePopups();
});

function getSelectionCoords(win) {
  win = win || window;
  docF = win.document;
  selF = docF.selection;
  rangeF=null;
  rectsF=null;
  rectF=null;
  spanF=null;
  spanParentF=null;

  xF = 0;
  yF = 0;

  if (selF) {
    if (selF.type != "Control") {
        rangeF = selF.createRange();
        rangeF.collapse(true);
        xF = rangeF.boundingLeft;
        yF = rangeF.boundingTop;
    }
  } else if (win.getSelection) {
    selF = win.getSelection();
    if (selF.rangeCount) {
        rangeF = selF.getRangeAt(0).cloneRange();
        if (rangeF.getClientRects.length>0) {
            rangeF.collapse(true);
            rectsF = rangeF.getClientRects();
            if (rectsF.length > 0) {
                rectF = rects[0];
            }
            xF = rectF.left;
            yF = rectF.top;
        }else{
          // Fall back to inserting a temporary element
          if (xF == 0 && yF == 0) {
            spanF = docF.createElement("span");
            if (spanF.getClientRects) {
                // Ensure span has dimensions and position by
                // adding a zero-width space character
                spanF.appendChild( docF.createTextNode("\u200b") );
                rangeF.insertNode(spanF); // inserts a node at the end of the range

                rangeChildNodes=rangeF.endContainer.childNodes;
                for (ch=0; ch<rangeChildNodes.length; ch++) {
                  var he=rangeChildNodes[ch];
                  if (he.tagName=="SPAN"){
                    spanF=he;
                    break;
                  }
                }
                //rangeLength=rangeChildNodes.length;
                //spanF=rangeF.endContainer.childNodes[rangeChildNodes.length-2];
                //rectF = getCoords2(spanF);
                rectF = spanF.getClientRects()[0];
                xF = rectF.left;
                yF = rectF.top;
                spanParentF = spanF.parentNode;

                spanParentF.removeChild(spanF);

                // Glue any broken text nodes back together
                spanParentF.normalize();
            }
          }
        }
    }
  }

  var pageScrolleFromTop=$(window).scrollTop();
  var pageScrolleFromLeft=$(window).scrollLeft();

  return { x: xF+pageScrolleFromLeft, y: yF+pageScrolleFromTop };
}


jQuery.fn.filterByTextAdvanced= function(level,textbox, medium, varTag,initialAttrIds, userChosenAttributesAndValues, attrName,attrHash, num,numSeqAttr, seqAttrsTable,categorySeqHash, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected){
  var option;
  var select;
  var options;
  var options2;
  var search;
  var regex;
  var arrowPosition=0;


  return this.each(function() {
    select = this;
    var length=$(select).attr("size");
    options = [];
    $(select).find('option').each(function() {
      options.push({value: $(this).val(), text: $(this).text()});
    });
    $(select).data('options', options);

    $(textbox).off().on('change keyup', function(e) {

    if (e.which == 40) {
      if(arrowPosition>=0 && arrowPosition<options.length){
        $(textbox).val(options[arrowPosition]['text']);
        if(arrowPosition!=(options.length-1)){
          arrowPosition+=1;
        }
      }
    }else if(e.which == 38){
      if(arrowPosition>=0 && arrowPosition<options.length){
        $(textbox).val(options[arrowPosition]['text']);
        if(arrowPosition!=0){
          arrowPosition=arrowPosition-1;
        }
      }
    }else{
      options2 = $(select).empty().data('options');
      $(select).attr("size", 0);
      search = $.trim($(this).val());
      if(search!=null && search!=""){
        regex = new RegExp("^"+search,"gi");

        $.each(options2, function(i) {
          if(options2!=null){
          option = options2[i];
          if(option.value!="" && option.value.match(regex) !== null) {
            $(select).append(
              $('<option>').text(option.text).val(option.value)
            );
            $(select).attr("size", $(select).attr("size")+1);
            //If the user presses enter
            if (e.which == 13) {
                var newType=option.value;
                $("#newDropdownDiv").hide();
                $("#select-type-input").show();
                $('#chosen-select-type').empty();
                $('#chosen-select-type')[0].value="";
                $("#chosen-select-type").show();                    
                $('#user-type-input').hide();

                $("#select-type-input")[0].value="";

                options2=null;

                document.getElementById('select_a_tag').innerHTML = "";

                userChosenAttributesAndValues.push([attrName,option.value]);

                //If the chosen value has consequent attributes
                if(attrHash[newType].length>0){

                  seqAttrsTable=attrHash[newType];
                  numSeqAttr=0;

                  tagSeqs(level+1,varTag,initialAttrIds, num, numSeqAttr, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                  return;
                }else{ //If the chosen value doesn't have consequent attributes

                  if (numSeqAttr<(seqAttrsTable.length-1)){
                    tagSeqs(level,varTag,initialAttrIds, num, numSeqAttr+1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                    return;
                  }else if (numSeqAttr==(seqAttrsTable.length-1) && numSeqAttr==0){
                    seqAttrsTable=seqAttrsPerLevel[level-1];
                    tagSeqs(level-1,varTag,initialAttrIds, num, -1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                    return;
                  }else if (numSeqAttr==(seqAttrsTable.length-1) && numSeqAttr!=0){
                    if(level==1 || level==0){
                      tagSeqsInitial(varTag,num+1, initialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                      return;
                    }else{
                      seqAttrsTable=seqAttrsPerLevel[level-1];
                      tagSeqs(level-1,varTag,initialAttrIds, num, -1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                      return;
                    }
                  }
                }
            }
          }
          }
        });

      }else{ // if search==null || search==""
        $(select).attr("size", length);
        $.each(options2, function(i) {
          option = options2[i];
          if(option.value!="") {
            $(select).append(
              $('<option>').text(option.text).val(option.value)
            );

          }
        });
      }
      }
    });
  });
}


  //The user types the value of a category attribute
jQuery.fn.userInputAttrValueAdvanced = function(level,textbox, medium, varTag,initialAttrIds, userChosenAttributesAndValues, attrName, num,numSeqAttr, seqAttrsTable,categorySeqHash, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected) {
  var option;
  var select;
  var options;
  var options2;
  var search;
  var regex;

  $(textbox).off().on('change keyup', function(e) {
    //If the user presses enter
    if (e.which == 13) {

      $("#newDropdownDiv").hide();
      $("#select-type-input").show();
      $("#select-type-input")[0].value="";
      $("#chosen-select-type").show();
      $('#chosen-select-type').empty();
      $('#chosen-select-type')[0].value="";
      $('#user-type-input').hide();
      document.getElementById('select_a_tag').innerHTML = "";

      userChosenAttributesAndValues.push([attrName,cleanAttrValue($(textbox).val())]);
      $(textbox).val('');
      if (numSeqAttr<(seqAttrsTable.length-1)){
        tagSeqs(level,varTag,initialAttrIds, num, numSeqAttr+1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
        return;
      }else if (numSeqAttr==(seqAttrsTable.length-1) && numSeqAttr==0){
        seqAttrsTable=seqAttrsPerLevel[level-1];
        tagSeqs(level-1,varTag,initialAttrIds, num, -1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
        return;
      }else if (numSeqAttr==(seqAttrsTable.length-1) && numSeqAttr!=0){
        if(level==1 || level==0){
          tagSeqsInitial(varTag,num+1, initialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
          return;
        }else{
          seqAttrsTable=seqAttrsPerLevel[level-1];
          tagSeqs(level-1,varTag,initialAttrIds, num, -1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
          return;
        }
      }
    }
  });
}

//The user types the value of a category attribute
jQuery.fn.userInputAttrValueAdvancedInitial = function(level,textbox, medium, varTag,initialAttrIds,categorySeqHash, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected) {
  var option;
  var select;
  var options;
  var options2;
  var search;
  var regex;

    $(textbox).off().on('change keyup', function(e) {
      //If the user presses enter
      if (e.which == 13) {

          $("#newDropdownDiv").hide();
          $("#select-type-input").show();
          $("#select-type-input")[0].value="";
          $("#chosen-select-type").show();
          $('#chosen-select-type').empty();
          $('#chosen-select-type')[0].value="";
          $('#user-type-input').hide();
          document.getElementById('select_a_tag').innerHTML = "";

          userChosenAttributesAndValues.push([attrName,cleanAttrValue($(textbox).val())]);
          $(textbox).val('');

          if (num<(initialAttrIds.length-1)){
            tagSeqsInitial(varTag,num+1, initialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
            return;
          }else if (num==(initialAttrIds.length-1)){
            //addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode);
            tagSeqsInitial(varTag,num+1, initialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
            return;
          }

      }
  });

}

var seqAttrsPerLevel={};
var numsSeqAttrPerLevel={};

function tagSeqs(level,varTag,initialAttrIds, num, numSeqAttr, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected){

  if(level<=0){
    tagSeqsInitial(varTag,num+1, initialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
    return;
  }else{

  //When going up we register the information for this level. This information will be used when going down
  if(numSeqAttr!=-1){
    numsSeqAttrPerLevel[level]=numSeqAttr;
    seqAttrsPerLevel[level]=seqAttrsTable;
  }

  var attrId;
  if (numSeqAttr>-1){ //When going up
    attrId=seqAttrsTable[numSeqAttr][0];
  }else if(numSeqAttr==-1){ //When going down
    //We take the registered number and take the following one
    numSeqAttr=numsSeqAttrPerLevel[level]+1;
    //And we register the number of the attribute we are going to use. It will be the last attribute used on this level
    numsSeqAttrPerLevel[level]=numSeqAttr;

    seqAttrsTable=seqAttrsPerLevel[level];

    //If the last attribute of this level was defined, we go down
    if(numSeqAttr>=seqAttrsTable.length){
      seqAttrsTable=seqAttrsPerLevel[level-1];
      tagSeqs(level-1,varTag,initialAttrIds, num, -1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
      return;
    }else{
      attrId=seqAttrsTable[numSeqAttr][0];
    }        
  }

  var categoryTypesHa=categorySeqHash[attrId];
  var attrName=categoryTypesHa['name'];
  var allow_user_input=categoryTypesHa['allow_user_input'];
  attrHash=categoryTypesHa['values'];
  var categoryTypesTable=Object.keys(attrHash);

  var i;

  //If an attribute has no predefined values and no user input possibility, give an error message
  if(categoryTypesTable.length==0 && allow_user_input==0){
    alert("There is an error in the attribute's "+attrName+" conception. It should either have predefined values or allow user input.");
  }else{
    //If there are predefined values for this attribute
    if(categoryTypesTable.length>0){
      //Create the new dropdown menu for category types
      newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Select");

      for(i=0; i< categoryTypesTable.length; i++){
        //Add an option for the category types dropdown menu
        addAnOption(newDropdown,categoryTypesTable[i]);

        if(i==(categoryTypesTable.length-1)){
          if(onButton){
            $("#newDropdownDiv").css({'top':coords.y,'left':'','right':'4vw', 'position':'absolute'});
          }else{
            $("#newDropdownDiv").css({'top':coords.y,'left':coords.x,'right':'', 'position':'absolute'});
          }

          $("#newDropdownDiv").show();
          $('#select-type-input').show();
          $("#select-type-input")[0].value="";
          $('#select-type-input').focus();
          $('#chosen-select-type')[0].value="";
          $("#chosen-select-type").show();

          if(allow_user_input==1){ //If the user can enter a new value for this attribute          
            $('#user-type-input').show();
            jQuery.fn.userInputAttrValueAdvanced (level,$('#user-type-input'), medium, varTag,initialAttrIds, userChosenAttributesAndValues, attrName, num,numSeqAttr, seqAttrsTable,categorySeqHash, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
            return;
          }

          $('#chosen-select-type').filterByTextAdvanced(level,$('#select-type-input'), medium, varTag,initialAttrIds, userChosenAttributesAndValues, attrName,attrHash, num,numSeqAttr, seqAttrsTable,categorySeqHash, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);

          $("#chosen-select-type").off().change(attrName,function(event3){                       
            document.getElementById('select_a_tag').innerHTML = "";                      
            if(event3.target == this){
              type=$(this).val();
              if(type!=null && type!=''){
                newType=type;
                type='';

                userChosenAttributesAndValues.push([attrName,newType]);

                $("#newDropdownDiv").hide();
                $('#chosen-select-type').empty();
                $('#chosen-select-type')[0].value="";

                //If the chosen value has consequent attributes
                if(attrHash[newType].length>0){
                  seqAttrsTable=attrHash[newType];
                  numSeqAttr=0;

                  tagSeqs(level+1,varTag,initialAttrIds, num, numSeqAttr, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                  return;

                }else{ //If the chosen value doesn't have consequent attributes

                  if (numSeqAttr<(seqAttrsTable.length-1)){
                    tagSeqs(level,varTag,initialAttrIds, num, numSeqAttr+1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                    return;
                  }else if (numSeqAttr==(seqAttrsTable.length-1) && numSeqAttr==0){
                    seqAttrsTable=seqAttrsPerLevel[level-1];
                    tagSeqs(level-1,varTag,initialAttrIds, num, -1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                    return;
                  }else if (numSeqAttr==(seqAttrsTable.length-1)){
                    if(level==1 || level==0){
                      tagSeqsInitial(varTag,num+1, initialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                      return;
                    }else{
                      seqAttrsTable=seqAttrsPerLevel[level-1];
                      tagSeqs(level-1,varTag,initialAttrIds, num, -1, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                      return;
                    }
                  }
                }         
              }
            }     
          });
        }
      }
    }else{ //If there are no predefined values for this attribute
      if(allow_user_input==1){ //If the user can enter a new value for this attribute
        //Create the new dropdown menu for category types
        newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Input");
        if(onButton){
          $("#newDropdownDiv").css({'top':coords.y,'left':'','right':'4vw', 'position':'absolute'});
        }else{
          $("#newDropdownDiv").css({'top':coords.y,'left':coords.x,'right':'', 'position':'absolute'});
        }

        $("#newDropdownDiv").show();
        $("#select-type-input").hide();
        $("#select-type-input")[0].value="";
        $('#chosen-select-type').empty();
        $('#chosen-select-type')[0].value="";
        $("#chosen-select-type").hide();          
        $('#user-type-input').show();
        $('#user-type-input').focus();
        jQuery.fn.userInputAttrValueAdvanced (level,$('#user-type-input'), medium, varTag,initialAttrIds, userChosenAttributesAndValues, attrName, num,numSeqAttr, seqAttrsTable,categorySeqHash, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
        return;
      }else{ //The user can't enter a new value (erroneous case: the attribute exists, but has no values and can't obtain one)

        alert("There is a mistake in the attribute \""+attrName+"\" design: an attribute should either have a list of predefined values or allow user input.");
        return false;

      }
    }
    //return;
  }
  }
  return;
}


function tagSeqsInitial(varTag,num, initialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected){

  if(num>=initialAttrIds.length){
    if(selected==true){
      medium.tagSelection3(varTag, userChosenAttributesAndValues, notCollapsedArgsTable[0], focusNode, notCollapsedArgsTable[1], focusOffset);
    }else{
      addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode);
    }
    return;
  }
  var attrId=parseInt(initialAttrIds[num]);

  var categoryTypesHa=categorySeqHash[attrId];
  var attrName=categoryTypesHa['name'];
  var allow_user_input=categoryTypesHa['allow_user_input'];
  attrHash=categoryTypesHa['values'];
  var categoryTypesTable=Object.keys(attrHash); // categoryTypesTable now contains all the possible values of this attribute
  var i;


  //If an attribute has no predefined values and no user input possibility, give an error message
  if(categoryTypesTable.length==0 && allow_user_input==0){
    alert("There is an error in the attribute's "+attrName+" conception. It should either have predefined values or allow user input.");
  }else{
    //If there are predefined values for this attribute
    if(categoryTypesTable.length>0){
      //Create the new dropdown menu for category types
      newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Select");

      for(i=0; i< categoryTypesTable.length; i++){
        //Add an option for the category types dropdown menu
        addAnOption(newDropdown,categoryTypesTable[i]);

        if(i==(categoryTypesTable.length-1)){
          if(onButton){
            $("#newDropdownDiv").css({'top':coords.y,'left':'','right':'4vw', 'position':'absolute'});
          }else{
            $("#newDropdownDiv").css({'top':coords.y,'left':coords.x,'right':'', 'position':'absolute'});
          }

          $("#newDropdownDiv").show();
          $('#select-type-input').show();
          $("#select-type-input")[0].value="";
          $('#select-type-input').focus();
          //$('#chosen-select-type').empty();
          $('#chosen-select-type')[0].value="";
          $("#chosen-select-type").show();

          if(allow_user_input==1){ //If the user can enter a new value for this attribute          
            $('#user-type-input').show();
            jQuery.fn.userInputAttrValueAdvancedInitial (0,$('#user-type-input'), medium, varTag,initialAttrIds,categorySeqHash, userChosenAttributesAndValues, attrName, num,categorySeqHash, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
          }

          $('#chosen-select-type').filterByTextAdvanced(0,$('#select-type-input'), medium, varTag,initialAttrIds, userChosenAttributesAndValues, attrName, attrHash,num,num,initialAttrIds,categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);

          $("#chosen-select-type").off().change(attrName,function(event3){   

            if(event3.target == this){
              type=$(this).val();
              if(type!=null && type!=''){
                newType=type;
                type='';

                userChosenAttributesAndValues.push([attrName,newType]);
                $("#newDropdownDiv").hide();
                $('#chosen-select-type').empty();
                $('#chosen-select-type')[0].value="";
                document.getElementById('select_a_tag').innerHTML = "";

                //If the chosen value has consequent attributes
                if(Object.keys(attrHash).length>0 && attrHash[newType].length>0){

                  seqAttrsTable=attrHash[newType];

                  var numSeqAttr=0;
                  var seqAttrId=seqAttrsTable[numSeqAttr][0];
                  var seqAttrName=seqAttrsTable[numSeqAttr][1];

                  tagSeqs(1,varTag,initialAttrIds, num, numSeqAttr, seqAttrsTable, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                }else{

                  if (num<(initialAttrIds.length-1)){
                    tagSeqsInitial(varTag,num+1, initialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
                  }else if (num==(initialAttrIds.length-1)){
                    if(selected==true){
                      medium.tagSelection3(varTag, userChosenAttributesAndValues, notCollapsedArgsTable[0], focusNode, notCollapsedArgsTable[1], focusOffset);
                    }else{
                      addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode);
                    }
                  }
                }         
              }
            }

          });
        }
      }
    }else{ //If there are no predefined values for this attribute
      if(allow_user_input==1){ //If the user can enter a new value for this attribute
        //Create the new dropdown menu for category types
        newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Input");
        if(onButton){
          $("#newDropdownDiv").css({'top':coords.y,'left':'','right':'4vw', 'position':'absolute'});
        }else{
          $("#newDropdownDiv").css({'top':coords.y,'left':coords.x,'right':'', 'position':'absolute'});
        }

        $("#newDropdownDiv").show();
        $("#select-type-input").hide();
        $("#select-type-input")[0].value="";
        $('#chosen-select-type').empty();
        $('#chosen-select-type')[0].value="";
        $("#chosen-select-type").hide();          
        $('#user-type-input').show();
        $('#user-type-input').focus();
        jQuery.fn.userInputAttrValueAdvancedInitial (0,$('#user-type-input'), medium, varTag,initialAttrIds,categorySeqHash, userChosenAttributesAndValues, attrName, num,categorySeqHash, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton,selected);
      }else{ //The user can't enter a new value (erroneous case: the attribute exists, but has no values and can't obtain one)

        alert("There is a mistake in the attribute \""+attrName+"\" design: an attribute should either have a list of predefined values or allow user input.");
        return false;

      }
    }

  }
}

function getNextCollapsed(varTag,num, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton){

  var categoryTypesTable=categoryTable[num][2];
  var attrName=categoryTable[num][0];
  var allow_user_input=categoryTable[num][1];        

  //If there are predefined values for this attribute
  if(categoryTypesTable.length>0){
    //Create the new dropdown menu for category types
    newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Select");

    for(i=0; i< categoryTypesTable.length; i++){
      //Add an option for the category types dropdown menu
      addAnOption(newDropdown,categoryTypesTable[i]);

      if(i==(categoryTypesTable.length-1)){
        if(onButton){
          $("#newDropdownDiv").css({'top':coords.y,'left':'','right':'4vw', 'position':'absolute'});
        }else{
          $("#newDropdownDiv").css({'top':coords.y,'left':coords.x,'right':'', 'position':'absolute'});
        }

        $("#newDropdownDiv").show();
        $('#select-type-input').show();
        $("#select-type-input")[0].value="";
        $('#select-type-input').focus();
        //$('#chosen-select-type').empty();
        $("#chosen-select-type").show();

        if(allow_user_input==1){ //If the user can enter a new value for this attribute          
          $('#user-type-input').show();
          jQuery.fn.userInputAttrValueCollapsed ($('#user-type-input'), medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
        }

        $('#chosen-select-type').filterByTextCollapsed($('#select-type-input'), medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable,focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);

        $("#chosen-select-type").off().change(attrName,function(event3){                        
          document.getElementById('select_a_tag').innerHTML = "";                      
          if(event3.target == this){
            type=$(this).val();
            if(type!=null && type!=''){
              newType=type;
              type='';

              userChosenAttributesAndValues.push([attrName,newType]);

              $("#newDropdownDiv").hide();
              $('#chosen-select-type').empty();
              $('#chosen-select-type')[0].value="";

              if (num<(categoryTable.length-1)){
                getNextCollapsed(varTag,num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
              }

              if (num==(categoryTable.length-1)){
                addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode);
              }

            }
          }

        });
      }
    }
  }else{ //If there are no predefined values for this attribute
    if(allow_user_input==1){ //If the user can enter a new value for this attribute
      //Create the new dropdown menu for category types
      newDropdown=addNewDropdown(categoryTypesTable.length,attrName, "Input");
      if(onButton){
        $("#newDropdownDiv").css({'top':coords.y,'left':'','right':'4vw', 'position':'absolute'});
      }else{
        $("#newDropdownDiv").css({'top':coords.y,'left':coords.x,'right':'', 'position':'absolute'});
      }

      $("#newDropdownDiv").show();
      $("#select-type-input").hide();
      $("#select-type-input")[0].value="";
      $('#chosen-select-type').empty();
      $('#chosen-select-type')[0].value="";
      $("#chosen-select-type").hide();          
      $('#user-type-input').show();
      $('#user-type-input').focus();
      jQuery.fn.userInputAttrValueCollapsed ($('#user-type-input'), medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
    }else{ //The user can't enter a new value (erroneous case: the attribute exists, but has no values and can't obtain one)

      alert("There is a mistake in the attribute \""+attrName+"\" design: an attribute should either have a list of predefined values or allow user input.");
      return false;

    }
  }
}


function collapsedNoAttributesInsertTag(varTag,focusOffset,focusNode){
  medium.focus();

  d = new Date();
  milliseconds = d.getTime();
  tagCode=milliseconds.toString();


  tagWithType='<'+varTag+' tagcode="'+tagCode+'" class="medium-'+varTag+'" mode="'+userChosenAttributesAndValues[0][1]+'">\u200B</'+varTag+'>';

  medium.focusNadya(focusOffset,focusNode);
  medium.insertHtmlNadya(tagWithType, focusOffset, focusNode);

  tagWithType='';
  $('.chosen-select-no-results').chosen_reset(config);
  $(".popupBody").hide();
  document.getElementById('select_a_tag').innerHTML = "";

  return false;
}

//Remove forbidden characters from an attribute's value
function cleanAttrValue(val){
  val=$( $.parseHTML(val) ).text(); //Against malicious user input (a script in an input field)
  if(val==null || val==''){
    alert("The attribute's value is empty.");
  }
  return val.replace(/[<&"'>]+/g, "_");
}

//The user types the value of a category attribute in an input field
jQuery.fn.userInputAttrValueSomethingSelected = function(textbox, medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton) {
  var option;
  var select;
  var options;
  var options2;
  var search;
  var regex;

    $(textbox).off().on('change keyup', function(e) {
      //If the user presses enter
      if (e.which == 13) {

          $("#newDropdownDiv").hide();
          $("#select-type-input").show();
          $("#select-type-input")[0].value="";
          $("#chosen-select-type").show();
          $('#chosen-select-type').empty();
          $('#chosen-select-type')[0].value="";
          $('#user-type-input').hide();
          document.getElementById('select_a_tag').innerHTML = "";


          userChosenAttributesAndValues.push([attrName,cleanAttrValue($(textbox).val())]);
          $(textbox).val('');
          if (num<(categoryTable.length-1)){
            getNextSomethingSelected(varTag, num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
          }

          if (num==(categoryTable.length-1)){
            medium.tagSelection3(varTag, userChosenAttributesAndValues, notCollapsedArgsTable[0], focusNode, notCollapsedArgsTable[1], focusOffset);

          }

      }
  });
};


//The user types the value of a category attribute
jQuery.fn.userInputAttrValueCollapsed = function(textbox, medium, varTag, userChosenAttributesAndValues, attrName, num,categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton) {
  var option;
  var select;
  var options;
  var options2;
  var search;
  var regex;

    $(textbox).off().on('change keyup', function(e) {
      //If the user presses enter
      if (e.which == 13) {

          $("#newDropdownDiv").hide();
          $("#select-type-input").show();
          $("#select-type-input")[0].value="";
          $("#chosen-select-type").show();
          $('#chosen-select-type').empty();
          $('#chosen-select-type')[0].value="";
          $('#user-type-input').hide();
          document.getElementById('select_a_tag').innerHTML = "";

          userChosenAttributesAndValues.push([attrName,cleanAttrValue($(textbox).val())]);
          $(textbox).val('');
          if (num<(categoryTable.length-1)){
              getNextCollapsed(varTag,num+1, categoryTable, focusOffset,focusNode, notCollapsedArgsTable,coords,onButton);
          }

          if (num==(categoryTable.length-1)){
            addCategoryWithTypeS (medium, varTag, userChosenAttributesAndValues, focusOffset,focusNode);
          }

      }
  });

}


//Add tag
jQuery('#page_source_text').bind('keypress', hotkeysHash['insert_tag'], function(e) {
  if(Cookies.get('use_advanced_mode')==1){
    tagInAdvancedMode();
  }else{
    tagInSimpleMode();
  }
});

function buttonFunction(categoryid,categoryTag,coords){

  if(Cookies.get('use_advanced_mode')==1){
    tagButtonInAdvancedMode(categoryid,categoryTag,coords);
  }else{
    tagButtonInSimpleMode(categoryid,categoryTag,coords);
  }
}

function tagButtonInSimpleMode(categoryid,categoryTag,coords){
  userChosenAttributesAndValues=[['mode',0]];
  selection = window.getSelection();
  [focusOffset,focusNode,anchorOffset,anchorNode]=medium.returnOffset();
  notCollapsedArgsTable=[anchorNode,anchorOffset];

  if(categoryid in categoryTypesHash){
    if(selection.isCollapsed){
      //userChosenAttributesAndValues=[];
      var categoryTable=categoriesInfo[categoryid];
      getNextCollapsed(categoryTag,0, categoryTable,focusOffset,focusNode, notCollapsedArgsTable,coords,true);
    }else{
      tagSelectionWithType(categoryid, categoriesInfo, medium, categoryTag, focusOffset, focusNode, [anchorNode, anchorOffset], coords,true);
    }
  }else{
    if(selection.isCollapsed){
      collapsedNoAttributesInsertTag(categoryTag,focusOffset,focusNode);
    }else{
      medium.tagSelection3(categoryTag, userChosenAttributesAndValues, anchorNode,focusNode,anchorOffset, focusOffset);
    }
  }
  //return false;
}

function tagButtonInAdvancedMode(categoryid,categoryTag,coords){
  userChosenAttributesAndValues=[['mode',1]];
  selection = window.getSelection();
  [focusOffset,focusNode,anchorOffset,anchorNode]=medium.returnOffset();

  notCollapsedArgsTable=[anchorNode,anchorOffset];

  if(selection.isCollapsed){
    //If the category has types
    if(categoryid in categoryTypesHashAdv){

      //userChosenAttributesAndValues=[];

      var categorySeqHash=categoryTypesHashAdv[categoryid];
      var thisCategoryInitialAttrIds=[];
      if(initialAttrIds.hasOwnProperty(categoryid)){
        thisCategoryInitialAttrIds=initialAttrIds[categoryid];
      }else{
        thisCategoryInitialAttrIds=[];
      }

      tagSeqsInitial(categoryTag,0, thisCategoryInitialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,true,false);

    }else{ //If the category doesn't have types

      collapsedNoAttributesInsertTag(categoryTag,focusOffset,focusNode);

    }
  }else{ //If the selection is not collapsed
    //If the category has types
    if(categoryid in categoryTypesHashAdv){

      //userChosenAttributesAndValues=[];

      var categorySeqHash=categoryTypesHashAdv[categoryid];
      var thisCategoryInitialAttrIds=[];
      if(initialAttrIds.hasOwnProperty(categoryid)){
        thisCategoryInitialAttrIds=initialAttrIds[categoryid];
      }else{
        thisCategoryInitialAttrIds=[];
      }

      tagSeqsInitial(categoryTag,0, thisCategoryInitialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,true,true);

    }else{ //If the category doesn't have types
      medium.tagSelection3(categoryTag, userChosenAttributesAndValues, anchorNode,focusNode,anchorOffset, focusOffset);
      //medium.tagSelection3(categoryTag, [], anchorNode,focusNode,anchorOffset, focusOffset);

      return false;
    }
  }
}

function tagInAdvancedMode(){
  userChosenAttributesAndValues=[['mode',1]];
  //var coords = getSelectionCoords();
  coords = getSelectionCoords();
  nowX=coords.x;
  nowY=coords.y;

  [focusOffset,focusNode,anchorOffset,anchorNode]=medium.returnOffset();
  notCollapsedArgsTable=[anchorNode,anchorOffset];
  selection = window.getSelection();

  //If the cursor is in the medium, but nothing has been selected
  if(selection.isCollapsed){
    $(".popupBodyAdv").css({'top':nowY,'left':nowX});
    $(".popupBodyAdv").show();
    $(".chosen-adv").trigger('chosen:activate');
    //$(".chosen-adv").show();


    $(".chosen-adv").chosen().change(function(event){
      if(event.target == this){
        $tag=$(this).val();
        if($tag!= null && $tag!=''){
          varTag=$tag;
          $tag='';
          options = $( ".chosen-adv option:selected" );
          categoryid=options[0].attributes[1].value;
          $('.chosen-adv').chosen_reset(config);
          $(".popupBodyAdv").hide();
          $(".popupBodyAdv").css({'top':0,'left':0});
          document.getElementById('select_a_tag').innerHTML = "";

          //If the category has types
          if(categoryid in categoryTypesHashAdv){

            //userChosenAttributesAndValues=[];

            var categorySeqHash=categoryTypesHashAdv[categoryid];
            var thisCategoryInitialAttrIds=[];
            if(initialAttrIds.hasOwnProperty(categoryid)){
              thisCategoryInitialAttrIds=initialAttrIds[categoryid];
            }else{
              thisCategoryInitialAttrIds=[];
            }

            tagSeqsInitial(varTag,0, thisCategoryInitialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,false,false);

          }else{ //If the category doesn't have types

            collapsedNoAttributesInsertTag(varTag,focusOffset,focusNode);

          }
        }
        return false;
      }
      return false;
    });

  }else{ //If selection is not collapsed: if something has been selected
    $(".popupBodyAdv2").css({'top':nowY,'left':nowX});
    $(".popupBodyAdv2").show();

    $(".chosen-adv2").trigger('chosen:activate');


    $(".chosen-adv2").chosen().change(function(event4){
      if(event4.target == this){
        $tag2=$(this).val();
        if($tag2!= null && $tag2!=''){
          varTag=$tag2;
          $tag2='';
          options = $( ".chosen-adv2 option:selected" );
          categoryid=options[0].attributes[1].value;
          //$('.chosen-select-no-results2').chosen_reset(config);
          $('.chosen-adv2').chosen_reset(config);
          $(".popupBodyAdv2").hide();
          $(".popupBodyAdv2").css({'top':0,'left':0});
          document.getElementById('select_a_tag').innerHTML = "";

          //If the category has types
          if(categoryid in categoryTypesHashAdv){
            userChosenAttributesAndValues=[['mode',1]];
            //userChosenAttributesAndValues=[];

            var categorySeqHash=categoryTypesHashAdv[categoryid];

            var thisCategoryInitialAttrIds=[];
            if(initialAttrIds.hasOwnProperty(categoryid)){
              thisCategoryInitialAttrIds=initialAttrIds[categoryid];
            }else{
              thisCategoryInitialAttrIds=[];
            }

            tagSeqsInitial(varTag,0, thisCategoryInitialAttrIds, categorySeqHash,focusOffset,focusNode, notCollapsedArgsTable,coords,false,true);

          }else{ //If the category doesn't have types

            medium.tagSelection3(varTag, [], anchorNode,focusNode,anchorOffset, focusOffset);

            return false;
          }
        }
        return false;
      }
      return false;
    });
  }

}

//Add tag in simplemode
function tagInSimpleMode() {
  userChosenAttributesAndValues=[['mode',0]];
  //var coords = getSelectionCoords();
  coords = getSelectionCoords();
  nowX=coords.x;
  nowY=coords.y;

  [focusOffset,focusNode,anchorOffset,anchorNode]=medium.returnOffset();
  notCollapsedArgsTable=[anchorNode,anchorOffset];
  selection = window.getSelection();


  //If the cursor is in the medium, but nothing has been selected
  if(selection.isCollapsed){
    $(".popupBody").css({'top':nowY,'left':nowX});
    $(".popupBody").show();

    $(".chosen-select-no-results").trigger('chosen:activate');

    $(".chosen-select-no-results").chosen().change(function(event){
      if(event.target == this){
        $tag=$(this).val();
        if($tag!= null && $tag!=''){
          varTag=$tag;
          $tag='';
          options = $( ".chosen-select-no-results option:selected" );
          categoryid=options[0].attributes[1].value;
          $('.chosen-select-no-results').chosen_reset(config);
          $(".popupBody").hide();
          $(".popupBody").css({'top':0,'left':0});
          document.getElementById('select_a_tag').innerHTML = "";

          //If the category has types
          if(categoryid in categoriesInfo){

            //userChosenAttributesAndValues=[];

            var categoryTable=categoriesInfo[categoryid];

            getNextCollapsed(varTag,0, categoryTable,focusOffset,focusNode, notCollapsedArgsTable,coords,false);

          }else{ //If the category doesn't have types

            collapsedNoAttributesInsertTag(varTag,focusOffset,focusNode);

          }
        }
        return false;
      }
      return false;
    });

  }else{ //If selection is not collapsed: if something has been selected
    $(".popupBody2").css({'top':nowY,'left':nowX});
    $(".popupBody2").show();

    $(".chosen-select-no-results2").trigger('chosen:activate');


    $(".chosen-select-no-results2").chosen().change(function(event4){
      if(event4.target == this){
        $tag2=$(this).val();
        if($tag2!= null && $tag2!=''){
          varTag=$tag2;
          $tag2='';
          options = $( ".chosen-select-no-results2 option:selected" );
          categoryid=options[0].attributes[1].value;
          $('.chosen-select-no-results2').chosen_reset(config);
          $(".popupBody2").hide();
          $(".popupBody2").css({'top':0,'left':0});
          document.getElementById('select_a_tag').innerHTML = "";

          //If the category has types
          if(categoryid in categoryTypesHash){
            tagSelectionWithType(categoryid, categoriesInfo, medium, varTag, focusOffset,focusNode, notCollapsedArgsTable, coords, false);

          }else{ //If the category doesn't have types

            //medium.tagSelection3(varTag, [], anchorNode,focusNode,anchorOffset, focusOffset);
            medium.tagSelection3(varTag, userChosenAttributesAndValues, anchorNode,focusNode,anchorOffset, focusOffset);
            return false;
          }
        }
        return false;
      }
      return false;
    });

  } // End if selection.isCollapsed

  //return false;
};


article.highlight = function() {
  if (document.activeElement !== article) {
    medium.select();
  }
};


$( ".undo" ).mousedown(function() {
  medium.undo();
  return false;
});

$( ".delete_tag" ).mousedown(function() {
  position = $(this).offset();
  //var coords = {x:position.left, y:position.top};
  coords = {x:position.left, y:position.top};
  deleteTag(coords,true);
});


//Delete a tag
jQuery('#page_source_text').bind('keypress', hotkeysHash['delete_tag'], function(e) {
  var coords = getSelectionCoords();
  deleteTag(coords,false);
});


$( ".change_tag" ).mousedown(function() {
  position = $(this).offset();
  //var coords = {x:position.left, y:position.top};
  coords = {x:position.left, y:position.top};
  changeTag(coords,true);
});


//Change a tag
jQuery('#page_source_text').bind('keypress', hotkeysHash['modify_tag'], function(e) {
  coords = getSelectionCoords();
  changeTag(coords,false);
});

function findParents(){
  [focusOffset,focusNode,anchorOffset,anchorNode]=medium.returnOffset();
  var els = [];
  var a=anchorNode;

  //Find all the parents of the anchorNode (the node where the cursor or the beginning of the selection is)
  while (a!=null) {
    a = a.parentNode;
    if(a.id=="page_source_text"){
      break;
    }
    if(a.tagName!="DIV"){
      els.unshift(a);
    }
  }
  return els;
}

//Change a tag
function changeTag(coords,onButton){
  if ( $("#change_div").css('display') == 'none' ){

  var els = findParents();

  //If the node has parent nodes (=tags)
  if(els.length>0){

    var i,
      name,
      nameTag,
      menuDiv=document.getElementById("change_div"),
      radio,
      label,
      button,
      hideDivButton=document.createElement('button');

      hideDivButton.className="hide_popup_button";
      hideDivButton.title=localStorage['hide_popup'] || 'Alt+R';
      hideDivButton.appendChild(document.createTextNode("\u26cc"));
      hideDivButton.onclick=function(){
        hideChangePopup(); 
      };
      menuDiv.appendChild(hideDivButton);

      var titlediv = document.createElement("div");
      titlediv.appendChild(document.createTextNode("Choose the tag to modify:"));
      titlediv.className="popup_title_div";
      menuDiv.appendChild(titlediv);


    //Create a menu
    for(i=0; i<els.length; i++){
      nameTag=els[i].nodeName;
      name=nameTag.replace(/_ID\d+$/g, "");
      radio = document.createElement('input');
      radio.type = "radio";
      radio.name = "change_tag_radio";
      radio.value = els[i].getAttribute('tagcode');
      radio.id = "change_radio_"+nameTag;
      label = document.createElement('label');
      label.htmlFor = "change_radio_"+nameTag;
      label.className=("medium-"+nameTag).toLowerCase();
      label.appendChild(document.createTextNode(name));
      menuDiv.appendChild(radio);
      menuDiv.appendChild(label);
      menuDiv.appendChild(document.createElement('br'));        
    }

    button = document.createElement('button');
    button.onclick = function(){
      changeSelectedTag(coords,onButton);
    };

    button.appendChild(document.createTextNode("Change the chosen tag"));
    menuDiv.appendChild(button);
    if(onButton==true){
      $("#change_div").css({'top':coords.y+20,'left':'','right':'4vw', 'position':'absolute'});
    }else{
      $("#change_div").css({'top':coords.y+20,'left':coords.x, 'right':'', 'position':'absolute'});
    }

    $("#change_div").show();
  }
  }
}

//Get all attributes of a node
function getAttributes ($node) {
  var attrs = {};
  $.each( $node[0].attributes, function ( index, attribute ) {
    attrs[attribute.name] = attribute.value;
  } );

  return attrs;
}

function updateCorrespondingInput(inputId,newvalue){
  $("#"+inputId).val(newvalue);
}

function hideDeletionPopup(){
  $("#deletion_div").empty();
  $("#deletion_div").hide();
}

function hideChangePopup(){
  //Delete the radios from the menu div
  $('#change_div').empty();
  //Hide the menu
  $("#change_div").hide();
}

function hideChangeAttributesPopup(){
  //Delete the radios from the menu div
  $("#change_selected_div").empty();
  //Hide the menu
  $("#change_selected_div").hide();
}

//Functions that calls medium.js in order to remove the tags chosen via the popup menu checkboxes
function changeSelectedTag(coords,onButton){

  //Get the checked tagcode
  var tagCodeToChange = $("input[name=change_tag_radio]:checked").val();

  //Delete the radios from the menu div
  $('#change_div').empty();
  //Hide the menu
  $("#change_div").hide();

  var attrs=getAttributes($("[tagcode="+tagCodeToChange+"]"));
  var tagName=$("[tagcode="+tagCodeToChange+"]").prop("tagName");
  var catId=tagName.match(/_ID(\d+)$/)[1];

  var div = document.getElementById("change_selected_div"),
      input,
      label,
      attrName,
      button,
      numberOfChangableAttrs=0,
      i,
      option,
      hideDivButton=document.createElement('button');


  hideDivButton.className="hide_popup_button";
  hideDivButton.title=localStorage['hide_popup'] || 'Alt+R';
  hideDivButton.appendChild(document.createTextNode("\u26cc"));
  hideDivButton.onclick=function(){
    hideChangeAttributesPopup(); 
  };
  div.appendChild(hideDivButton);

  var titlediv = document.createElement("div");
  var span=document.createElement("span");
  span.className=("medium-"+tagName).toLowerCase();
  span.appendChild(document.createTextNode(tagName.match(/^(.+)_ID\d+$/)[1]));

  titlediv.appendChild(document.createTextNode("Modify attribute values of the "));
  titlediv.appendChild(span);
  titlediv.appendChild(document.createTextNode(" tag:"));
  titlediv.className="popup_title_div";
  div.appendChild(titlediv);

  //var attrsHash=categoryTypesHash[parseInt(catId)];
  var attrsHashBefore={};
  var attrsHash={};

  //If the element was added in the advanced mode, we look for its attributes in the advanced mode hash. Otherwise we look for its attributes in the simple mode hash.
  if(attrs["mode"]=="1"){
    attrsHashBefore=categoryTypesHashAdv[parseInt(catId)];
    var key;
    for(key in attrsHashBefore){
      attrsHash[attrsHashBefore[key].name]={'allow_user_input':attrsHashBefore[key].allow_user_input,'values':Object.keys(attrsHashBefore[key].values)};
    }
  }else{
    attrsHash=categoryTypesHash[parseInt(catId)];
  }

  //Loop through all attributes of the chosen category
  for (attrName in attrs){
    if(attrName!='class' && attrName!='tagcode' && attrName!='mode'){
      //If the attribute is in the hash of attributes for this category (in case it had been deleted by the collection owner)
      if(attrsHash[attrName]!=null){
        label = document.createElement('label');
        label.setAttribute("for","value_"+attrName);
        label.setAttribute("class","popup_attribute_label");
        label.innerHTML = attrName;
        div.appendChild(label);
        numberOfChangableAttrs+=1;

        //If the user is allowed to type attribute values
        if(attrsHash[attrName]['allow_user_input']==1){
          input = document.createElement("input");
          input.type = "text";
          input.id = "value_"+attrName;
          input.value = attrs[attrName];
          input.name=tagCodeToChange;
          input.className="input_attribute_value_transcribe";
          div.appendChild(input);
        }

        //If there are predefined attributes
        if(attrsHash[attrName]['values'].length>0){
          //Create a dropdown to let the user select an attribute value from the list
          var select = document.createElement("select");
          select.className="input_attribute_value_transcribe";
          select.id = "value_"+attrName;
          select.name='select_'+tagCodeToChange;
          select.onchange=function(){
            updateCorrespondingInput(this.id,this.value);
          };


          for (i=0; i<attrsHash[attrName]['values'].length; i++){
            option = document.createElement("option");
            option.value=attrsHash[attrName]['values'][i];
            if(attrsHash[attrName]['values'][i]==attrs[attrName]){
              option.selected="checked";
            }else{
              option.selected="";
            }
            option.innerHTML=attrsHash[attrName]['values'][i];

            select.appendChild(option);
          }

          div.appendChild(select);
        }
      }
    }
  }


  if(numberOfChangableAttrs>0){
    button = document.createElement('button');
    button.onclick = function(){
      saveChangesInAttributeValues(tagCodeToChange);
    };

    button.appendChild(document.createTextNode("Save changes"));
    div.appendChild(button);

    if(onButton==true){
      $("#change_selected_div").css({'top':coords.y+20,'left':'','right':'4vw', 'position':'absolute'});
    }else{
      $("#change_selected_div").css({'top':coords.y+20,'left':coords.x,'right':'', 'position':'absolute'});
    }

    $("#change_selected_div").show();
  }else{
    $("#change_selected_div").hide();
    $("#change_selected_div").empty();
    alert("The tag "+tagName.match(/^(.+)_ID\d+$/)[1]+" has no attributes.");
  }

}

//Save changes the user made in the values of attributes of the chosen tag
function saveChangesInAttributeValues(tagCode){
  //Get new values
  var el,
    nodeList=document.getElementsByName(tagCode),
    nodeListSelect=document.getElementsByName('select_'+tagCode),
    newAttrsValuesTable={},
    id;

  //Create a hash with attribute names and their new values
  //First put inside values from the drop down select
  if(nodeListSelect.length>0){
  for (el=0; el<nodeListSelect.length; el++){
    id=nodeListSelect[el].id.substring(6);
    newAttrsValuesTable[id]=nodeListSelect[el].value;

    if(el==(nodeListSelect.length-1)){
      if(nodeList.length>0){
      //Next put inside values from the input fields
      for (el=0; el<nodeList.length; el++){
        id=nodeList[el].id.substring(6);
        newAttrsValuesTable[id]=cleanAttrValue(nodeList[el].value);

        if(el==(nodeList.length-1)){
          $("#change_selected_div").hide();
          $("#change_selected_div").empty();
          medium.changeSelectedTag(tagCode,newAttrsValuesTable);
          return false;
        }
      }
      }else{
          $("#change_selected_div").hide();
          $("#change_selected_div").empty();
          medium.changeSelectedTag(tagCode,newAttrsValuesTable);
          return false;
      }
    }
  }
  }else{
    //Next put inside values from the input fields
      for (el=0; el<nodeList.length; el++){
        id=nodeList[el].id.substring(6);
        newAttrsValuesTable[id]=cleanAttrValue(nodeList[el].value);

        if(el==(nodeList.length-1)){
          $("#change_selected_div").hide();
          $("#change_selected_div").empty();
          medium.changeSelectedTag(tagCode,newAttrsValuesTable);
          return false;
      }
    }
  }


}

//Delete a tag
function deleteTag(coords,onButton){
  if ( $("#deletion_div").css('display') == 'none' ){

  var els = findParents();

  //If the node has parent nodes (=tags)
  if(els.length>0){
    var i,
      name,
      nameTag,
      menuDiv=document.getElementById("deletion_div"),
      checkbox,
      label,
      button,
      hideDivButton=document.createElement('button');

      hideDivButton.className="hide_popup_button";
      hideDivButton.title=localStorage['hide_popup'] || 'Alt+R';
      hideDivButton.appendChild(document.createTextNode("\u26cc"));
      hideDivButton.onclick=function(){
        hideDeletionPopup(); 
      };
      menuDiv.appendChild(hideDivButton);

      var titlediv = document.createElement("div");
      titlediv.appendChild(document.createTextNode("Choose tag(s) to delete:"));
      titlediv.className="popup_title_div";
      menuDiv.appendChild(titlediv);


    //Create a menu
    for(i=0; i<els.length; i++){
      nameTag=els[i].nodeName;
      name=nameTag.replace(/_ID\d+$/g, "");
      checkbox = document.createElement('input');
      checkbox.type = "checkbox";
      checkbox.name = "delete_tag_checkbox";
      checkbox.value = els[i].getAttribute('tagcode');
      checkbox.id = "delete_checkbox_"+nameTag;
      label = document.createElement('label');
      label.htmlFor = "delete_checkbox_"+nameTag;
      label.className = "medium-"+nameTag.toLowerCase();
      label.appendChild(document.createTextNode(name));
      menuDiv.appendChild(checkbox);
      menuDiv.appendChild(label);
      menuDiv.appendChild(document.createElement('br'));        
    }

    button = document.createElement('button');
    button.onclick = function(){
      removeTag();
    };

    button.appendChild(document.createTextNode("Delete the chosen tag(s)"));
    menuDiv.appendChild(button);

    if(onButton==true){
      $("#deletion_div").css({'top':coords.y+20,'left':'','right':'4vw', 'position':'absolute'});
    }else{
      $("#deletion_div").css({'top':coords.y+20,'left':coords.x,'right':'', 'position':'absolute'});
    }
    $("#deletion_div").show();
  }
  }
}

// Pass the checkbox name to the function
function getCheckedBoxes(chkboxName) {
  var checkboxes = document.getElementsByName(chkboxName);
  var checkboxesChecked = [];
  // loop over them all
  for (var i=0; i<checkboxes.length; i++) {
    // And stick the checked ones onto an array...
    if (checkboxes[i].checked) {
      checkboxesChecked.push(checkboxes[i].value);
    }
  }
  // Return the array if it is non-empty, or null
  return checkboxesChecked.length > 0 ? checkboxesChecked : null;
}

//Functions that calls medium.js in order to remove the tags chosen via the popup menu checkboxes
function removeTag(){

  //Get the checked options
  var checkedTagcodes = getCheckedBoxes("delete_tag_checkbox");
  //Delete the checkboxes from the menu div
  $('#deletion_div').empty();
  //Hide the menu
  $("#deletion_div").hide();
  if(checkedTagcodes!=null && checkedTagcodes.length>0){
    medium.removeTags(checkedTagcodes);
  }

}

//Check if a string contains valid XML
function isXML(xml){
  try {
    xmlDoc = $.parseXML(xml); //is valid XML
    return true;
  } catch (err) {
    // was not XML
    return false;
  }
}


//Add the transcription text to the form before sending it to the server
function AddMediumValue() {
  mediumValue = medium.value();

  mediumValue = mediumValue.replace(/<br>/g, "<br></br>");

  mediumValue = mediumValue.replace(/\u200B/g, ""); //Delete invisible caracters inserted for +h and +c actions, because otherwise didn't work in webkit (chrome, safari)

  //mediumValue = mediumValue.replace(/&nbsp;/g, "&#160;"); // &nbsp; is not valid XML
  mediumValue = mediumValue.replace(/&nbsp;/g, " "); // &nbsp; is not valid XML

  if(mediumValue.match(/^<div id=\"bigDiv\">/)==null){
    mediumValue = "<div id=\"bigDiv\">"+mediumValue+"<\/div>";
  }

  if(isXML(mediumValue)){
    mediumValue = mediumValue.replace(/<div id=\"bigDiv\">/, '');
    mediumValue = mediumValue.replace(/<\/div>/, '');
    document.getElementsByName("page[source_text]")[0].value=mediumValue;
    return true;   // Returns Value
  }else{
    alert("The transcription contains tagging erros and can't be saved:\n"+mediumValue);
    return false;
  }


}
*/</script><script>var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-1505790-5"]);
_gaq.push(["_trackPageview"]);
_gaq.push(["_trackPageLoadTime"]);
(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' === document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('head')[0]; s.appendChild(ga);
})();</script></body></html>
."update_statistic start"
"update_statistic finish"
page in tag: <!DOCTYPE html><html><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><title>2 (CS Pierce, MS_641-642) | FromThePage</title><meta name="viewport" content="width=device-width"><meta name="description" content="2 (CS Pierce, MS_641-642) - page overview."><meta name="author" content="FromThePage.com"><meta name="copyright" content="(c) 2017 FromThePage.com"><meta name="verify-v1" content="2pFw887E35Fhfkyj/nFGzyui8dJ4rLbluudrp1mDcj0=">
<link href="http://localhost:3000/assets/favicon-3b65dba823d9f31072094535df6dfcbbe99cf14a55aedfaf619a09fed2ebb640.ico" rel="shortcut icon" type="image/vnd.microsoft.icon" />
<link href="//fonts.googleapis.com/css?family=Source+Serif+Pro:400,700|Crete+Round" media="screen" rel="stylesheet" />
<link href="http://localhost:3000/assets/application-e52f91bec5d45d23cab22abc353ccdab7de3c416266d83129f23cb78eb3155c5.css" media="screen" rel="stylesheet" /><script src="/jquery-2.1.4.min.js"></script><link rel="stylesheet" href="/medium.css"><link rel="stylesheet" href="/chosen.min.css"><link rel="stylesheet" href="/medium-tag-styles.css"><link rel="stylesheet" href="/my_style.css"><script type="text/javascript" src="/chosen.jquery.min.js"></script><script type="text/javascript" src="/rangy-core.js"></script><script type="text/javascript" src="/rangy-classapplier.js"></script><script type="text/javascript" src="/undo.js"></script><script type="text/javascript" src="/medium.js"></script><script type="text/javascript" src="/medium_subclass.js"></script><script>(function(e,b){if(!b.__SV){var a,f,i,g;
window.mixpanel=b;
b._i=[];b.init=function(a,e,d){function f(b,h){var a=h.split(".");
2==a.length&&(b=b[a[0]],h=a[1]);
b[h]=function(){b.push([h].concat(Array.prototype.slice.call(arguments,0)))}}var c=b;"undefined"!==typeof d?c=b[d]=[]:d="mixpanel";
c.people=c.people||[];c.toString=function(b){var a="mixpanel";
"mixpanel"!==d&&(a+="."+d);b||(a+=" (stub)");return a};
c.people.toString=function(){return c.toString(1)+".people (stub)"};
i="disable time_event track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config people.set people.set_once people.increment people.append people.union people.track_charge people.clear_charges people.delete_user".split(" ");
for(g=0;g<i.length;g++)f(c,i[g]);b._i.push([a,e,d])};
b.__SV=1.2;a=e.createElement("script");
a.type="text/javascript";
a.async=!0;a.src="undefined"!==typeof MIXPANEL_CUSTOM_LIB_URL?MIXPANEL_CUSTOM_LIB_URL:"file:"===e.location.protocol&&"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js".match(/^\/\//)?"https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js":"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";
f=e.getElementsByTagName("script")[0];
f.parentNode.insertBefore(a,f)}})(document,window.mixpanel||[]);mixpanel.init("d5e53d2387f7184a07bf99f207df9603");</script></head><body><header class="header"><div class="toolbar"><div class="toolbar_group"><a class="logo" href="/"><svg><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#logo"></use></svg></a></div><div class="toolbar_group"><a class="header_link" href="/dashboard_role">Dashboard</a><a class="header_link" href="/dashboard">Collections</a><a class="header_link" href="/static/faq">FAQ</a><dl class="dropdown right"><dt class="header_link header_user"><span><big>Signed In As</big><small>Eleanor</small></span><svg class="icon"><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#header-user"></use></svg></dt><dd><a href="/dashboard/watchlist">Collaborator Dashboard</a><hr><a href="/user/profile?user_id=2">Your Profile</a><hr><a data-method="delete" href="/users/sign_out" rel="nofollow">Sign Out</a></dd></dl></div></div></header><main class="wrapper"><ul class="breadcrumbs"><li><a href="/collection/show?collection_id=1">CS Pierce</a></li><li><a href="/display/read_work?work_id=9">MS_641-642</a></li></ul><div class="headline"><h1 class="headline_title">2</h1><div class="headline_aside"><nav class="page-nav"><a class="page-nav_prev" href="/display/display_page?page_id=24"><svg class="icon"><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#icon-arrow-left"></use></svg></a><span class="page-nav_info">Page 2 of 21</span><a class="page-nav_next" href="/display/display_page?page_id=26"><svg class="icon"><use xlink:href="http://localhost:3000/assets/symbols-d18264bf297658ba4ff70c873f69c8cbe9604eca470c051aa5f6449b942414d8.svg#icon-arrow-right"></use></svg></a></nav></div></div><div class="tabs"><a class="active">Overview</a><a href="/transcribe/display_page?page_id=25">Transcribe</a><a href="/page_version/list?page_id=25">Versions</a></div><div class="page-headlines"><div class="headline"><h3 class="headline_title">Facsimile</h3></div><div class="headline"><h3 class="headline_title">Transcription</h3></div></div><div class="page-columns" data-fullheight="{ &quot;bottom&quot;: 30, &quot;cssrule&quot;: &quot;height&quot; }"><div class="page-column"><div class="page-imagescan"><div class="zoomer-container"><img alt="1725" src="http://localhost:3000/images/uploaded/9/1725.jpg" /></div></div></div><div class="page-column"><div class="page-preview"><div class="centered"><div class="centered_content"><h5 class="nodata_title">This page is not transcribed</h5><p class="nodata_text">Please <a href="/transcribe/display_page?page_id=25">help transcribe</a> this page<br>or <a href="/transcribe/mark_page_blank?mark_blank=yes&amp;page_id=25&amp;source_text=blank">mark the page blank</a></p></div></div></div></div></div><h2 class="legend" id="notes">Page Notes</h2><div class="page-notes"><p class="acenter fglight" data-note-empty>Nobody has written a note for this page yet</p><div class="user-bubble"><div class="userpic"><img alt="Eleanor" height="80" src="http://gravatar.com/avatar/ddd977d037e1a6946357c962e37f193e?default=blank&secure=false&size=80" width="80" /></div><form accept-charset="UTF-8" action="/notes" class="user-bubble_form" data-remote="true" method="post"><div style="display:none"><input name="utf8" type="hidden" value="&#x2713;" /></div><input id="page_id" name="page_id" type="hidden" value="25" /><div class="user-bubble_form_editor"><textarea id="note_body" name="note[body]" placeholder="Write a new note..." rows="4">
</textarea></div><div class="user-bubble_form_footer"><span class="user-bubble_form_error"></span><button name="button" type="submit">Submit</button></div></form></div></div><script>mixpanel.track("Display Page");  </script></main><footer class="footer"><div class="footer_copyright">&copy; 2017 <a href="/">FromThePage</a>. All rights reserved.</div><div class="footer_nav"><a href="/static/about">About</a><a href="http://fromthepage.wpengine.com/terms-of-service/">Terms &amp; Conditions</a><a href="/static/privacy">Privacy Policy</a><a href="mailto:benwbrum@gmail.com">Contact Us</a></div></footer><div class="page-busy-overlay"></div><script src="http://localhost:3000/assets/application-41aece84efa6627667473eda880dceae50103b7d6ab70fb6c889d7ac8fd6a933.js"></script><script>$(function() {
  // Zoomer initialization
  var zoomer = $('.zoomer-container').zoomer();

  // Check localStorage support
  if(typeof Storage !== void(0)) {
    var data = zoomer.data('zoomer');
    var datakey = data.images[0];
    var storage = localStorage['zoomer:' + datakey];
    var properties = ['targetImageWidth','targetImageHeight','targetPositionerTop','targetPositionerLeft'];

    if(storage) {
      try {
        storage = JSON.parse(storage);
      } catch (err) {
        storage = null;
        console.log('JSON parse error: ' + err.message);
      }

      // Restore zoom level and pan position if exists
      if(storage) {
        data.$image.one("load.zoomer", function(){
          for(var i = 0, l = properties.length; i < l; i++) {
            var property = properties[i];
            data[property] = parseInt(storage[property], 10) || 0;
          }
          console.log('Zoomer state restored');
        });
      }
    }

    // Store zoom level and pan position
    $(window).on('beforeunload', function() {
      storage = {};
      for(var i = 0, l = properties.length; i < l; i++) {
        var property = properties[i];
        storage[property] = data[property];
      }
      localStorage['zoomer:' + datakey] = JSON.stringify(storage);
    });
  }
});</script><script>$(function() {
  // Toggle note edit
  $(document).on('click', '[data-note-edit]', function() {
    var $container = $(this).closest('.user-bubble').toggleClass('edit');
    if($container.hasClass('edit')) {
      $('form', $container)[0].reset();
      $('.user-bubble_form_error', $container).empty();
    }
  });

  // Create and update note
  $(document).on('ajax:complete', 'form.user-bubble_form', function(e, xhr) {
    var $container = $(this).parent();
    var $error = $('.user-bubble_form_error', $container).empty();
    if(xhr.status === 201) {
      // Note created
      var content = xhr.responseJSON.html;
      $(content).hide().insertBefore($container).fadeIn();
      $('[data-note-empty]').hide();
      this.reset();
    } else if(xhr.status === 204) {
      // Note updated
      var content = $('textarea', this).val();
      $container.removeClass('edit');
      $('.user-bubble_content > p', $container).text(content);
    } else {
      // Error occurred
      var message = xhr.responseJSON.join('. ');
      $error.text('Error: ' + message);
    }
  });

  // Delete note
  $(document).on('ajax:complete', '[data-note-delete]', function(e, xhr) {
    if(xhr.status === 200 || xhr.status === 204) {
      var $container = $(this).closest('.user-bubble');
      $container.fadeOut(function() { $(this).remove(); });
    }
  });
});</script><script>var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-1505790-5"]);
_gaq.push(["_trackPageview"]);
_gaq.push(["_trackPageLoadTime"]);
(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' === document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('head')[0]; s.appendChild(ga);
})();</script></body></html>
F********

Pending: (Failures listed here are expected and do not affect your suite's status)

  1) IA import actions imports a work from IA
     # Temporarily skipped with xdescribe
     # ./spec/features/archive_import_spec.rb:19

  2) IA import actions uses OCR when importing a work from IA
     # Temporarily skipped with xdescribe
     # ./spec/features/archive_import_spec.rb:39

  3) IA import actions tests ocr correction
     # Temporarily skipped with xdescribe
     # ./spec/features/archive_import_spec.rb:63

  4) IA import actions checks ocr/transcribe statistics
     # Temporarily skipped with xdescribe
     # ./spec/features/archive_import_spec.rb:80

  5) disable subject linking disables subject indexing in a collection
     # Temporarily skipped with xdescribe
     # ./spec/features/disable_subjects_spec.rb:18

  6) disable subject linking checks collection level subject items
     # Temporarily skipped with xdescribe
     # ./spec/features/disable_subjects_spec.rb:29

  7) disable subject linking checks work level subject items
     # Temporarily skipped with xdescribe
     # ./spec/features/disable_subjects_spec.rb:56

  8) disable subject linking checks page level subject items
     # Temporarily skipped with xdescribe
     # ./spec/features/disable_subjects_spec.rb:71

  9) disable subject linking enables subject indexing
     # Temporarily skipped with xdescribe
     # ./spec/features/disable_subjects_spec.rb:88

  10) disable subject linking checks links work when enabled
     # Temporarily skipped with xdescribe
     # ./spec/features/disable_subjects_spec.rb:99

  11) editor actions checks that an editor with permissions can see a restricted work
     # Temporarily skipped with xdescribe
     # ./spec/features/editor_actions_spec.rb:19

  12) editor actions checks that a restricted editor can't see a work
     # Temporarily skipped with xdescribe
     # ./spec/features/editor_actions_spec.rb:25

  13) editor actions looks at a collection
     # Temporarily skipped with xdescribe
     # ./spec/features/editor_actions_spec.rb:34

  14) editor actions looks at a work
     # Temporarily skipped with xdescribe
     # ./spec/features/editor_actions_spec.rb:54

  15) editor actions looks at pages
     # Temporarily skipped with xdescribe
     # ./spec/features/editor_actions_spec.rb:76

  16) editor actions transcribes a page
     # Temporarily skipped with xdescribe
     # ./spec/features/editor_actions_spec.rb:88

  17) editor actions translates a page
     # Temporarily skipped with xdescribe
     # ./spec/features/editor_actions_spec.rb:105

  18) editor actions adds a note
     # Temporarily skipped with xdescribe
     # ./spec/features/editor_actions_spec.rb:120

  19) editor actions checks a plain user profile
     # Temporarily skipped with xdescribe
     # ./spec/features/editor_actions_spec.rb:130

  20) editor actions tries to log in as another user
     # Temporarily skipped with xdescribe
     # ./spec/features/editor_actions_spec.rb:139

  21) guest user actions tests guest account creation and migration
     # Temporarily skipped with xdescribe
     # ./spec/features/guest_spec.rb:12

  22) guest user actions tests guest account transcription
     # Temporarily skipped with xdescribe
     # ./spec/features/guest_spec.rb:29

  23) subject linking looks at subjects in a collection
     # Temporarily skipped with xdescribe
     # ./spec/features/linking_spec.rb:20

  24) subject linking edits a subject's description
     # Temporarily skipped with xdescribe
     # ./spec/features/linking_spec.rb:35

  25) subject linking deletes a subject
     # Temporarily skipped with xdescribe
     # ./spec/features/linking_spec.rb:49

  26) subject linking links a categorized subject
     # Temporarily skipped with xdescribe
     # ./spec/features/linking_spec.rb:75

  27) subject linking enters a bad link - no closing braces
     # Temporarily skipped with xdescribe
     # ./spec/features/linking_spec.rb:101

  28) subject linking enters a bad link - no text
     # Temporarily skipped with xdescribe
     # ./spec/features/linking_spec.rb:115

  29) subject linking enters a bad link - single starting bracket
     # Temporarily skipped with xdescribe
     # ./spec/features/linking_spec.rb:137

  30) subject linking enters a bad link - triple brackets
     # Temporarily skipped with xdescribe
     # ./spec/features/linking_spec.rb:151

  31) subject linking creates a link that includes quotes
     # Temporarily skipped with xdescribe
     # ./spec/features/linking_spec.rb:165

  32) subject linking links subjects on a translation
     # Temporarily skipped with xdescribe
     # ./spec/features/linking_spec.rb:174

  33) subject linking tests autolinking in transcription
     # Temporarily skipped with xdescribe
     # ./spec/features/linking_spec.rb:193

  34) subject linking tests autolinking in translation
     # Temporarily skipped with xdescribe
     # ./spec/features/linking_spec.rb:215

  35) needs review sets the work to translation
     # Temporarily skipped with xdescribe
     # ./spec/features/needs_review_spec.rb:22

  36) needs review marks pages blank
     # Temporarily skipped with xdescribe
     # ./spec/features/needs_review_spec.rb:34

  37) needs review marks translated pages as blank
     # Temporarily skipped with xdescribe
     # ./spec/features/needs_review_spec.rb:56

  38) needs review marks pages as needing review
     # Temporarily skipped with xdescribe
     # ./spec/features/needs_review_spec.rb:68

  39) needs review marks translated pages as needing review
     # Temporarily skipped with xdescribe
     # ./spec/features/needs_review_spec.rb:93

  40) needs review filters list of review pages
     # Temporarily skipped with xdescribe
     # ./spec/features/needs_review_spec.rb:105

  41) needs review checks collection overview stats
     # Temporarily skipped with xdescribe
     # ./spec/features/needs_review_spec.rb:137

  42) needs review checks collection statistics
     # Temporarily skipped with xdescribe
     # ./spec/features/needs_review_spec.rb:167

  43) needs review marks pages as no longer needing review
     # Temporarily skipped with xdescribe
     # ./spec/features/needs_review_spec.rb:198

  44) needs review marks translated pages as no longer needing review
     # Temporarily skipped with xdescribe
     # ./spec/features/needs_review_spec.rb:215

  45) needs review marks pages not blank
     # Temporarily skipped with xdescribe
     # ./spec/features/needs_review_spec.rb:228

  46) owner views looks at owner tabs
     # Temporarily skipped with xdescribe
     # ./spec/features/owner_view_spec.rb:18

  47) owner views looks at subjects tab
     # Temporarily skipped with xdescribe
     # ./spec/features/owner_view_spec.rb:27

  48) owner views looks at statistics tab
     # Temporarily skipped with xdescribe
     # ./spec/features/owner_view_spec.rb:35

  49) owner views looks at settings tab
     # Temporarily skipped with xdescribe
     # ./spec/features/owner_view_spec.rb:47

  50) owner views looks at export tab
     # Temporarily skipped with xdescribe
     # ./spec/features/owner_view_spec.rb:57

  51) owner views looks at collaborators tab
     # Temporarily skipped with xdescribe
     # ./spec/features/owner_view_spec.rb:68

  52) Selenium Recipes - Start different browsers Invalid Login
     # Temporarily skipped with xdescribe
     # ./spec/features/selenium_firefox_spec.rb:47

  53) Selenium Recipes - Start different browsers Login successfully
     # Temporarily skipped with xdescribe
     # ./spec/features/selenium_firefox_spec.rb:70

  54) Selenium Recipes - Start different browsers go to Transcribe page, type a text and tag one word with a button successfully
     # Temporarily skipped with xdescribe
     # ./spec/features/selenium_firefox_spec.rb:80

  55) collection related tasks exports a collection
     # Temporarily skipped with xdescribe
     # ./spec/features/zz_convention_spec.rb:26

  56) collection related tasks checks for collection level transcription conventions
     # Temporarily skipped with xdescribe
     # ./spec/features/zz_convention_spec.rb:36

  57) collection related tasks changes work level transcription conventions
     # Temporarily skipped with xdescribe
     # ./spec/features/zz_convention_spec.rb:43

  58) collection related tasks changes conventions at collection level but not work level
     # Temporarily skipped with xdescribe
     # ./spec/features/zz_convention_spec.rb:59

  59) collection related tasks reverts to collection level transcription conventions
     # Temporarily skipped with xdescribe
     # ./spec/features/zz_convention_spec.rb:80

  60) testing deletions deletes a page
     # Temporarily skipped with xdescribe
     # ./spec/features/zz_deletion_spec.rb:13

  61) testing deletions deletes a work
     # Temporarily skipped with xdescribe
     # ./spec/features/zz_deletion_spec.rb:34

  62) testing deletions deletes a collection
     # Temporarily skipped with xdescribe
     # ./spec/features/zz_deletion_spec.rb:54
/usr/lib/ruby/vendor_ruby/bundler.rb:289: warning: Insecure world writable dir /var/lib/gems/2.3.0/bin in PATH, mode 040757

Failures:

  1) category attributes creates a new attribute value
     Failure/Error: expect(page).to have_css('#allow_user_input_', :count => 1)
       expected to find css "#allow_user_input_" 1 time but there were no matches. Also found "", which matched the selector but not all filters.
     # ./spec/features/category_attributes_spec.rb:58:in `block (2 levels) in <top (required)>'

  2) owner actions checks for subject in a new collection
     Failure/Error: expect(page).to have_content("Places")
       expected to find text "Places" in "DashboardCollectionsFAQSigned In AsMargaretOwner DashboardCollaborator DashboardYour ProfileSign OutNew Test CollectionOverviewStatisticsSubjectsSettingsExportCollaboratorsAdd WorkNo CategoriesThere are no subject categories in the collection.Create the first category you'll use to group subjects.Â© 2017 FromThePage. All rights reserved.AboutTerms & ConditionsPrivacy PolicyContact Us"
     # ./spec/features/owner_actions_spec.rb:59:in `block (2 levels) in <top (required)>'

  3) different user role logins signs in an editor with activity
     Failure/Error: expect(page).to have_content(collections.first.title)

     ActiveRecord::StatementInvalid:
       Mysql2::Error: Expression #1 of ORDER BY clause is not in SELECT list, references column 'testing.deeds.created_at' which is not in SELECT list; this is incompatible with DISTINCT: SELECT  DISTINCT `collections`.`id` FROM `collections` LEFT OUTER JOIN `deeds` ON `deeds`.`collection_id` = `collections`.`id` WHERE `collections`.`id` IN (3, 1)  ORDER BY deeds.created_at DESC LIMIT 1
     # /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:303:in `query'
     # /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:303:in `block in execute'
     # /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/connection_adapters/abstract_adapter.rb:373:in `block in log'
     # /var/lib/gems/2.3.0/gems/activesupport-4.1.2/lib/active_support/notifications/instrumenter.rb:20:in `instrument'
     # /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/connection_adapters/abstract_adapter.rb:367:in `log'
     # /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:303:in `execute'
     # /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/connection_adapters/mysql2_adapter.rb:228:in `execute'
     # /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/connection_adapters/mysql2_adapter.rb:232:in `exec_query'
     # /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/connection_adapters/mysql2_adapter.rb:240:in `select'
     # /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/connection_adapters/abstract/database_statements.rb:24:in `select_all'
     # /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/connection_adapters/abstract/query_cache.rb:70:in `select_all'
     # /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/relation/finder_methods.rb:382:in `limited_ids_for'
     # /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/relation/finder_methods.rb:369:in `apply_join_dependency'
     # /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/relation/finder_methods.rb:330:in `find_with_associations'
     # /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/relation.rb:604:in `exec_queries'
     # /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/relation.rb:486:in `load'
     # /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/relation.rb:231:in `to_a'
     # /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/relation/finder_methods.rb:467:in `find_nth_with_limit'
     # /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/relation/finder_methods.rb:459:in `find_nth'
     # /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/relation/finder_methods.rb:132:in `first'
     # ./spec/features/role_view_spec.rb:76:in `block (2 levels) in <top (required)>'
     # ------------------
     # --- Caused by: ---
     # Mysql2::Error:
     #   Expression #1 of ORDER BY clause is not in SELECT list, references column 'testing.deeds.created_at' which is not in SELECT list; this is incompatible with DISTINCT
     #   /var/lib/gems/2.3.0/gems/activerecord-4.1.2/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:303:in `query'

  4) category attributes tag with a button
     Failure/Error: expect(page).to have_content(@category.title+'_id'+@category.id)

     TypeError:
       no implicit conversion of Fixnum into String
     # ./spec/features/transcribe_annotate_spec.rb:70:in `+'
     # ./spec/features/transcribe_annotate_spec.rb:70:in `block (2 levels) in <top (required)>'

Finished in 1 minute 35.98 seconds (files took 2.39 seconds to load)
106 examples, 4 failures, 62 pending

Failed examples:

rspec ./spec/features/category_attributes_spec.rb:41 # category attributes creates a new attribute value
rspec ./spec/features/owner_actions_spec.rb:54 # owner actions checks for subject in a new collection
rspec ./spec/features/role_view_spec.rb:63 # different user role logins signs in an editor with activity
rspec ./spec/features/transcribe_annotate_spec.rb:52 # category attributes tag with a button

** Invoke fromthepage:process_tex_figures (first_time)
** Invoke environment (first_time)
** Execute environment
** Execute fromthepage:process_tex_figures
